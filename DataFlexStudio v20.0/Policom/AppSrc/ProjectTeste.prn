Compiling Program: C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\ProjectTeste.src
Memory Available: 420286464
1>Use DFAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.pkd    (C:\Program Files\DataFlex 20.0\Pkg\dfallent.pkd)
68480>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJStandardCommandBarSystem.pkg)
68480>>>// these are all the packages used in a standard MDI menubar/toolbar system
68480>>>
68480>>>Use cCJCommandBarSystem.pkg
68480>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJStandardMenuItemClasses.pkg)
68480>>>>>Use Dfpanel.pkg
68480>>>>>Use cCJCommandBarSystem.pkg
68480>>>>>Use LanguageText.pkg
68480>>>>>
68480>>>>>
68480>>>>>Class cCJUndoMenuItem is a cCJMenuItem
68481>>>>>    
68481>>>>>    Procedure Construct_Object
68483>>>>>        Forward Send Construct_Object
68485>>>>>        Set psCaption   to C_$CaptionUndo
68486>>>>>        Set psToolTip to C_$ToolTipUndo
68487>>>>>        Set psDescription to C_$DescUndo
68488>>>>>        Set psImage to "ActionUndo.ico"
68489>>>>>        Set pbActiveUpdate to True
68490>>>>>        Set psCategory to C_$CategoryEdit
68491>>>>>        Set psShortcut to C_$Key_Ctrl_Z
68492>>>>>    End_Procedure
68493>>>>>    
68493>>>>>    Procedure OnExecute Variant vCommandBarControl
68495>>>>>        Send Undo of (focus(Self))
68496>>>>>    End_Procedure
68497>>>>>    
68497>>>>>    Function IsEnabled Returns Boolean
68499>>>>>        Boolean bEnabled
68499>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
68500>>>>>        Function_Return bEnabled
68501>>>>>    End_Function
68502>>>>>    
68502>>>>>End_Class
68503>>>>>
68503>>>>>
68503>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
68504>>>>>    
68504>>>>>    Procedure Construct_Object
68506>>>>>        Forward Send Construct_Object
68508>>>>>        Set psCaption   to C_$CaptionDelete
68509>>>>>        Set psToolTip to C_$ToolTipDelete
68510>>>>>        Set psDescription to C_$DescDelete
68511>>>>>        Set psImage to "actionDelete.ico"
68512>>>>>        Set psShortcut to C_$Key_Delete
68513>>>>>        Set pbActiveUpdate to True
68514>>>>>        Set psCategory to C_$CategoryEdit
68515>>>>>    End_Procedure
68516>>>>>    
68516>>>>>    
68516>>>>>    Procedure OnExecute Variant vCommandBarControl
68518>>>>>        Send Delete of (focus(Self))
68519>>>>>    End_Procedure
68520>>>>>    
68520>>>>>    Function IsEnabled Returns Boolean
68522>>>>>        Boolean bEnabled
68522>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
68523>>>>>        Function_Return bEnabled
68524>>>>>    End_Function
68525>>>>>    
68525>>>>>End_Class
68526>>>>>
68526>>>>>
68526>>>>>Class cCJCutMenuItem is a cCJMenuItem
68527>>>>>    
68527>>>>>    Procedure Construct_Object
68529>>>>>        Forward Send Construct_Object
68531>>>>>        Set psCaption   to C_$CaptionCut
68532>>>>>        Set psToolTip to C_$TooltipCut
68533>>>>>        Set psDescription to C_$DescCut
68534>>>>>        Set psImage to "actionCut.ico"
68535>>>>>        Set psShortcut to C_$Key_Ctrl_X
68536>>>>>        Set pbActiveUpdate to True
68537>>>>>        Set psCategory to C_$CategoryEdit
68538>>>>>    End_Procedure
68539>>>>>    
68539>>>>>    
68539>>>>>    Procedure OnExecute Variant vCommandBarControl
68541>>>>>        Send Cut of (focus(Self))
68542>>>>>    End_Procedure
68543>>>>>    
68543>>>>>    Function IsEnabled Returns Boolean
68545>>>>>        Boolean bEnabled
68545>>>>>        Get CanCut of (Focus(Self)) to bEnabled
68546>>>>>        Function_Return bEnabled
68547>>>>>    End_Function
68548>>>>>    
68548>>>>>End_Class
68549>>>>>
68549>>>>>
68549>>>>>Class cCJCopyMenuItem is a cCJMenuItem
68550>>>>>    
68550>>>>>    Procedure Construct_Object
68552>>>>>        Forward Send Construct_Object
68554>>>>>        Set psCaption   to C_$CaptionCopy
68555>>>>>        Set psToolTip to C_$ToolTipCopy
68556>>>>>        Set psDescription to C_$DescCopy
68557>>>>>        Set psImage to "actionCopy.ico"
68558>>>>>        Set psShortcut to C_$Key_Ctrl_C
68559>>>>>        Set pbActiveUpdate to True
68560>>>>>        Set psCategory to C_$CategoryEdit
68561>>>>>    End_Procedure
68562>>>>>    
68562>>>>>    
68562>>>>>    Procedure OnExecute Variant vCommandBarControl
68564>>>>>        Send Copy of (focus(Self))
68565>>>>>    End_Procedure
68566>>>>>    
68566>>>>>    Function IsEnabled Returns Boolean
68568>>>>>        Boolean bEnabled
68568>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
68569>>>>>        Function_Return bEnabled
68570>>>>>    End_Function
68571>>>>>    
68571>>>>>End_Class
68572>>>>>
68572>>>>>
68572>>>>>Class cCJPasteMenuItem is a cCJMenuItem
68573>>>>>    
68573>>>>>    Procedure Construct_Object
68575>>>>>        Forward Send Construct_Object
68577>>>>>        Set psCaption   to C_$CaptionPaste
68578>>>>>        Set psToolTip to C_$ToolTipPaste
68579>>>>>        Set psDescription to C_$DescPaste
68580>>>>>        Set psImage to "actionPaste.ico"
68581>>>>>        Set pbActiveUpdate to True
68582>>>>>        Set psShortcut to C_$Key_Ctrl_V
68583>>>>>        Set psCategory to C_$CategoryEdit
68584>>>>>    End_Procedure
68585>>>>>    
68585>>>>>    
68585>>>>>    Procedure OnExecute Variant vCommandBarControl
68587>>>>>        Send Paste of (focus(Self))
68588>>>>>    End_Procedure
68589>>>>>    
68589>>>>>    Function IsEnabled Returns Boolean
68591>>>>>        Boolean bEnabled
68591>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
68592>>>>>        Function_Return bEnabled
68593>>>>>    End_Function
68594>>>>>    
68594>>>>>End_Class
68595>>>>>
68595>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
68596>>>>>    
68596>>>>>    Procedure Construct_Object
68598>>>>>        Forward Send Construct_Object
68600>>>>>        Set psCaption   to C_$CaptionSelectAll
68601>>>>>        Set psToolTip to C_$ToolTipSelectAll
68602>>>>>        Set psDescription to C_$DescSelectAll
68603>>>>>        Set pbActiveUpdate to True
68604>>>>>        Set psShortcut to C_$Key_Ctrl_A
68605>>>>>        Set psCategory to C_$CategoryEdit
68606>>>>>    End_Procedure
68607>>>>>    
68607>>>>>    
68607>>>>>    Procedure OnExecute Variant vCommandBarControl
68609>>>>>        Send Select_All of (focus(Self))
68610>>>>>    End_Procedure
68611>>>>>    
68611>>>>>    Function IsEnabled Returns Boolean
68613>>>>>        Boolean bEnabled
68613>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
68614>>>>>        Function_Return bEnabled
68615>>>>>    End_Function
68616>>>>>    
68616>>>>>End_Class
68617>>>>>
68617>>>>>
68617>>>>>Class cCJExitMenuItem is a cCJMenuItem
68618>>>>>    
68618>>>>>    Procedure Construct_Object
68620>>>>>        Forward Send Construct_Object
68622>>>>>        Set psCaption to C_$CaptionExit
68623>>>>>        Set psToolTip to C_$ToolTipExit
68624>>>>>        Set psDescription to C_$ToolTipExit
68625>>>>>        Set psShortcut to C_$Key_Alt_F4
68626>>>>>        Set psCategory to C_$CategoryFile
68627>>>>>    End_Procedure
68628>>>>>    
68628>>>>>    Procedure OnExecute Variant vCommandBarControl
68630>>>>>        Send Exit_Application of Desktop
68631>>>>>    End_Procedure
68632>>>>>    
68632>>>>>End_Class
68633>>>>>
68633>>>>>Class cCJHelpMenuItem is a cCJMenuItem
68634>>>>>    
68634>>>>>    Procedure Construct_Object
68636>>>>>        Forward Send Construct_Object
68638>>>>>        Set psCaption to C_$CaptionHelp
68639>>>>>        Set psDescription to C_$ToolTipHelp
68640>>>>>        Set psToolTip to C_$DescHelp
68641>>>>>        Set psImage to "ActionHelp.ico"
68642>>>>>        Set psShortcut to "F1"
68643>>>>>        Set psCategory to C_$CategoryHelp
68644>>>>>    End_Procedure
68645>>>>>    
68645>>>>>    Procedure OnExecute Variant vCommandBarControl
68647>>>>>        Send Help of (Focus(Self))
68648>>>>>    End_Procedure
68649>>>>>    
68649>>>>>End_Class
68650>>>>>
68650>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
68651>>>>>    
68651>>>>>    Procedure Construct_Object
68653>>>>>        Forward Send Construct_Object
68655>>>>>        Set psCaption to C_$CaptionAddStatusbar
68656>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
68657>>>>>        Set psDescription to  C_$DescAddStatusbar
68658>>>>>        Set psCategory to C_$CategoryWindow
68659>>>>>    End_Procedure
68660>>>>>    
68660>>>>>    Procedure OnExecute Variant vCommandBarControl
68662>>>>>        Handle hoCommandBars hoClientArea
68662>>>>>        Get CommandBarSystemObject to hoCommandBars
68663>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68664>>>>>        If hoClientArea Begin
68666>>>>>            // the clientarea's parent panel has message
68666>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
68667>>>>>        End
68667>>>>>>
68667>>>>>    End_Procedure
68668>>>>>    
68668>>>>>    Function IsChecked Returns Boolean
68670>>>>>        Boolean bOn
68670>>>>>        Handle hoCommandBars hoClientArea
68670>>>>>        Get CommandBarSystemObject to hoCommandBars
68671>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68672>>>>>        If hoClientArea Begin
68674>>>>>            // the clientarea's parent panel has message
68674>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
68675>>>>>        End
68675>>>>>>
68675>>>>>        Function_Return bOn
68676>>>>>    End_Function
68677>>>>>End_Class
68678>>>>>
68678>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
68679>>>>>    
68679>>>>>    Procedure Construct_Object
68681>>>>>        Forward Send Construct_Object
68683>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
68684>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
68685>>>>>        Set psDescription to C_$DescAutoArrangeIcons
68686>>>>>        Set psCategory to C_$CategoryWindow
68687>>>>>    End_Procedure
68688>>>>>    
68688>>>>>    Procedure OnExecute Variant vCommandBarControl
68690>>>>>        Handle hoCommandBars hoClientArea
68690>>>>>        Get CommandBarSystemObject to hoCommandBars
68691>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68692>>>>>        If hoClientArea Begin
68694>>>>>            // the clientarea's parent panel has message
68694>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
68695>>>>>        End
68695>>>>>>
68695>>>>>    End_Procedure
68696>>>>>    
68696>>>>>    Function IsChecked Returns Boolean
68698>>>>>        Boolean bOn
68698>>>>>        Handle hoCommandBars hoClientArea
68698>>>>>        Get CommandBarSystemObject to hoCommandBars
68699>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68700>>>>>        If hoClientArea Begin
68702>>>>>            // the clientarea's parent panel has message
68702>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
68703>>>>>        End
68703>>>>>>
68703>>>>>        Function_Return bOn
68704>>>>>    End_Function
68705>>>>>End_Class
68706>>>>>
68706>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
68707>>>>>    
68707>>>>>    Procedure Construct_Object
68709>>>>>        Forward Send Construct_Object
68711>>>>>        Set psCaption to C_$CaptionRestoreMenus
68712>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
68713>>>>>        Set psDescription to C_$DescRestoreMenus
68714>>>>>        Set psCategory to C_$CategoryWindow
68715>>>>>    End_Procedure
68716>>>>>    
68716>>>>>    Procedure OnExecute Variant vCommandBarControl
68718>>>>>        Handle hoCommandBars
68718>>>>>        Get CommandBarSystemObject to hoCommandBars
68719>>>>>        Send RestoreLayout of hoCommandBars
68720>>>>>    End_Procedure
68721>>>>>    
68721>>>>>End_Class
68722>>>>>
68722>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
68723>>>>>    
68723>>>>>    Procedure Construct_Object
68725>>>>>        Forward Send Construct_Object
68727>>>>>        Set psCaption to C_$CaptionCascade
68728>>>>>        Set psToolTip to C_$ToolTipCascade
68729>>>>>        Set psDescription to  C_$DescCascade
68730>>>>>        Set psImage to "ActionCascade.ico"
68731>>>>>        Set psCategory to C_$CategoryWindow
68732>>>>>    End_Procedure
68733>>>>>    
68733>>>>>    Procedure OnExecute Variant vCommandBarControl
68735>>>>>        Handle hoCommandBars hoClientArea
68735>>>>>        Get CommandBarSystemObject to hoCommandBars
68736>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68737>>>>>        If hoClientArea Begin
68739>>>>>            Send Cascade_Windows of hoClientArea
68740>>>>>        End
68740>>>>>>
68740>>>>>    End_Procedure
68741>>>>>End_Class
68742>>>>>
68742>>>>>Class cCJTileHorizontally is a cCJMenuItem
68743>>>>>    
68743>>>>>    Procedure Construct_Object
68745>>>>>        Forward Send Construct_Object
68747>>>>>        Set psCaption to C_$CaptionTileHorizontally
68748>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
68749>>>>>        Set psDescription to  C_$DescTileHorizontally
68750>>>>>        Set psImage to "ActionTileHorizontally.ico"
68751>>>>>        Set psCategory to C_$CategoryWindow
68752>>>>>    End_Procedure
68753>>>>>    
68753>>>>>    Procedure OnExecute Variant vCommandBarControl
68755>>>>>        Handle hoCommandBars hoClientArea
68755>>>>>        Get CommandBarSystemObject to hoCommandBars
68756>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68757>>>>>        If hoClientArea Begin
68759>>>>>            Send Tile_Windows_Horizontal of hoClientArea
68760>>>>>        End
68760>>>>>>
68760>>>>>    End_Procedure
68761>>>>>End_Class
68762>>>>>
68762>>>>>Class cCJTileVertically is a cCJMenuItem
68763>>>>>    
68763>>>>>    Procedure Construct_Object
68765>>>>>        Forward Send Construct_Object
68767>>>>>        Set psCaption to C_$CaptionTileVertically
68768>>>>>        Set psToolTip to C_$ToolTipTileVertically
68769>>>>>        Set psDescription to  C_$DescTileVertically
68770>>>>>        Set psImage to "ActionTileVertically.ico"
68771>>>>>        Set psCategory to C_$CategoryWindow
68772>>>>>    End_Procedure
68773>>>>>    
68773>>>>>    Procedure OnExecute Variant vCommandBarControl
68775>>>>>        Handle hoCommandBars hoClientArea
68775>>>>>        Get CommandBarSystemObject to hoCommandBars
68776>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68777>>>>>        If hoClientArea Begin
68779>>>>>            Send Tile_Windows_Vertical of hoClientArea
68780>>>>>        End
68780>>>>>>
68780>>>>>    End_Procedure
68781>>>>>End_Class
68782>>>>>
68782>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
68783>>>>>    
68783>>>>>    Procedure Construct_Object
68785>>>>>        Forward Send Construct_Object
68787>>>>>        Set psCaption to C_$CaptionMinimizeWindows
68788>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
68789>>>>>        Set psDescription to  C_$DescMinimizeWindows
68790>>>>>        Set psCategory to C_$CategoryWindow
68791>>>>>    End_Procedure
68792>>>>>    
68792>>>>>    Procedure OnExecute Variant vCommandBarControl
68794>>>>>        Handle hoCommandBars hoClientArea
68794>>>>>        Get CommandBarSystemObject to hoCommandBars
68795>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68796>>>>>        If hoClientArea Begin
68798>>>>>            // the clientarea's parent panel has message
68798>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
68799>>>>>        End
68799>>>>>>
68799>>>>>    End_Procedure
68800>>>>>End_Class
68801>>>>>
68801>>>>>
68801>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
68802>>>>>    
68802>>>>>    Procedure Construct_Object
68804>>>>>        Forward Send Construct_Object
68806>>>>>        Set psCaption to C_$CaptionRestoreWindows
68807>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
68808>>>>>        Set psDescription to  C_$DescRestoreWindows
68809>>>>>        Set psCategory to C_$CategoryWindow
68810>>>>>    End_Procedure
68811>>>>>    
68811>>>>>    Procedure OnExecute Variant vCommandBarControl
68813>>>>>        Handle hoCommandBars hoClientArea
68813>>>>>        Get CommandBarSystemObject to hoCommandBars
68814>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68815>>>>>        If hoClientArea Begin
68817>>>>>            // the clientarea's parent panel has message
68817>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
68818>>>>>        End
68818>>>>>>
68818>>>>>    End_Procedure
68819>>>>>End_Class
68820>>>>>
68820>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
68821>>>>>    
68821>>>>>    Procedure Construct_Object
68823>>>>>        Forward Send Construct_Object
68825>>>>>        Set psCaption to C_$CaptionArrangeIcons
68826>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
68827>>>>>        Set psDescription to  C_$DescArrangeIcons
68828>>>>>        Set psCategory to C_$CategoryWindow
68829>>>>>    End_Procedure
68830>>>>>    
68830>>>>>    Procedure OnExecute Variant vCommandBarControl
68832>>>>>        Handle hoCommandBars hoClientArea
68832>>>>>        Get CommandBarSystemObject to hoCommandBars
68833>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68834>>>>>        If hoClientArea Begin
68836>>>>>            Send Arrange_Icons of hoClientArea
68837>>>>>        End
68837>>>>>>
68837>>>>>    End_Procedure
68838>>>>>    
68838>>>>>End_Class
68839>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJAboutMenuItem.pkg)
68839>>>>>Use cCJCommandBarSystem.pkg
68839>>>>>Use LanguageText.pkg
68839>>>>>
68839>>>>>// It is expected that if you use this class that you provide an about object that is
68839>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
68839>>>>>// because you may wish to create your own custom about package.
68839>>>>>
68839>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
68840>>>>>
68840>>>>>    Procedure Construct_Object
68842>>>>>        Forward Send Construct_Object
68844>>>>>        Set psCaption to C_$CaptionAbout
68845>>>>>        Set psDescription to C_$ToolTipAbout
68846>>>>>        Set psToolTip to C_$DescAbout
68847>>>>>        Set psImage to "ActionAbout.ico"
68848>>>>>        Set psCategory to C_$CategoryHelp
68849>>>>>    End_Procedure
68850>>>>>    
68850>>>>>    Procedure OnExecute Variant vCommandBarControl
68852>>>>>        Handle hoCommandBars hoClientArea
68852>>>>>        Get CommandBarSystemObject to hoCommandBars
68853>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68854>>>>>        If hoClientArea Begin
68856>>>>>            Send Activate_About of hoClientArea
68857>>>>>        End
68857>>>>>>
68857>>>>>    End_Procedure
68858>>>>>
68858>>>>>End_Class
68859>>>>>
68859>>>>>
68859>>>Use cCJDeoMenuItemClasses.pkg
68859>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJMDIWindowsMenuItem.pkg)
68859>>>>>Use cCJCommandBarSystem.pkg
68859>>>>>
68859>>>>>Register_Function Client_ID Returns Integer
68859>>>>>
68859>>>>>// only used by cCJMDIWIndowsMenuItem
68859>>>>>Class cCJMDIWindowItem is a cCJMenuItem
68860>>>>>    
68860>>>>>    Procedure Construct_Object
68862>>>>>        Forward Send Construct_Object
68864>>>>>        Property Handle phWindow 0 // object id of view
68865>>>>>        Set pbControlFlagNoMovable to True
68866>>>>>        Set pbActiveUpdate to True
68867>>>>>    End_Procedure
68868>>>>>    
68868>>>>>    Procedure OnExecute Variant vCommandBarControl
68870>>>>>        Handle hWindow
68870>>>>>        Get phWindow to hWindow
68871>>>>>        Send Activate_View of hWindow
68872>>>>>    End_Procedure
68873>>>>>    
68873>>>>>End_Class
68874>>>>>
68874>>>>>
68874>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
68875>>>>>    
68875>>>>>    Procedure Construct_Object
68877>>>>>        Forward Send Construct_Object
68879>>>>>        Property Handle[] phArrayOfWindows
68880>>>>>        Set peControlType to xtpControlPopup
68881>>>>>        Set psCategory to C_$CategoryWindow
68882>>>>>    End_Procedure
68883>>>>>    
68883>>>>>    // This adds MDI windows to the existing menu items.
68883>>>>>    // This removes any existing windows menus and always adds a new set to the end
68883>>>>>    
68883>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
68885>>>>>        Handle  hClientArea hView
68885>>>>>        String  sLabel
68885>>>>>        Integer i iWindows
68885>>>>>        Handle[] hArrayOfWindows
68886>>>>>        Variant vItem
68886>>>>>        
68886>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
68886>>>>>        // also assume that destroying an action removes all menu instances of that action
68886>>>>>        Get phArrayOfWindows to hArrayOfWindows
68887>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
68888>>>>>        For i from 0 to (iWindows-1)
68894>>>>>>
68894>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
68895>>>>>        Loop
68896>>>>>>
68896>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
68897>>>>>        
68897>>>>>        // Add all views to this menu. Create the action and add the item
68897>>>>>        Move 0 to i
68898>>>>>        Get Client_Id to hClientArea // object id of client area
68899>>>>>        If (hClientArea > 0) Begin
68901>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
68902>>>>>            While (hView <> 0)
68906>>>>>                If (Active_State(hView)) Begin
68908>>>>>                    // create the action
68908>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
68909>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
68910>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
68911>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
68912>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
68914>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
68915>>>>>                    End
68915>>>>>>
68915>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
68916>>>>>                    If (i=0) Begin
68918>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
68919>>>>>                    End
68919>>>>>>
68919>>>>>                    // Create a menu item for this action
68919>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
68920>>>>>                    Increment i
68921>>>>>                End
68921>>>>>>
68921>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
68922>>>>>            Loop
68923>>>>>>
68923>>>>>        End
68923>>>>>>
68923>>>>>        
68923>>>>>        Set phArrayOfWindows to hArrayOfWindows
68924>>>>>        
68924>>>>>    End_Procedure
68925>>>>>    
68925>>>>>End_Class
68926>
68926>Object oHtmlHelp is a cHtmlHelp
68928>End_Object
68929>
68929>Object oApplication is a cApplication
68931>    Set peHelpType to htHtmlHelp
68932>
68932>    Object oConnection is a cConnection
68934>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 20.0\Pkg\LoginEncryption.pkg)
68934>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cLoginEncryption.pkg)
68934>>>>>Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCryptographerEx.pkg)
68934>>>>>>>Use VdfBase.pkg
68934>>>>>>>
68934>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 20.0\Pkg\CryptographerConstants.pkg)
68934>>>>>>>>>//   Author  : Ulbe Stellema
68934>>>>>>>>>// Algorithm classes
68934>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
68934>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
68934>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
68934>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
68934>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
68934>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
68934>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
68934>>>>>>>>>
68934>>>>>>>>>// Algorithm types
68934>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
68934>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
68934>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
68934>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
68934>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
68934>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
68934>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
68934>>>>>>>>>
68934>>>>>>>>>// Generic sub-ids
68934>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
68934>>>>>>>>>
68934>>>>>>>>>// RSA sub-ids
68934>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
68934>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
68934>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
68934>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
68934>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
68934>>>>>>>>>
68934>>>>>>>>>// DSS sub-ids
68934>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
68934>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
68934>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
68934>>>>>>>>>
68934>>>>>>>>>// DES sub_ids
68934>>>>>>>>>Define ALG_SID_DES                      for 1
68934>>>>>>>>>Define ALG_SID_3DES                     for 3
68934>>>>>>>>>Define ALG_SID_DESX                     for 4
68934>>>>>>>>>Define ALG_SID_IDEA                     for 5
68934>>>>>>>>>Define ALG_SID_CAST                     for 6
68934>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
68934>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
68934>>>>>>>>>Define ALG_SID_3DES_112                 for 9
68934>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
68934>>>>>>>>>Define ALG_SID_RC5                      for 13
68934>>>>>>>>>Define ALG_SID_AES_128                  for 14
68934>>>>>>>>>Define ALG_SID_AES_192                  for 15
68934>>>>>>>>>Define ALG_SID_AES_256                  for 16
68934>>>>>>>>>Define ALG_SID_AES                      for 17
68934>>>>>>>>>
68934>>>>>>>>>// Fortezza sub-ids
68934>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
68934>>>>>>>>>Define ALG_SID_TEK                      for 11
68934>>>>>>>>>
68934>>>>>>>>>// RC2 sub-ids
68934>>>>>>>>>Define ALG_SID_RC2                      for 2
68934>>>>>>>>>
68934>>>>>>>>>// Stream cipher sub-ids
68934>>>>>>>>>Define ALG_SID_RC4                      for 1
68934>>>>>>>>>Define ALG_SID_SEAL                     for 2
68934>>>>>>>>>
68934>>>>>>>>>// Diffie-Hellman sub-ids
68934>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
68934>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
68934>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
68934>>>>>>>>>Define ALG_SID_KEA                      for 4
68934>>>>>>>>>
68934>>>>>>>>>// Hash sub ids
68934>>>>>>>>>Define ALG_SID_MD2                      for 1
68934>>>>>>>>>Define ALG_SID_MD4                      for 2
68934>>>>>>>>>Define ALG_SID_MD5                      for 3
68934>>>>>>>>>Define ALG_SID_SHA                      for 4
68934>>>>>>>>>Define ALG_SID_SHA1                     for 4
68934>>>>>>>>>Define ALG_SID_MAC                      for 5
68934>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
68934>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
68934>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
68934>>>>>>>>>Define ALG_SID_HMAC                     for 9
68934>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
68934>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
68934>>>>>>>>>Define ALG_SID_SHA_256                  for 12
68934>>>>>>>>>Define ALG_SID_SHA_384                  for 13
68934>>>>>>>>>Define ALG_SID_SHA_512                  for 14
68934>>>>>>>>>
68934>>>>>>>>>// secure channel sub ids
68934>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
68934>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
68934>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
68934>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
68934>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
68934>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
68934>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
68934>>>>>>>>>
68934>>>>>>>>>// algorithm identifier definitions
68934>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
68934>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
68934>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
68934>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
68934>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
68934>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
68934>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
68934>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
68934>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
68934>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
68934>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
68934>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
68934>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
68934>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
68934>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
68934>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
68934>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
68934>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
68934>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
68934>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
68934>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
68934>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
68934>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
68934>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
68934>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
68934>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
68934>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
68934>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
68934>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
68934>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
68934>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
68934>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
68934>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
68934>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
68934>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
68934>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
68934>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
68934>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
68934>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
68934>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
68934>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
68934>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
68934>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
68934>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
68934>>>>>>>>>
68934>>>>>>>>>// Providers
68934>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
68934>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
68934>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
68934>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
68934>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
68934>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
68934>>>>>>>>>
68934>>>>>>>>>// dwFlags definitions for CryptAcquireContext
68934>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
68934>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
68934>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
68934>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
68934>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
68934>>>>>>>>>
68934>>>>>>>>>// dwFlag definitions for CryptGenKey
68934>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
68934>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
68934>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
68934>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
68934>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
68934>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
68934>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
68934>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
68934>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
68934>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
68934>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
68934>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
68934>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
68934>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
68934>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
68934>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
68934>>>>>>>>>
68934>>>>>>>>>// Provider types
68934>>>>>>>>>Define PROV_RSA_FULL                    for 1
68934>>>>>>>>>Define PROV_RSA_SIG                     for 2
68934>>>>>>>>>Define PROV_DSS                         for 3
68934>>>>>>>>>Define PROV_FORTEZZA                    for 4
68934>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
68934>>>>>>>>>Define PROV_SSL                         for 6
68934>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
68934>>>>>>>>>Define PROV_DSS_DH                      for 13
68934>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
68934>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
68934>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
68934>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
68934>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
68934>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
68934>>>>>>>>>Define PROV_RNG                         for 21
68934>>>>>>>>>Define PROV_INTEL_SEC                   for 22
68934>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
68934>>>>>>>>>Define PROV_RSA_AES                     for 24
68934>>>>>>>>>
68934>>>>>>>>>// KP_MODE
68934>>>>>>>>>// KP_MODE
68934>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
68934>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
68934>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
68934>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
68934>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
68934>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
68934>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
68934>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
68934>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
68934>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
68934>>>>>>>>>
68934>>>>>>>>>// dwParam definitions for CryptGetKeyParam
68934>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
68934>>>>>>>>>Define KP_SALT                          for 2       // Salt value
68934>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
68934>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
68934>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
68934>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
68934>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
68934>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
68934>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
68934>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
68934>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
68934>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
68934>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
68934>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
68934>>>>>>>>>Define KP_Y                             for 15      // Y value
68934>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
68934>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
68934>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
68934>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
68934>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
68934>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
68934>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
68934>>>>>>>>>Define KP_RP                            for 23
68934>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
68934>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
68934>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
68934>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
68934>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
68934>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
68934>>>>>>>>>Define KP_KEYVAL                        for 30
68934>>>>>>>>>Define KP_ADMIN_PIN                     for 31
68934>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
68934>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
68934>>>>>>>>>Define KP_PREHASH                       for 34
68934>>>>>>>>>Define KP_ROUNDS                        for 35
68934>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
68934>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
68934>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
68934>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
68934>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
68934>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
68934>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
68934>>>>>>>>>
68934>>>>>>>>>// dwParam definitions for CryptGetHashParam
68934>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
68934>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
68934>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
68934>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
68934>>>>>>>>>
68934>>>>>>>>>// key BLOB types
68934>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
68934>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
68934>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
68934>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
68934>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
68934>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
68934>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
68934>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
68934>>>>>>>>>
68934>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
68934>>>>>>>>>
68934>>>>>>>>>// KP_PADDING
68934>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
68934>>>>>>>>>Define RANDOM_PADDING                   for 2
68934>>>>>>>>>Define ZERO_PADDING                     for 3
68934>>>>>>>>>
68934>>>>>>>>>//  Structure cryptimportkey
68934>>>>>>>>>Struct PUBLICKEYSTRUC
68934>>>>>>>>>    UChar    bType
68934>>>>>>>>>    UChar    bVersion
68934>>>>>>>>>    UShort   reserved
68934>>>>>>>>>    UInteger aiKeyAlg
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct tPLAINTEXTKEYBLOB
68934>>>>>>>>>    PUBLICKEYSTRUC hdr
68934>>>>>>>>>    PUBLICKEYSTRUC hdr
68934>>>>>>>>>    UInteger       dwKeySize
68934>>>>>>>>>//    UChar[]        rgbKeyData
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
68934>>>>>>>>>Struct HMAC_INFO
68934>>>>>>>>>    UInteger HashAlgid
68934>>>>>>>>>    Pointer pbInnerString
68934>>>>>>>>>    DWord cbInnerString
68934>>>>>>>>>    Pointer pbOuterString
68934>>>>>>>>>    DWord cbOuterString
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct BLOBHEADER
68934>>>>>>>>>    UChar   bType
68934>>>>>>>>>    UChar   bVersion
68934>>>>>>>>>    Short   reserved
68934>>>>>>>>>    Integer aiKeyAlg
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct CryptoBlob
68934>>>>>>>>>    BLOBHEADER  header
68934>>>>>>>>>    BLOBHEADER  header
68934>>>>>>>>>    Integer     cbKeySize
68934>>>>>>>>>    UChar[32]   rgbKeyData
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
68934>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
68935>>>>>>>>>
68935>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
68935>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
68937>>>>>>>>>    
68937>>>>>>>>>    Boolean bResult
68937>>>>>>>>>    UWide   uwContainer uwProvider
68937>>>>>>>>>    UWide   uwContainer uwProvider
68937>>>>>>>>>
68937>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
68938>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
68939>>>>>>>>>    
68939>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
68940>>>>>>>>>
68940>>>>>>>>>    Function_Return bResult
68941>>>>>>>>>End_Function
68942>>>>>>>>>
68942>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
68943>>>>>>>>>
68943>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
68944>>>>>>>>>
68944>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
68945>>>>>>>>>
68945>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
68946>>>>>>>>>
68946>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68947>>>>>>>>>
68947>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
68948>>>>>>>>>
68948>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
68949>>>>>>>>>
68949>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68950>>>>>>>>>
68950>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
68951>>>>>>>>>    
68951>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
68952>>>>>>>>>
68952>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
68953>>>>>>>>>
68953>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
68954>>>>>>>>>
68954>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
68955>>>>>>>>>    
68955>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
68956>>>>>>>>>    
68956>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68957>>>>>>>>>    
68957>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
68958>>>>>>>
68958>>>>>>>Class cCryptographerEx is a cObject
68959>>>>>>>    
68959>>>>>>>    Procedure Construct_Object
68961>>>>>>>        Forward Send Construct_Object
68963>>>>>>>        
68963>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
68964>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
68965>>>>>>>        Property Integer    piCipher    CALG_RC4
68966>>>>>>>        Property Integer    piHash      CALG_MD5
68967>>>>>>>        
68967>>>>>>>        // Private properties
68967>>>>>>>        Property Handle     Private_phProv
68968>>>>>>>        
68968>>>>>>>        // Block cipher properties
68968>>>>>>>        Property UChar[]    paKey
68969>>>>>>>        Property UChar[]    paIV
68970>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
68971>>>>>>>        Property Integer    piKeyType       CALG_AES_256
68972>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
68973>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
68974>>>>>>>        Property Integer    piBlockSize     16
68975>>>>>>>    End_Procedure
68976>>>>>>>    
68976>>>>>>>    
68976>>>>>>>    // Acquire key container handle
68976>>>>>>>    Function AcquireContext Returns Handle
68978>>>>>>>        Integer iProvider
68978>>>>>>>        WString wProvider
68978>>>>>>>        Handle hProv
68978>>>>>>>        Boolean bOk
68978>>>>>>>        Pointer pProv
68978>>>>>>>        
68978>>>>>>>        Move 0 to hProv
68979>>>>>>>        Get piProvider to iProvider
68980>>>>>>>        Get psProvider to wProvider
68981>>>>>>>        
68981>>>>>>>        //  Determine address to be passed as provider
68981>>>>>>>        If (Trim(wProvider) <> "") Begin
68983>>>>>>>            Move (AddressOf(wProvider)) to pProv
68984>>>>>>>        End
68984>>>>>>>>
68984>>>>>>>        Else Begin
68985>>>>>>>            Move 0 to pProv
68986>>>>>>>        End
68986>>>>>>>>
68986>>>>>>>        
68986>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
68986>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
68987>>>>>>>        If (not(bOk) or hProv = 0) Begin
68989>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
68990>>>>>>>        End
68990>>>>>>>>
68990>>>>>>>        
68990>>>>>>>        If (not(bOk) or hProv = 0) Begin
68992>>>>>>>            // Fallback to original
68992>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
68993>>>>>>>            
68993>>>>>>>            If (not(bOk) or hProv = 0) Begin
68995>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
68996>>>>>>>            End
68996>>>>>>>>
68996>>>>>>>        End
68996>>>>>>>>
68996>>>>>>>        Set Private_phProv to hProv
68997>>>>>>>        
68997>>>>>>>        Function_Return hProv
68998>>>>>>>    End_Function
68999>>>>>>>    
68999>>>>>>>    // Releases key container handle
68999>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
69001>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
69002>>>>>>>    End_Function
69003>>>>>>>    
69003>>>>>>>    // Creates hash object
69003>>>>>>>    Function CreateHash Handle hProv Returns Handle
69005>>>>>>>        Integer iAlgorithm
69005>>>>>>>        Handle hHash
69005>>>>>>>        Boolean bOk
69005>>>>>>>        
69005>>>>>>>        Move 0 to hHash
69006>>>>>>>        Get piHash to iAlgorithm
69007>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
69008>>>>>>>        
69008>>>>>>>        Function_Return hHash
69009>>>>>>>    End_Function
69010>>>>>>>    
69010>>>>>>>    // Destroys the hash object
69010>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
69012>>>>>>>        Function_Return (CryptDestroyHash(hHash))
69013>>>>>>>    End_Function
69014>>>>>>>    
69014>>>>>>>    // Adds data to hash object
69014>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
69016>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
69017>>>>>>>    End_Function
69018>>>>>>>    
69018>>>>>>>    // Generates session key
69018>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
69020>>>>>>>        Integer iAlgorithm
69020>>>>>>>        Handle hKey
69020>>>>>>>        Boolean bOk
69020>>>>>>>        
69020>>>>>>>        Move 0 to hKey
69021>>>>>>>        Get piCipher to iAlgorithm
69022>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
69023>>>>>>>        
69023>>>>>>>        Function_Return hKey
69024>>>>>>>    End_Function
69025>>>>>>>    
69025>>>>>>>    // Imports a plain text key
69025>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
69027>>>>>>>        tPLAINTEXTKEYBLOB blobhead
69027>>>>>>>        tPLAINTEXTKEYBLOB blobhead
69027>>>>>>>        Boolean   bSuccess
69027>>>>>>>        Handle    hKey
69027>>>>>>>        Integer   iHeadSize iKeySize
69027>>>>>>>        UChar[]   ucaKeyblob
69028>>>>>>>        Integer iVoid
69028>>>>>>>        
69028>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
69029>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
69030>>>>>>>        
69030>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
69031>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
69032>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
69033>>>>>>>        Move iKeySize           to blobhead.dwKeySize
69034>>>>>>>        
69034>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
69035>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
69036>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
69037>>>>>>>        
69037>>>>>>>        Move 0 to hKey
69038>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
69039>>>>>>>        If (not(bSuccess)) Begin
69041>>>>>>>            Move (ShowLastError()) to iVoid
69042>>>>>>>        End
69042>>>>>>>>
69042>>>>>>>        
69042>>>>>>>        Function_Return hKey
69043>>>>>>>    End_Function
69044>>>>>>>    
69044>>>>>>>    // Destroys the key
69044>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
69046>>>>>>>        Function_Return (CryptDestroyKey(hKey))
69047>>>>>>>    End_Function
69048>>>>>>>    
69048>>>>>>>    // Retrieves key data
69048>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
69050>>>>>>>        Integer iBuffer iLen
69050>>>>>>>        Boolean bOk
69050>>>>>>>        
69050>>>>>>>        Move (SizeOfType(Integer)) to iLen
69051>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
69052>>>>>>>        Function_Return iBuffer
69053>>>>>>>    End_Function
69054>>>>>>>    
69054>>>>>>>    // Retrieves a hash value
69054>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
69056>>>>>>>        UChar[] ucHash
69057>>>>>>>        Integer liResult
69057>>>>>>>        DWord   dwDataLen
69057>>>>>>>        
69057>>>>>>>        Move 0 to dwDataLen
69058>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
69059>>>>>>>        If (liResult = 0) ;            Function_Return ""
69062>>>>>>>        
69062>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
69063>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
69064>>>>>>>        If (liResult = 0) ;            Function_Return ""
69067>>>>>>>        
69067>>>>>>>        Function_Return ucHash
69068>>>>>>>    End_Function
69069>>>>>>>
69069>>>>>>>    // Encrypts data
69069>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
69071>>>>>>>        Handle hProv hHash hKey
69071>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
69071>>>>>>>        Boolean bOk
69071>>>>>>>        
69071>>>>>>>        Get AcquireContext to hProv
69072>>>>>>>        If (hProv) Begin
69074>>>>>>>            Get CreateHash hProv to hHash
69075>>>>>>>            If (hHash) Begin
69077>>>>>>>                Get HashData hHash ucPassword to bOk
69078>>>>>>>                If (bOk) Begin
69080>>>>>>>                    Get piCipher to iAlgorithm
69081>>>>>>>                    Get DeriveKey hProv hHash to hKey
69082>>>>>>>                End
69082>>>>>>>>
69082>>>>>>>                Get DestroyHash hHash to bOk
69083>>>>>>>            End
69083>>>>>>>>
69083>>>>>>>            
69083>>>>>>>            If (hKey) Begin
69085>>>>>>>                //  First call to determine resulting data size
69085>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
69086>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
69087>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
69088>>>>>>>                
69088>>>>>>>                //  Reserve space in string
69088>>>>>>>                If (iDataLen < iCipherLen) Begin
69090>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
69091>>>>>>>                End
69091>>>>>>>>
69091>>>>>>>                
69091>>>>>>>                //  Call to really decrypt
69091>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
69092>>>>>>>                //If (not(bOk)) Begin
69092>>>>>>>                //Move "" to sData
69092>>>>>>>                //Move (GetLastError()) to iErr
69092>>>>>>>                //End
69092>>>>>>>                
69092>>>>>>>                Get DestroyKey hKey to bOk
69093>>>>>>>            End 
69093>>>>>>>>
69093>>>>>>>            Get ReleaseContext hProv to bOk
69094>>>>>>>        End 
69094>>>>>>>>
69094>>>>>>>        Function_Return ucData
69095>>>>>>>    End_Function
69096>>>>>>>    
69096>>>>>>>    // Decrypts data
69096>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
69098>>>>>>>        Handle hProv hHash hKey
69098>>>>>>>        Integer iAlgorithm iDataLen
69098>>>>>>>        Boolean bOk
69098>>>>>>>        
69098>>>>>>>        Get AcquireContext to hProv
69099>>>>>>>        If (hProv) Begin
69101>>>>>>>            Get CreateHash hProv to hHash
69102>>>>>>>            If (hHash) Begin
69104>>>>>>>                Get HashData hHash ucPassword to bOk
69105>>>>>>>                If (bOk) Begin
69107>>>>>>>                    Get piCipher to iAlgorithm
69108>>>>>>>                    Get DeriveKey hProv hHash to hKey
69109>>>>>>>                End
69109>>>>>>>>
69109>>>>>>>                Get DestroyHash hHash to bOk
69110>>>>>>>            End
69110>>>>>>>>
69110>>>>>>>            
69110>>>>>>>            If (hKey) Begin
69112>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
69113>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
69114>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
69114>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
69116>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
69117>>>>>>>                End
69117>>>>>>>>
69117>>>>>>>                
69117>>>>>>>                Get DestroyKey hKey to bOk
69118>>>>>>>            End
69118>>>>>>>>
69118>>>>>>>            Get ReleaseContext hProv to bOk
69119>>>>>>>        End
69119>>>>>>>>
69119>>>>>>>        Function_Return ucData
69120>>>>>>>    End_Function
69121>>>>>>>    
69121>>>>>>>    // Creates a key
69121>>>>>>>    Function CreateKey Handle hProv Returns Handle
69123>>>>>>>        Integer iAlg iType iByte iLength iSize
69123>>>>>>>        CryptoBlob keyBlob
69123>>>>>>>        CryptoBlob keyBlob
69123>>>>>>>        Boolean bOk
69123>>>>>>>        Handle hKey
69123>>>>>>>        UChar[] aKey
69124>>>>>>>
69124>>>>>>>        Get paKey to aKey
69125>>>>>>>        Get piKeyAlg to iAlg
69126>>>>>>>        Get piKeyType to iType
69127>>>>>>>        Move iAlg                   to keyBlob.header.bType
69128>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
69129>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
69130>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
69131>>>>>>>        
69131>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
69132>>>>>>>        For iByte from 0 to iLength
69138>>>>>>>>
69138>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
69139>>>>>>>        Loop
69140>>>>>>>>
69140>>>>>>>        
69140>>>>>>>        Move 0 to hKey
69141>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
69142>>>>>>>        Function_Return hKey
69143>>>>>>>    End_Function
69144>>>>>>>    
69144>>>>>>>    // Sets the key parameters
69144>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
69146>>>>>>>        Integer iPadding iMode
69146>>>>>>>        Boolean bOk
69146>>>>>>>        UChar[] aIV
69147>>>>>>>        
69147>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
69147>>>>>>>        //For iByte from 0 to iLength
69147>>>>>>>        //    Move iByte to aIV[iByte]
69147>>>>>>>        //Loop
69147>>>>>>>
69147>>>>>>>        // Set initialization vector
69147>>>>>>>        Get paIV to aIV
69148>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
69149>>>>>>>        If (bOk) Begin
69151>>>>>>>            // Set padding
69151>>>>>>>            Get piKeyPadding to iPadding
69152>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
69153>>>>>>>            If (bOk) Begin
69155>>>>>>>                // Set move
69155>>>>>>>                Get piKeyMode to iMode
69156>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
69157>>>>>>>            End
69157>>>>>>>>
69157>>>>>>>        End
69157>>>>>>>>
69157>>>>>>>        Function_Return bOk        
69158>>>>>>>    End_Function
69159>>>>>>>    
69159>>>>>>>    // Encrypts using block cipher
69159>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
69161>>>>>>>        Handle hProv hKey
69161>>>>>>>        Integer iLen iSize iBlocks
69161>>>>>>>        Boolean bOk
69161>>>>>>>        
69161>>>>>>>        Get AcquireContext to hProv
69162>>>>>>>        If (hProv) Begin
69164>>>>>>>            // Create key
69164>>>>>>>            Get CreateKey hProv to hKey
69165>>>>>>>            If (hKey) Begin
69167>>>>>>>                Get SetKeyParameters hKey to bOk
69168>>>>>>>                If (bOk) Begin
69170>>>>>>>                    // Buffer for block ciphers can be up to block length larger
69170>>>>>>>                    Get piBlockSize to iSize
69171>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
69172>>>>>>>                    
69172>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
69173>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
69174>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
69175>>>>>>>                End
69175>>>>>>>>
69175>>>>>>>                Get DestroyKey hKey to bOk
69176>>>>>>>            End
69176>>>>>>>>
69176>>>>>>>            Get ReleaseContext hProv to bOk
69177>>>>>>>        End
69177>>>>>>>>
69177>>>>>>>        Function_Return ucData
69178>>>>>>>    End_Function
69179>>>>>>>    
69179>>>>>>>    // Decrypts using block cipher
69179>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
69181>>>>>>>        Handle hProv hKey
69181>>>>>>>        Integer iLen
69181>>>>>>>        Boolean bOk
69181>>>>>>>        
69181>>>>>>>        Get AcquireContext to hProv
69182>>>>>>>        If (hProv) Begin
69184>>>>>>>            // Create key
69184>>>>>>>            Get CreateKey hProv to hKey
69185>>>>>>>            If (hKey) Begin
69187>>>>>>>                Get SetKeyParameters hKey to bOk
69188>>>>>>>                If (bOk) Begin
69190>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
69191>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
69192>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
69193>>>>>>>                End
69193>>>>>>>>
69193>>>>>>>                Get DestroyKey hKey to bOk
69194>>>>>>>            End
69194>>>>>>>>
69194>>>>>>>            Get ReleaseContext hProv to bOk
69195>>>>>>>        End
69195>>>>>>>>
69195>>>>>>>        Function_Return ucData
69196>>>>>>>    End_Function
69197>>>>>>>    
69197>>>>>>>    
69197>>>>>>>    //  Generates random data.
69197>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
69199>>>>>>>        Handle hProv
69199>>>>>>>        UChar[] uaResult
69200>>>>>>>        Boolean bRes
69200>>>>>>>        
69200>>>>>>>        Get AcquireContext to hProv
69201>>>>>>>        
69201>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
69202>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
69203>>>>>>>        
69203>>>>>>>        Get ReleaseContext hProv to bRes
69204>>>>>>>        
69204>>>>>>>        Function_Return uaResult
69205>>>>>>>    End_Function
69206>>>>>>>    
69206>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
69206>>>>>>>    Function GenerateRandomString Integer iLength Returns String
69208>>>>>>>        String sResult
69208>>>>>>>        UChar[] ucData
69209>>>>>>>        Pointer pBase64
69209>>>>>>>        Integer iVoid
69209>>>>>>>        
69209>>>>>>>        Get GenerateRandom iLength to ucData
69210>>>>>>>        
69210>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
69211>>>>>>>        Move (PointerToString(pBase64)) to sResult
69212>>>>>>>        Move (Free(pBase64)) to iVoid
69213>>>>>>>        
69213>>>>>>>        Function_Return (Left(sResult, iLength))
69214>>>>>>>    End_Function
69215>>>>>>>    
69215>>>>>>>End_Class
69216>>>>>
69216>>>>>Class cLoginEncryption is a cObject
69217>>>>>    
69217>>>>>    Procedure Construct_Object
69219>>>>>        Forward Send Construct_Object
69221>>>>>        // this must be set to a multi (40ish) character random key
69221>>>>>        Property String psEncryptPassword ""
69222>>>>>        
69222>>>>>        Object oDataCrypter is a cCryptographerEx
69224>>>>>            Set piHash to CALG_SHA_256
69225>>>>>            Set piCipher to CALG_AES_256
69226>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
69227>>>>>            Set piProvider to PROV_RSA_AES
69228>>>>>        End_Object
69229>>>>>    End_Procedure
69230>>>>>    
69230>>>>>    // This can be augmented to return a password encryption key using any
69230>>>>>    // hidden mechanism desired.
69230>>>>>    Function GetEncryptionPassword Returns String
69232>>>>>        String sPassword
69232>>>>>        Get psEncryptPassword to sPassword
69233>>>>>        Function_Return sPassword
69234>>>>>    End_Function
69235>>>>>    
69235>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
69235>>>>>    //
69235>>>>>    // Params:
69235>>>>>    //   sPlainText     String to encrypt.
69235>>>>>    // Returns:
69235>>>>>    //   Base64 encoded hash.
69235>>>>>    Function EncryptPassword String sPlainText Returns String
69237>>>>>        String sEncryptPassword sBase64
69237>>>>>        UChar[] ucBinary
69238>>>>>        Pointer pBase64
69238>>>>>        Integer iVoid
69238>>>>>        
69238>>>>>        //  Encrypt Key
69238>>>>>        Get GetEncryptionPassword to sEncryptPassword
69239>>>>>        If (sEncryptPassword = "") Begin
69241>>>>>            Error DFERR_PROGRAM "No encryption password set"
69242>>>>>>
69242>>>>>        End
69242>>>>>>
69242>>>>>        
69242>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
69243>>>>>        
69243>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
69245>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
69246>>>>>>
69246>>>>>            Function_Return ""
69247>>>>>        End
69247>>>>>>
69247>>>>>        
69247>>>>>        //  Encode binary hash to Base64
69247>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
69248>>>>>        Move (PointerToString(pBase64)) to sBase64
69249>>>>>        Move (Free(pBase64)) to iVoid
69250>>>>>        
69250>>>>>        Function_Return sBase64
69251>>>>>    End_Function
69252>>>>>    
69252>>>>>    
69252>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
69252>>>>>    //
69252>>>>>    // Params:
69252>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
69252>>>>>    // Returns:
69252>>>>>    //   Readable plain text password
69252>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
69254>>>>>        String sEncryptPassword
69254>>>>>        UChar[] ucBinary ucPlain
69256>>>>>        Boolean bIsHex
69256>>>>>        Integer iLen iVoid
69256>>>>>        Pointer pBinary
69256>>>>>        
69256>>>>>        If (sBase64EncryptedPassword <> "") Begin
69258>>>>>            //  Decode from Base64
69258>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
69259>>>>>            
69259>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
69260>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
69261>>>>>                        
69261>>>>>            Move (Free(pBinary)) to iVoid
69262>>>>>            
69262>>>>>            //  Encrypted binary hash to string
69262>>>>>            Get GetEncryptionPassword to sEncryptPassword
69263>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
69264>>>>>        End
69264>>>>>>
69264>>>>>        
69264>>>>>        Function_Return (UCharArrayToString(ucPlain))
69265>>>>>    End_Function
69266>>>>>End_Class
69267>>>
69267>>>Object oLoginEncryption is a cLoginEncryption
69269>>>
69269>>>    // this must be created in your appsrc directory and must contain an encryption
69269>>>    // key that is set to psEncryptPassword. It will look something like this
69269>>>    //
69269>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
69269>>>    //  
Including file: LoginEncryptionKey.inc    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\LoginEncryptionKey.inc)
69269>>>>// Studio generated login encryption key
69269>>>>Set psEncryptPassword to "3dv{g#~d=DOf~}.pmM:e4lijC*_C`x>$@[,(v<cu"
69270>>>>
69270>>>    
69270>>>    // use this to register this object to your cConnection Object. This object
69270>>>    // must be created after the cConnection object
69270>>>    Move Self to ghoLoginEncryption
69271>>>End_Object
69272>        Use DatabaseLoginDialog.dg
Including file: DatabaseLoginDialog.dg    (C:\Program Files\DataFlex 20.0\Pkg\DatabaseLoginDialog.dg)
69272>>>
69272>>>Use Windows.pkg
69272>>>Use cConnection.pkg
69272>>>Use dfLine.pkg
69272>>>
69272>>>Object oDatabaseLoginDialog is a ModalPanel
69274>>>    Set Label to "Database Login"
69275>>>    Set Location to 2 2
69276>>>    Set Size to 110 211
69277>>>    
69277>>>    Property String psId
69279>>>    Property Boolean pbOk False
69281>>>    Property Boolean pbChanged False
69283>>>    Property Boolean pbAllowRemember True
69285>>>    
69285>>>    // this registers this object with the cConnection object.
69285>>>    Move Self to ghoLoginConnectDialog
69286>>>    
69286>>>    Object oUserIDForm is a Form
69288>>>        Set Label to "User Name"
69289>>>        Set Size to 12 85
69290>>>        Set Location to 34 79
69291>>>        Set Label_Col_Offset to 64
69292>>>        Set peAnchors to anTopLeftRight
69293>>>    End_Object
69294>>>    
69294>>>    Object oPwdForm is a Form
69296>>>        Set Size to 12 85
69297>>>        Set Location to 49 79
69298>>>        Set Label_Col_Offset to 64
69299>>>        Set Password_State to True
69300>>>        Set peAnchors to anTopLeftRight
69301>>>        Set Label to "Password"
69302>>>    End_Object
69303>>>    
69303>>>    Object oTrustedConnection is a CheckBox
69305>>>        Set Size to 10 50
69306>>>        Set Location to 65 79
69307>>>        Set Label to "Trusted Connection"
69308>>>    End_Object
69309>>>    
69309>>>    Object oRemember is a CheckBox
69311>>>        Set Size to 10 50
69312>>>        Set Location to 79 14
69313>>>        Set Label to "Remember and don't ask again"
69314>>>        Set Checked_State to True
69315>>>    End_Object
69316>>>    
69316>>>    Object oLogin_btn is a Button
69318>>>        Set Label to "&Login"
69319>>>        Set Location to 92 102
69320>>>        Set peAnchors to anBottomRight
69321>>>        Set Default_State to True
69322>>>        
69322>>>        Procedure OnClick
69325>>>            Boolean bTrust
69325>>>            String sUser sPwd sConn sErr sId
69325>>>            Integer iError
69325>>>            Get psId to sId
69326>>>            Get Value of oUserIDForm to sUser
69327>>>            Get Value of oPwdForm to sPwd
69328>>>            Get Checked_State of oTrustedConnection to bTrust
69329>>>            
69329>>>            Get LoginConnectIdNewCredentials of ghoConnection sId sUser sPwd bTrust to iError
69330>>>            If (iError=0) Begin
69332>>>                Set pbOk to True
69333>>>                Set pbChanged to True
69334>>>                Send Close_Panel
69335>>>            End
69335>>>>
69335>>>            Else Begin
69336>>>                Get psErrorText of ghoConnection to sErr
69337>>>                Send UserError sErr "Login Error"
69338>>>            End
69338>>>>
69338>>>        End_Procedure
69339>>>    End_Object
69340>>>    
69340>>>    Object oCancel_btn is a Button
69342>>>        Set Label to "&Cancel"
69343>>>        Set Location to 92 157
69344>>>        Set peAnchors to anBottomRight
69345>>>        
69345>>>        Procedure OnClick
69348>>>            Send Close_Panel
69349>>>        End_Procedure
69350>>>    End_Object
69351>>>    
69351>>>    Object oConnectionIdInfo is a TextBox
69353>>>        Set Size to 10 50
69354>>>        Set Location to 4 14
69355>>>        Set Label to 'Connection Id='
69356>>>    End_Object
69357>>>    
69357>>>    Object oConnectionServerInfo is a TextBox
69359>>>        Set Size to 10 50
69360>>>        Set Location to 16 14
69361>>>        Set Label to 'Server'
69362>>>    End_Object
69363>>>    
69363>>>    Object oLineControl1 is a LineControl
69365>>>        Set Size to 2 202
69366>>>        Set Location to 29 5
69367>>>    End_Object
69368>>>    
69368>>>    Function LoginConnectIdDialog String sId Returns Boolean
69371>>>        Boolean bOk bChanged bTrusted bAllowRemember bRemember
69371>>>        String sUser sPwd sDescription
69371>>>        tConnection Connect
69371>>>        tConnection Connect
69371>>>        
69371>>>        Get pbAllowRemember to bAllowRemember
69372>>>        
69372>>>        
69372>>>        If not bAllowRemember Begin
69374>>>            Set Enabled_State of oRemember to bRemember
69375>>>            Set Visible_State of oRemember to bRemember
69376>>>        End
69376>>>>
69376>>>        
69376>>>        Get ConnectionIdInfo of ghoConnection sId to Connect
69377>>>        Set Value of oConnectionIdInfo to ("Connection ID="+Connect.sId)
69378>>>        Set Value of oConnectionServerInfo to Connect.sString
69379>>>        
69379>>>        Set psId to sId
69380>>>        Set pbOk to False
69381>>>        Set pbChanged to False
69382>>>        Set Value of oUserIDForm to Connect.sUID
69383>>>        Set Value of oPwdForm to ""
69384>>>        
69384>>>        Send Popup
69385>>>        
69385>>>        Get pbOk to bOk
69386>>>        Get pbChanged to bChanged
69387>>>        If (bChanged and bOk) Begin
69389>>>            If bAllowRemember Begin
69391>>>                Get Checked_State of oRemember to bRemember
69392>>>                If bRemember Begin
69394>>>                    Get Checked_State of oTrustedConnection to bTrusted
69395>>>                    If not (bTrusted) Begin
69397>>>                        Get Value of oUserIDForm to sUser
69398>>>                        Get Value of oPwdForm to sPwd
69399>>>                    End
69399>>>>
69399>>>                    Get StoreConnectionIdCredentials of ghoConnection sId sUser sPwd bTrusted to bOk
69400>>>                End
69400>>>>
69400>>>            End
69400>>>>
69400>>>        End
69400>>>>
69400>>>        Function_Return bOk
69401>>>    End_Function
69402>>>    
69402>>>    
69402>>>    On_Key Key_Alt+Key_O Send KeyAction of oLogin_btn
69403>>>    On_Key Key_Alt+Key_L Send KeyAction of oCancel_btn
69404>>>End_Object
69405>>>
69405>    End_Object
69406>
69406>End_Object
69407>
69407>Object oToolTipController is a cToolTipController
69409>    Move Self to ghoToolTipController
69410>End_Object
69411>
69411>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 20.0\Pkg\oEditContextMenu.pkg)
69411>>>Use cCJStandardMenuItemClasses.pkg
69411>>>
69411>>>Object oEditContextMenu is a cCJContextMenu
69413>>>    
69413>>>    Move Self to Default_Form_Floating_Menu_ID
69414>>>    
69414>>>    Object oUndoMenuItem is a cCJUndoMenuItem
69416>>>    End_Object
69417>>>    
69417>>>    Object oCutMenuItem is a cCJCutMenuItem
69419>>>        Set pbControlBeginGroup to True
69420>>>    End_Object
69421>>>    
69421>>>    Object oCopyMenuItem is a cCJCopyMenuItem
69423>>>    End_Object
69424>>>
69424>>>    Object oPasteMenuItem is a cCJPasteMenuItem
69426>>>    End_Object
69427>>>
69427>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
69429>>>    End_Object
69430>>>
69430>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
69432>>>        Set pbControlBeginGroup to True
69433>>>    End_Object
69434>>>
69434>>>End_Object
69435>>>
69435>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\DataFlex 20.0\Pkg\oDEOEditContextMenu17.pkg)
69435>>>Use Windows.pkg
69435>>>Use cCJStandardMenuItemClasses.pkg
69435>>>Use cCJDeoMenuItemClasses.pkg
69435>>>
69435>>>
69435>>>Object oDEOEditContextMenu17 is a cCJContextMenu
69437>>>    
69437>>>    Move Self to Default_dbFloating_Menu_ID
69438>>>    
69438>>>    Object oUndoMenuItem is a cCJUndoMenuItem
69440>>>    End_Object
69441>>>    
69441>>>    Object oCutMenuItem is a cCJCutMenuItem
69443>>>        Set pbControlBeginGroup to True
69444>>>    End_Object
69445>>>    
69445>>>    Object oCopyMenuItem is a cCJCopyMenuItem
69447>>>    End_Object
69448>>>
69448>>>    Object oPasteMenuItem is a cCJPasteMenuItem
69450>>>    End_Object
69451>>>
69451>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
69453>>>    End_Object
69454>>>
69454>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
69456>>>        Set pbControlBeginGroup to True
69457>>>    End_Object
69458>>>
69458>>>    Object oPromptMenuItem is a cCJPromptMenuItem
69460>>>        Set pbControlBeginGroup to True
69461>>>    End_Object
69462>>>
69462>>>    Object oFindNextMenu is a cCJFindNextMenuItem
69464>>>        Set pbControlBeginGroup to True
69465>>>    End_Object
69466>>>
69466>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
69468>>>    End_Object
69469>>>
69469>>>    Object oClearMenuItem is a cCJClearMenuItem
69471>>>        Set pbControlBeginGroup to True
69472>>>    End_Object
69473>>>
69473>>>    Object oClearAllMenu is a cCJClearAllMenuItem
69475>>>    End_Object
69476>>>
69476>>>    Object oSaveMenu is a cCJSaveMenuItem
69478>>>    End_Object
69479>>>    
69479>>>    Object oDeleteMenu is a cCJDeleteMenuItem
69481>>>    End_Object
69482>>>
69482>>>    Object oRememberitem is a cCJRememberFieldMenuItem
69484>>>        Set pbControlBeginGroup to True
69485>>>    End_Object
69486>>>
69486>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
69488>>>    End_Object
69489>>>
69489>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
69491>>>    End_Object
69492>>>
69492>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
69494>>>    End_Object
69495>>>
69495>>>End_Object
69496>
69496>Object oMain is a Panel
69498>    Set Label To "My Project"
69499>    Set Location to 0 -1
69500>    Set Size to 300 450
69501>
69501>    Object oCommandBarSystem is a cCJCommandBarSystem
69503>        Set pbTimerUpdate to True
69504>        Set peVisualTheme to xtpThemeOffice2013Outlook
69505>        Set pbAutoResizeIcons to True
69506>
69506>        Procedure OnCreateCommandBars
69509>            Handle hoOptions
69509>            Get OptionsObject to hoOptions
69510>            Forward Send OnCreateCommandBars
69512>        End_Procedure
69513>
69513>        Object oMenuBar is a cCJMenuBar
69515>
69515>            Object oFileMenu is a cCJMenuItem
69517>                Set peControlType to xtpControlPopup          
69518>                Set psCaption   to "&File"
69519>                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
69520>                Set psCategory to "Menus"
69521>
69521>                Object oClearMenuItem is a cCJClearMenuItem
69523>                    Set pbAddToDesignerMenu to True
69524>                End_Object
69525>
69525>                Object oClearAllMenu is a cCJClearAllMenuItem
69527>                    Set pbAddToDesignerMenu to True
69528>                End_Object
69529>
69529>                Object oPromptMenuItem is a cCJPromptMenuItem
69531>                    Set pbAddToDesignerMenu to True
69532>                    Set pbControlBeginGroup to True
69533>                End_Object
69534>
69534>                Object oFindMenuItem is a cCJFindMenuItem
69536>                    Set pbAddToDesignerMenu to True
69537>                    Set pbControlBeginGroup to True
69538>                End_Object
69539>
69539>                Object oFindNextMenu is a cCJFindNextMenuItem
69541>                    Set pbAddToDesignerMenu to True
69542>                End_Object
69543>
69543>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
69545>                    Set pbAddToDesignerMenu to True
69546>                End_Object
69547>
69547>                Object oFindFirstMenu is a cCJFindFirstMenuItem
69549>                    Set pbAddToDesignerMenu to True
69550>                End_Object
69551>
69551>                Object oFindLastMenu is a cCJFindLastMenuItem
69553>                    Set pbAddToDesignerMenu to True
69554>                End_Object
69555>
69555>                Object oSaveMenuItem is a cCJSaveMenuItem
69557>                    Set pbAddToDesignerMenu to True
69558>                    Set pbControlBeginGroup to True
69559>                End_Object
69560>
69560>                Object oDeleteMenuItem is a cCJDeleteMenuItem
69562>                    Set pbAddToDesignerMenu to True
69563>                End_Object
69564>
69564>                Object oExitMenu is a cCJExitMenuItem
69566>                    Set pbControlBeginGroup to True
69567>                End_Object
69568>
69568>            End_Object
69569>
69569>            Object oViewMenu is a cCJMenuItem
69571>                Set peControlType to xtpControlPopup
69572>                Set psCaption to "&View"
69573>                Set psToolTip to "View"
69574>                Set psDescription to "Available Views"
69575>
69575>                Object oConsultaDiretorioMenuItem is a cCJMenuItem
69577>                    Set psCaption to "ConsultaDiretorio"
69578>                    Set psTooltip to "ConsultaDiretorio"
69579>                
69579>                    Procedure OnExecute Variant vCommandBarControl
69582>                        Handle hoClient
69582>                        Get Client_Id to hoClient
69583>                        Send Activate_oConsultaDiretorio of hoClient
69584>                    End_Procedure
69585>                End_Object
69586>
69586>                Object oConteudoDiretorioMenuItem is a cCJMenuItem
69588>                    Set psCaption to "ConteudoDiretorio"
69589>                    Set psTooltip to "ConteudoDiretorio"
69590>                
69590>                    Procedure OnExecute Variant vCommandBarControl
69593>                        Handle hoClient
69593>                        Get Client_Id to hoClient
69594>                        Send Activate_oConteudoDiretorio of hoClient
69595>                    End_Procedure
69596>                End_Object
69597>
69597>                Object oTestFunctionMenuItem is a cCJMenuItem
69599>                    Set psCaption to "TestFunction"
69600>                    Set psTooltip to "TestFunction"
69601>                
69601>                    Procedure OnExecute Variant vCommandBarControl
69604>                        Handle hoClient
69604>                        Get Client_Id to hoClient
69605>                        Send Activate_oTestFunction of hoClient
69606>                    End_Procedure
69607>                End_Object
69608>            End_Object
69609>            
69609>            Object oReportMenu is a cCJMenuItem
69611>                Set peControlType to xtpControlPopup          
69612>                Set psCaption to "&Report"
69613>                Set psToolTip to "Report"
69614>                Set psDescription to "Available Reports"
69615>            End_Object
69616>
69616>            Object oNavigateMenu is a cCJMenuItem
69618>                Set peControlType to xtpControlPopup      
69619>                Set psCaption to "&Navigate"    
69620>                Set psTooltip to "Navigate"    
69621>                Set psDescription to "Move to different areas of the application"
69622>
69622>                Object oNextAreaMenu is a cCJNextAreaMenu
69624>                End_Object
69625>
69625>                Object oPriorAreaMenu is a cCJPriorAreaMenu
69627>                End_Object
69628>
69628>                Object oNextViewMenu is a cCJNextViewMenu
69630>                End_Object
69631>
69631>                Object oPriorViewMenu is a cCJPriorViewMenu
69633>                End_Object
69634>
69634>                Object oPromptMenu is a cCJPromptMenuItem
69636>                    Set pbControlBeginGroup to True
69637>                End_Object
69638>
69638>                Object oZoomMenu is a cCJZoomMenuItem
69640>                End_Object
69641>
69641>            End_Object
69642>
69642>            Object oWindowMenu is a cCJMDIWindowsMenuItem
69644>                Set peControlType to xtpControlPopup
69645>                Set psCaption to "&Window"
69646>                Set psToolTip to "Window"
69647>                Set psDescription to "Display Current Views and set other display options."    
69648>
69648>                // These are the static windows items. More will be created in onInitPopup 
69648>                Object oDisplayOptionsMenu is a cCJMenuItem
69650>                    Set peControlType to xtpControlPopup          
69651>                    Set psCaption to "&Display Options"
69652>                    Set psToolTip to "Display Options"
69653>                    Set psDescription to "Set display options"
69654>
69654>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
69656>                    End_Object
69657>
69657>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
69659>                    End_Object
69660>
69660>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
69662>                        Set pbControlBeginGroup to True
69663>                    End_Object
69664>
69664>                End_Object
69665>
69665>                Object oCascadeMenu is a cCJCascadeMenuItem
69667>                    Set pbControlBeginGroup to True
69668>                End_Object
69669>
69669>                Object oHorizTile is a cCJTileHorizontally
69671>                End_Object
69672>
69672>                Object oVertTile is a cCJTileVertically
69674>                End_Object
69675>
69675>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
69677>                    Set pbControlBeginGroup to True
69678>                End_Object
69679>
69679>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
69681>                End_Object
69682>
69682>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
69684>                    Set pbControlBeginGroup to True
69685>                End_Object
69686>
69686>            End_Object
69687>
69687>            Object oHelpMenu is a cCJMenuItem
69689>                Set peControlType to xtpControlPopup    
69690>                Set psCaption to "&Help"
69691>                Set psDescription to "Access Information for learning and using this DataFlex application."
69692>                Set psToolTip to "Help"
69693>
69693>                Object oHelpMenuItem is a cCJHelpMenuItem 
69695>                End_Object
69696>
69696>                Object oAboutMenuItem is a cCJAboutMenuItem
69698>                End_Object
69699>
69699>            End_Object
69700>
69700>        End_Object
69701>
69701>        Object oFindToolBar is a cCJToolbar
69703>            Set psTitle to "Finding Toolbar"
69704>
69704>            Object oFindFirstTool is a cCJFindFirstMenuItem
69706>            End_Object
69707>
69707>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
69709>            End_Object
69710>
69710>            Object oFindMenuTool is a cCJFindMenuItem
69712>            End_Object
69713>
69713>            Object oFindNextTool is a cCJFindNextMenuItem
69715>            End_Object
69716>
69716>            Object oFindLastTool is a cCJFindLastMenuItem
69718>            End_Object
69719>
69719>            Object oPromptToolItem is a cCJPromptMenuItem
69721>                Set pbControlBeginGroup to True
69722>            End_Object
69723>
69723>        End_Object
69724>
69724>        Object oFileToolBar is a cCJToolbar
69726>            Set psTitle to "Data Entry Toolbar"
69727>
69727>            Object oClearToolItem is a cCJClearMenuItem
69729>                Set peControlStyle to xtpButtonIconAndCaption
69730>            End_Object
69731>
69731>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
69733>                Set peControlStyle to xtpButtonIconAndCaption
69734>            End_Object
69735>
69735>            Object oSaveToolItem is a cCJSaveMenuItem
69737>                Set peControlStyle to xtpButtonIconAndCaption
69738>                Set pbControlBeginGroup to True
69739>            End_Object
69740>
69740>            Object oDeleteToolItem is a cCJDeleteMenuItem
69742>                Set peControlStyle to xtpButtonIconAndCaption
69743>            End_Object
69744>
69744>        End_Object
69745>
69745>        Object oEditToolBar is a cCJToolbar
69747>            Set psTitle to "Edit Toolbar"
69748>
69748>            Object oCutToolbarItem is a cCJCutMenuItem
69750>            End_Object
69751>
69751>            Object oCopyToolbarItem is a cCJCopyMenuItem
69753>            End_Object
69754>
69754>            Object oPasteToolbarItem is a cCJPasteMenuItem
69756>            End_Object
69757>
69757>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
69759>                Set pbControlBeginGroup to True
69760>            End_Object
69761>
69761>        End_Object
69762>
69762>        Object oRememberToolbar is a cCJToolbar
69764>            Set psTitle to C_$Remember
69765>
69765>            Object oRememberItems is a cCJMenuItem
69767>
69767>                Set peControlType to xtpControlPopup
69768>                Set peControlStyle to xtpButtonCaption
69769>                Set psCaption to C_$Remember
69770>                
69770>                Object oMenuItem is a cCJRememberFieldMenuItem
69772>                    Set peControlStyle to xtpButtonIconAndCaption
69773>                End_Object
69774>                
69774>                Object oMenuItem is a cCJRememberLastFieldMenuItem
69776>                    Set peControlStyle to xtpButtonIconAndCaption
69777>                End_Object
69778>                
69778>                Object oMenuItem is a cCJUnRememberFieldMenuItem
69780>                    Set peControlStyle to xtpButtonIconAndCaption
69781>                End_Object
69782>                
69782>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
69784>                    Set peControlStyle to xtpButtonIconAndCaption
69785>                End_Object
69786>
69786>            End_Object
69787>            
69787>        End_Object
69788>        
69788>        Object oStatusBar is a cCJStatusBar
69790>
69790>            Object oStatusPane1 is a cCJStatusBarPane
69792>                Set piID to sbpIDIdlePane
69793>                Set pbStyleStretch to True
69794>            End_Object
69795>
69795>            Object oStatusPane2 is a cCJStatusBarPane
69797>                Set phoViewPane to Self
69798>                Set pbStyleStretch to True
69799>            End_Object
69800>
69800>        End_Object
69801>
69801>    End_Object
69802>
69802>    Object oClientArea is a ClientArea     
69804>        //VAR GLOBAL ConsultaDiretorio/ConteudoDiretorio 
69804>        String sDirOpenExlorer
69804>        String sReadDir
69804>        
69804>        //VAR GLOBAL TestFuction
69804>        String sGPathFind
69804>        String sGPathDestination
69804>        String sGNameDb
69804>        
69804>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\DataFlex 20.0\Pkg\StdAbout.pkg)
69804>>>// This provides a quick and simple way to create an about package for a program.
69804>>>// You need to create a message inside you client area called Activate_About.
69804>>>// Within this message you should send the message DoAbout passing needed
69804>>>// string information.
69804>>>//
69804>>>//       Procedure Activate_About
69804>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
69804>>>//       End_Procedure
69804>>>//    where: sTitle =     Name of application. If none provided, uses caption
69804>>>//                        bar title
69804>>>//           sVersion   = Version Line. If none provided, will be blank
69804>>>//           sCopyRight = Copyright Line. If none provided, will be blank
69804>>>//           sAuthor    = Author name, blank if none provided
69804>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
69804>>>//                        is used.
69804>>>// It is expected that you will place this in your own object package. For
69804>>>// example an order about package may look like this:
69804>>>//
69804>>>//   // OrderAbout.pkg
69804>>>//   Use StdAbout.pkg
69804>>>//   Procedure Activate_About
69804>>>//      String sTitle sCopyright sVersion sAuthor
69804>>>//      Move "My Order Entry System" to sTitle
69804>>>//      Move "Version 2.1" to sVersion
69804>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
69804>>>//      Move "John Smith"  to sAuthor
69804>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
69804>>>//   end_procedure
69804>>>//   // end of file.
69804>>>
69804>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\DataFlex 20.0\Pkg\Dfabout.pkg)
69804>>>>>Use LanguageText.pkg
69804>>>>>Use Windows.pkg
69804>>>>>Use DFbitmap.pkg
69804>>>>>Use GlobalFunctionsProcedures.pkg
69804>>>>>Use cTextEdit.pkg
69804>>>>>Use tWinStructs.pkg
69804>>>>>
69804>>>>>Use cli.pkg
69804>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 20.0\Pkg\DFBTRDRV.PKG)
69804>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
69804>>>>>>>// Notice      : This package contains constants and commands, used to call
69804>>>>>>>//               specific functions in the DFBTRDRV.
69804>>>>>>>Use Ui
69804>>>>>>>//
69804>>>>>>>// Driver Indentification
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>// Driver attributes
69804>>>>>>>//
69804>>>>>>>// Call_Driver functions ID's
69804>>>>>>>//
69804>>>>>>>//
69804>>>>>>>// DFBTRFN_CONVERT_FILE options
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// DFBTRFN_SET_OWNER options
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to create all vars which may be needed
69804>>>>>>>// in other commands.
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to set the owner of a Btrieve file.
69804>>>>>>>// File must have been opened.
69804>>>>>>>// Filenumber needs to be passed.
69804>>>>>>>// To clear set the owner to "".
69804>>>>>>>// Examples:
69804>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
69804>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
69804>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
69804>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
69804>>>>>>>// To clear:
69804>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to parse DFBTR_SET_OWNVER
69804>>>>>>>// options.
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to parse for Callback
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to clear the owner of a Btrieve file.
69804>>>>>>>// File must have been opened.
69804>>>>>>>// Filenumber needs to be passed.
69804>>>>>>>// Examples:
69804>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to add a owner name to the internal list of ownernames
69804>>>>>>>// which will be tries when opening files.
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to remove all owners from the internal list of ownernames
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to set the owner name to be used when opening the DDF files.
69804>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
69804>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
69804>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to change the transaction type.
69804>>>>>>>// Valid types are:
69804>>>>>>>//     DFBTRTT_NONE
69804>>>>>>>//     DFBTRTT_EXCLUSIVE
69804>>>>>>>//     DFBTRTT_CONCURRENT
69804>>>>>>>//
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to get the current transaction type.
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to set explicit_locking
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to get explicit locking
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>//
69804>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
69804>>>>>>>//
69804>>>>>>>
69804>>>>>>>// Purpose: An instance of this class can be used as a broker object to
69804>>>>>>>//          call several Dfbtrdrv releated methods.
69804>>>>>>>
69804>>>>>>>Class cDFBtrDrvHandler is an Array
69805>>>>>>>    
69805>>>>>>>    Procedure Construct_Object Integer iImage
69807>>>>>>>        Forward Send Construct_object iImage
69809>>>>>>>        
69809>>>>>>>        Property String  psDriverID "DFBTRDRV"
69810>>>>>>>    End_Procedure
69811>>>>>>>    
69811>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
69811>>>>>>>    //
69811>>>>>>>    
69811>>>>>>>    Function CKRevision Returns String
69813>>>>>>>        String  sDriverID
69813>>>>>>>        String  sRevision
69813>>>>>>>        String  sVoid
69813>>>>>>>        Integer iRetval
69813>>>>>>>        
69813>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69813>>>>>>>        // This error would otherwise be raised when we have an older
69813>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69813>>>>>>>        Send Ignore_error to Error_object_Id 20491
69814>>>>>>>        Get psDriverID to sDriverID
69815>>>>>>>        Move (Repeat(" ", 255)) to sRevision
69816>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
69821>>>>>>>        Send Trap_Error to Error_object_Id 20491
69822>>>>>>>        If (Trim(sRevision) = "") Begin
69824>>>>>>>            // Unable to get the revision. return all zeroes.
69824>>>>>>>            Move "0.0.0.0" to sRevision
69825>>>>>>>        End
69825>>>>>>>>
69825>>>>>>>        Function_Return sRevision
69826>>>>>>>    End_Function
69827>>>>>>>    
69827>>>>>>>    Function CkUsesUri Returns Integer
69829>>>>>>>        String  sDriverID
69829>>>>>>>        String  sVoid1
69829>>>>>>>        String  sVoid2
69829>>>>>>>        Integer iRetval
69829>>>>>>>        
69829>>>>>>>        Get psDriverID to sDriverID
69830>>>>>>>        
69830>>>>>>>        Move 0 to iRetval
69831>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69831>>>>>>>        // This error would otherwise be raised when we have an older
69831>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
69831>>>>>>>        Send Ignore_error to Error_object_Id 20491
69832>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
69837>>>>>>>        Send Trap_Error to Error_object_Id 20491
69838>>>>>>>        
69838>>>>>>>        Function_Return iRetval
69839>>>>>>>    End_Function
69840>>>>>>>    
69840>>>>>>>    
69840>>>>>>>    
69840>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
69840>>>>>>>    //
69840>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
69840>>>>>>>    //
69840>>>>>>>    
69840>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
69842>>>>>>>        Integer iPartRev
69842>>>>>>>        Integer iCurrentPart
69842>>>>>>>        Integer iSeparatorPos
69842>>>>>>>        
69842>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
69845>>>>>>>        
69845>>>>>>>        Move 0 to iCurrentPart
69846>>>>>>>        Repeat
69846>>>>>>>>
69846>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
69847>>>>>>>            If (iSeparatorPos > 0) Begin
69849>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
69850>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
69851>>>>>>>                Increment iCurrentPart
69852>>>>>>>            End
69852>>>>>>>>
69852>>>>>>>            Else If (sRevision <> "") Begin
69855>>>>>>>                Move sRevision to iPartRev
69856>>>>>>>                Move "" to sRevision
69857>>>>>>>                Increment iCurrentPart
69858>>>>>>>            End
69858>>>>>>>>
69858>>>>>>>            Else ;                Move -1 to iPartRev
69860>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
69862>>>>>>>        
69862>>>>>>>        Function_Return iPartRev
69863>>>>>>>    End_Function
69864>>>>>>>    
69864>>>>>>>    
69864>>>>>>>    
69864>>>>>>>    //
69864>>>>>>>    //  Returns the major revision of the CK
69864>>>>>>>    //
69864>>>>>>>    
69864>>>>>>>    Function CKMajorRevision Returns Integer
69866>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
69867>>>>>>>    End_Function
69868>>>>>>>    
69868>>>>>>>    
69868>>>>>>>    
69868>>>>>>>    //  Returns the minor revision of the CK
69868>>>>>>>    //
69868>>>>>>>    
69868>>>>>>>    Function CKMinorRevision Returns Integer
69870>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
69871>>>>>>>    End_Function
69872>>>>>>>    
69872>>>>>>>    
69872>>>>>>>    //  Returns the release revision of the CK
69872>>>>>>>    //
69872>>>>>>>    
69872>>>>>>>    Function CKReleaseRevision Returns Integer
69874>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
69875>>>>>>>    End_Function
69876>>>>>>>    
69876>>>>>>>    
69876>>>>>>>    //  Returns the major revision of the CK
69876>>>>>>>    //
69876>>>>>>>    
69876>>>>>>>    Function CKBuildRevision Returns Integer
69878>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
69879>>>>>>>    End_Function
69880>>>>>>>    
69880>>>>>>>    
69880>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
69880>>>>>>>    //
69880>>>>>>>    
69880>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
69882>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
69885>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
69888>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
69891>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
69894>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
69897>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
69901>>>>>>>            End
69901>>>>>>>>
69901>>>>>>>        End
69901>>>>>>>>
69901>>>>>>>        
69901>>>>>>>        Function_Return (False)
69902>>>>>>>    End_Function
69903>>>>>>>    
69903>>>>>>>    //   Functions to query the Pervasive.SQL version:
69903>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
69903>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
69903>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
69903>>>>>>>    //
69903>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
69903>>>>>>>    //   in the following format:
69903>>>>>>>    //       <version>.<revision>.<type>
69903>>>>>>>    //   possible values for <type>:
69903>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
69903>>>>>>>    //         server using Workgroup authentication mode
69903>>>>>>>    //       C for client cache engine
69903>>>>>>>    //       D for DOS workstation
69903>>>>>>>    //       N for client Requester
69903>>>>>>>    //       S for NetWare server
69903>>>>>>>    //       T for 32-bit Windows server engine
69903>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
69903>>>>>>>    //
69903>>>>>>>    //   example:
69903>>>>>>>    //       8.50.T
69903>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
69903>>>>>>>    //   32-bits Windows server.
69903>>>>>>>    //
69903>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
69903>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
69903>>>>>>>    //
69903>>>>>>>    //   If the version information is not available or can not be obtained
69903>>>>>>>    //   the functions will return "0.0.0"
69903>>>>>>>    
69903>>>>>>>    //  Returns the version information of the
69903>>>>>>>    //           Pervasive.SQL Client requester.
69903>>>>>>>    
69903>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
69905>>>>>>>        
69905>>>>>>>        String  sDriverID
69905>>>>>>>        String  sVersion
69905>>>>>>>        String  sVoid
69905>>>>>>>        Integer iRetval
69905>>>>>>>        
69905>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69905>>>>>>>        // This error would otherwise be raised when we have an older
69905>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69905>>>>>>>        Send Ignore_error to Error_object_Id 20491
69906>>>>>>>        Get psDriverID to sDriverID
69907>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69908>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69913>>>>>>>        Send Trap_Error to Error_object_Id 20491
69914>>>>>>>        If (Trim(sVersion) = "") Begin
69916>>>>>>>            // Unable to get the revision. return all zeroes.
69916>>>>>>>            Move "0.0.0" to sVersion
69917>>>>>>>        End
69917>>>>>>>>
69917>>>>>>>        Function_Return sVersion
69918>>>>>>>    End_Function
69919>>>>>>>    
69919>>>>>>>    //           Pervasive.SQL Engine
69919>>>>>>>    
69919>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
69921>>>>>>>        
69921>>>>>>>        String  sDriverID
69921>>>>>>>        String  sVersion
69921>>>>>>>        String  sVoid
69921>>>>>>>        Integer iRetval
69921>>>>>>>        
69921>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69921>>>>>>>        // This error would otherwise be raised when we have an older
69921>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69921>>>>>>>        Send Ignore_error to Error_object_Id 20491
69922>>>>>>>        Get psDriverID to sDriverID
69923>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69924>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69929>>>>>>>        Send Trap_Error to Error_object_Id 20491
69930>>>>>>>        If (Trim(sVersion) = "") Begin
69932>>>>>>>            // Unable to get the revision. return all zeroes.
69932>>>>>>>            Move "0.0.0" to sVersion
69933>>>>>>>        End
69933>>>>>>>>
69933>>>>>>>        Function_Return sVersion
69934>>>>>>>    End_Function
69935>>>>>>>    
69935>>>>>>>    //  Returns the version information of the
69935>>>>>>>    //           Pervasive.SQL Server Engine
69935>>>>>>>    
69935>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
69937>>>>>>>        
69937>>>>>>>        String  sDriverID
69937>>>>>>>        String  sVersion
69937>>>>>>>        String  sVoid
69937>>>>>>>        Integer iRetval
69937>>>>>>>        
69937>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69937>>>>>>>        // This error would otherwise be raised when we have an older
69937>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69937>>>>>>>        Send Ignore_error to Error_object_Id 20491
69938>>>>>>>        Get psDriverID to sDriverID
69939>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69940>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69945>>>>>>>        Send Trap_Error to Error_object_Id 20491
69946>>>>>>>        If (Trim(sVersion) = "") Begin
69948>>>>>>>            // Unable to get the revision. return all zeroes.
69948>>>>>>>            Move "0.0.0" to sVersion
69949>>>>>>>        End
69949>>>>>>>>
69949>>>>>>>        Function_Return sVersion
69950>>>>>>>    End_Function
69951>>>>>>>    
69951>>>>>>>End_Class
69952>>>>>>>
69952>>>>>>>
69952>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 20.0\Pkg\MSSqldrv.pkg)
69952>>>>>>>//     Package that declares MS SQL driver constants and functions.
69952>>>>>>>//     This package can be used by developers who want to add Data Access
69952>>>>>>>//     MS SQL Client specific code to a DataFlex application.
69952>>>>>>>
69952>>>>>>>Use Cli.pkg
69952>>>>>>>Use SQL.pkg
69952>>>>>>>
69952>>>>>>>//   Driver Indentification
69952>>>>>>>
69952>>>>>>>//   Error number constants
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>// SQL Server spcific types.
69952>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
69952>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
69952>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
69952>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
69952>>>>>>>
69952>>>>>>>// SQL Server spcific types.
69952>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
69952>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
69952>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
69952>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
69952>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
69952>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
69952>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
69952>>>>>>>//
69952>>>>>>>//     Setup a constraint for a file.
69952>>>>>>>
69952>>>>>>>
69952>>>>>>>Class cMSSQLHandler is a cCLIHandler
69953>>>>>>>    
69953>>>>>>>    Procedure Construct_Object
69955>>>>>>>        Forward Send Construct_Object
69957>>>>>>>        
69957>>>>>>>        Set psDriverID to MSSQLDRV_ID
69958>>>>>>>    End_Procedure
69959>>>>>>>    
69959>>>>>>>    
69959>>>>>>>    
69959>>>>>>>    //   Extract the list from the out connect string.
69959>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
69961>>>>>>>        String  sItem
69961>>>>>>>        Integer iStart
69961>>>>>>>        Integer iEnd
69961>>>>>>>        
69961>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
69964>>>>>>>        
69964>>>>>>>        Send Delete_Data to hoStore
69965>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
69966>>>>>>>        While (iStart > 0)
69970>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
69971>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
69974>>>>>>>            Else Begin
69975>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
69976>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
69977>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
69980>>>>>>>                
69980>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
69983>>>>>>>                
69983>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
69986>>>>>>>            End
69986>>>>>>>>
69986>>>>>>>        Loop
69987>>>>>>>>
69987>>>>>>>        
69987>>>>>>>        Function_Return (Item_Count(hoStore))
69988>>>>>>>    End_Procedure
69989>>>>>>>    
69989>>>>>>>    
69989>>>>>>>    
69989>>>>>>>    //   Call the driver's browse connect function
69989>>>>>>>    Function BrowseConnect String sInConnStr Returns String
69991>>>>>>>        String  sDriver
69991>>>>>>>        String  sOutConnStr
69991>>>>>>>        Integer iArg
69991>>>>>>>        Integer iRetval
69991>>>>>>>        
69991>>>>>>>        Get psDriverID to sDriver
69992>>>>>>>        If (sDriver <> "") Begin
69994>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
69995>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
70000>>>>>>>        End
70000>>>>>>>>
70000>>>>>>>        
70000>>>>>>>        Function_Return sOutConnStr
70001>>>>>>>    End_Function// BrowseConnect
70002>>>>>>>    
70002>>>>>>>    
70002>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
70004>>>>>>>        String  sDriver
70004>>>>>>>        String  sOutConnStr
70004>>>>>>>        Integer iArg
70004>>>>>>>        Integer iRetval
70004>>>>>>>        
70004>>>>>>>        Move 1 to iArg // Browses only local
70005>>>>>>>        
70005>>>>>>>        Get psDriverID to sDriver
70006>>>>>>>        If (sDriver <> "") Begin
70008>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
70009>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
70014>>>>>>>        End
70014>>>>>>>>
70014>>>>>>>        
70014>>>>>>>        Function_Return sOutConnStr
70015>>>>>>>    End_Function// BrowseConnect
70016>>>>>>>    
70016>>>>>>>    
70016>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
70018>>>>>>>        
70018>>>>>>>        String  sServerList
70018>>>>>>>        Integer iNumServers
70018>>>>>>>        Integer iDriver
70018>>>>>>>        Integer iClientVersion
70018>>>>>>>        String  sDriver
70018>>>>>>>        
70018>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
70019>>>>>>>        
70019>>>>>>>        If (iDriver) Begin
70021>>>>>>>            
70021>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
70024>>>>>>>            
70024>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
70025>>>>>>>            
70025>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
70026>>>>>>>            If (iNetworkLocal = 0) Begin
70028>>>>>>>                Get BrowseConnect sDriver to sServerList
70029>>>>>>>            End
70029>>>>>>>>
70029>>>>>>>            Else Begin
70030>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
70031>>>>>>>            End
70031>>>>>>>>
70031>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
70032>>>>>>>        End
70032>>>>>>>>
70032>>>>>>>        
70032>>>>>>>        Function_Return iNumServers
70033>>>>>>>        
70033>>>>>>>    End_Function
70034>>>>>>>    
70034>>>>>>>    //   Enumerate the available SQL Server database servers
70034>>>>>>>    //   This function will return all SQL Server instances on the network.
70034>>>>>>>    //   This may take a long time.
70034>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
70034>>>>>>>    Function EnumerateServers Returns Integer
70036>>>>>>>        
70036>>>>>>>        Integer iNumServers
70036>>>>>>>        Integer iNetworkLocal
70036>>>>>>>        
70036>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
70037>>>>>>>        
70037>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
70038>>>>>>>        
70038>>>>>>>        Function_Return iNumServers
70039>>>>>>>        
70039>>>>>>>    End_Function
70040>>>>>>>    
70040>>>>>>>    
70040>>>>>>>    //   Enumerate the available SQL Server database servers
70040>>>>>>>    //   This function will return only return SQL Server instance on the local machine
70040>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
70040>>>>>>>    Function EnumerateServersLocal Returns Integer
70042>>>>>>>        
70042>>>>>>>        Integer iNumServers
70042>>>>>>>        Integer iNetworkLocal
70042>>>>>>>        
70042>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
70043>>>>>>>        
70043>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
70044>>>>>>>        
70044>>>>>>>        Function_Return iNumServers
70045>>>>>>>        
70045>>>>>>>    End_Function
70046>>>>>>>    
70046>>>>>>>    
70046>>>>>>>    
70046>>>>>>>    //   Enumerate database in a given server.
70046>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
70048>>>>>>>        Integer hoSQL
70048>>>>>>>        String  sConnect
70048>>>>>>>        String  sDatabase
70048>>>>>>>        Integer hdbc
70048>>>>>>>        Integer hstmt
70048>>>>>>>        Integer iFetchResult
70048>>>>>>>        
70048>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
70051>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
70054>>>>>>>        
70054>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
70057>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
70059>>>>>>>        
70059>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
70061>>>>>>>            Move Current_Object to hoSQL
70062>>>>>>>        End_Object
70063>>>>>>>        
70063>>>>>>>        If (hoSQL <> 0) Begin
70065>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
70066>>>>>>>            If (hdbc <> 0) Begin
70068>>>>>>>                Get SQLOpen of hdbc to hstmt
70069>>>>>>>                If (hstmt <> 0) Begin
70071>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
70071>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
70071>>>>>>>                    //   approach in case meta data might change, the stored procedure will
70071>>>>>>>                    //   stay the same.
70071>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
70072>>>>>>>                    Send SQLCall to hstmt
70073>>>>>>>                    Repeat
70073>>>>>>>>
70073>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
70074>>>>>>>                        If (iFetchResult <> 0) Begin
70076>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
70077>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
70078>>>>>>>                        End
70078>>>>>>>>
70078>>>>>>>                    Until (iFetchResult = 0)
70080>>>>>>>                    
70080>>>>>>>                    Send SQLClose to hstmt
70081>>>>>>>                End
70081>>>>>>>>
70081>>>>>>>                Send SQLDisconnect to hdbc
70082>>>>>>>            End
70082>>>>>>>>
70082>>>>>>>        End
70082>>>>>>>>
70082>>>>>>>        Send Destroy_Object to hoSQL
70083>>>>>>>        
70083>>>>>>>        Function_Return (Item_Count(Current_Object))
70084>>>>>>>    End_Function
70085>>>>>>>    
70085>>>>>>>    
70085>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
70087>>>>>>>        
70087>>>>>>>        String  sSqlServerClientVersionName
70087>>>>>>>        
70087>>>>>>>        
70087>>>>>>>        Case Begin
70087>>>>>>>            
70087>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
70089>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
70090>>>>>>>                Case Break
70091>>>>>>>                
70091>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
70094>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
70095>>>>>>>                Case Break
70096>>>>>>>            
70096>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
70099>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
70100>>>>>>>                Case Break
70101>>>>>>>            
70101>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
70104>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
70105>>>>>>>                Case Break
70106>>>>>>>            
70106>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
70109>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
70110>>>>>>>                Case Break
70111>>>>>>>            
70111>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
70114>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
70115>>>>>>>                Case Break
70116>>>>>>>            
70116>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
70119>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
70120>>>>>>>                Case Break
70121>>>>>>>            
70121>>>>>>>            Case Else
70121>>>>>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
70122>>>>>>>                
70122>>>>>>>        Case End
70122>>>>>>>        
70122>>>>>>>        
70122>>>>>>>        Function_Return sSqlServerClientVersionName
70123>>>>>>>        
70123>>>>>>>    End_Function
70124>>>>>>>
70124>>>>>>>
70124>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
70126>>>>>>>        
70126>>>>>>>        String  sSqlServerClientDriverName
70126>>>>>>>        
70126>>>>>>>        Case Begin
70126>>>>>>>            
70126>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
70128>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
70129>>>>>>>                Case Break
70130>>>>>>>                
70130>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
70133>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
70134>>>>>>>                Case Break
70135>>>>>>>            
70135>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
70138>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
70139>>>>>>>                Case Break
70140>>>>>>>            
70140>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
70143>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
70144>>>>>>>                Case Break
70145>>>>>>>            
70145>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
70148>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
70149>>>>>>>                Case Break
70150>>>>>>>            
70150>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
70153>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
70154>>>>>>>                Case Break
70155>>>>>>>            
70155>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
70158>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
70159>>>>>>>                Case Break
70160>>>>>>>            
70160>>>>>>>            Case Else
70160>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
70161>>>>>>>                
70161>>>>>>>        Case End
70161>>>>>>>        
70161>>>>>>>        
70161>>>>>>>        Function_Return sSqlServerClientDriverName
70162>>>>>>>        
70162>>>>>>>    End_Function
70163>>>>>>>    
70163>>>>>>>    
70163>>>>>>>End_Class
70164>>>>>>>
70164>>>>>>>
70164>>>>>
70164>>>>>Register_Function phoWorkspace Returns Handle
70164>>>>>Register_Function Help_filename Returns String
70164>>>>>Register_Function GetHelpFile Returns String
70164>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
70164>>>>>
70164>>>>>// Do not call directly, use the wrapper function instead
70164>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
70165>>>>>
70165>>>>>// Wrapper Function WNetGetUser
70165>>>>>Function WNetGetUser Global ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
70167>>>>>    
70167>>>>>    DWord   dwResult     
70167>>>>>    UWide   uwName uwUserName
70167>>>>>    UWide   uwName uwUserName
70167>>>>>        
70167>>>>>    Send StringToWide lpName (&uwName)
70168>>>>>    
70168>>>>>    Send WideSetBuffer lpUser_Name lpLength (&uwUserName)    
70169>>>>>    
70169>>>>>    Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
70170>>>>>    
70170>>>>>    Send WideToString (&uwUserName) lpUser_Name
70171>>>>>    
70171>>>>>    Function_Return dwResult
70172>>>>>End_Function
70173>>>>>
70173>>>>>//    This function reads the current username Of windows and returns that
70173>>>>>//    name or an text unknown user
70173>>>>>Function Network_User_Name for cDesktop Returns String
70175>>>>>    WString wName
70175>>>>>    Integer iRetval iLength
70175>>>>>    
70175>>>>>    Move 0 to iLength
70176>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
70177>>>>>    Move (ZeroString(iLength)) to wName
70178>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
70179>>>>>    
70179>>>>>    If (iRetval = NO_ERROR) Begin
70181>>>>>        Function_Return (CString (wName))
70182>>>>>    End
70182>>>>>>
70182>>>>>    
70182>>>>>    Function_Return "User Unknown"
70183>>>>>End_Function
70184>>>>>
70184>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
70185>>>>>
70185>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
70186>>>>>
70186>>>>>Class SysinfoDisplay is a cTextEdit
70187>>>>>    Procedure Construct_Object
70189>>>>>        Forward Send Construct_Object
70191>>>>>        
70191>>>>>        Set Location to 6 6
70192>>>>>        Set Size to 110 255
70193>>>>>        Set Read_Only_State to True
70194>>>>>        Set pbWrap to False
70195>>>>>    End_Procedure
70196>>>>>    
70196>>>>>    //    This method will show the name Of the current directory in the system
70196>>>>>    //    information box
70196>>>>>    Procedure Show_Current_Directory
70198>>>>>        String sDir
70198>>>>>        
70198>>>>>        Get_Current_Directory to sDir
70199>>>>>        
70199>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
70200>>>>>    End_Procedure
70201>>>>>    
70201>>>>>    Procedure Show_Windows_Directory
70203>>>>>        String sWindir
70203>>>>>        
70203>>>>>        Get_Windows_Directory to sWindir
70204>>>>>        
70204>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
70205>>>>>    End_Procedure
70206>>>>>    
70206>>>>>    Procedure Show_Current_User
70208>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
70209>>>>>    End_Procedure
70210>>>>>    
70210>>>>>    Procedure Show_Number_Format
70212>>>>>        Integer iFormat
70212>>>>>        String sFormatText
70212>>>>>        
70212>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
70215>>>>>        Move (Character (iFormat)) to sFormatText
70216>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
70217>>>>>        
70217>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
70220>>>>>        Move (Character (iFormat)) to sFormatText
70221>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
70222>>>>>    End_Procedure
70223>>>>>    
70223>>>>>    Procedure Show_Filelist_Name
70225>>>>>        String sFilename
70225>>>>>        
70225>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
70228>>>>>        
70228>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
70229>>>>>        Send AppendTextLn ""
70230>>>>>    End_Procedure
70231>>>>>    
70231>>>>>    Procedure Show_Lock_Delay
70233>>>>>        Integer iLockdelay
70233>>>>>        
70233>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
70236>>>>>        
70236>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
70237>>>>>    End_Procedure
70238>>>>>    
70238>>>>>    Procedure Show_Lock_Timeout
70240>>>>>        Integer iLockTimeout
70240>>>>>        
70240>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
70243>>>>>        
70243>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
70244>>>>>    End_Procedure
70245>>>>>    
70245>>>>>    Procedure Show_Screen_Size
70247>>>>>        Integer iYscreensize iXscreensize
70247>>>>>        
70247>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
70248>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
70249>>>>>        
70249>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
70250>>>>>    End_Procedure
70251>>>>>    
70251>>>>>    Procedure Show_Page_Size
70253>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
70254>>>>>    End_Procedure
70255>>>>>    
70255>>>>>    Procedure Show_Date
70257>>>>>        Date dToday
70257>>>>>        
70257>>>>>        Move (CurrentDateTime()) to  dToday
70258>>>>>        
70258>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
70259>>>>>    End_Procedure
70260>>>>>    
70260>>>>>    Procedure Show_Date_Format
70262>>>>>        Integer iDateFormat
70262>>>>>        String sDateFormat
70262>>>>>        
70262>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
70265>>>>>        Case Begin
70265>>>>>            Case (iDateFormat = DF_DATE_USA)
70267>>>>>                Move C_$USA to sDateFormat
70268>>>>>                Case Break
70269>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
70272>>>>>                Move C_$European to sDateFormat
70273>>>>>                Case Break
70274>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
70277>>>>>                Move C_$Military to sDateFormat
70278>>>>>                Case Break
70279>>>>>            Case Else
70279>>>>>                Move C_$UnknownDateType to sDateFormat
70280>>>>>                Case Break
70281>>>>>        Case End
70281>>>>>        
70281>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
70282>>>>>    End_Procedure
70283>>>>>    
70283>>>>>    Procedure Show_Systemresources
70285>>>>>        tWinMemoryStatusEx MemoryStatusInfo
70285>>>>>        tWinMemoryStatusEx MemoryStatusInfo
70285>>>>>        Integer iRetval
70285>>>>>        
70285>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
70286>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
70287>>>>>        If (iRetval = 0) Begin
70289>>>>>            Move (ShowLastError ()) to iRetval
70290>>>>>        End
70290>>>>>>
70290>>>>>        
70290>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
70291>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
70292>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
70293>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
70294>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
70295>>>>>    End_Procedure
70296>>>>>    
70296>>>>>    Procedure Show_Registration
70298>>>>>        String sRegName
70298>>>>>        Integer iSN iMaxUsers
70298>>>>>        
70298>>>>>        Registration sRegName iSN
70299>>>>>>
70299>>>>>        
70299>>>>>        Get_Licensed_Max_Users to iMaxUsers
70300>>>>>        
70300>>>>>        Send AppendTextLn ""
70301>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
70302>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
70303>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
70304>>>>>    End_Procedure
70305>>>>>    
70305>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
70305>>>>>    // To the workspace object passing the an object and message To send back
70305>>>>>    // To this object. It is expected that the workspace object will send this
70305>>>>>    // message for every line Of information it wants displayed (passing the
70305>>>>>    // information To be displayed
70305>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
70305>>>>>    
70305>>>>>    Procedure Show_ServicePack
70307>>>>>        String sKey sVersionDescription sVersion
70307>>>>>        Handle hoRegistry
70307>>>>>        Boolean bExists bOpened
70307>>>>>        
70307>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
70308>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
70309>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
70310>>>>>        
70310>>>>>        Move C_DFVersionRegistryRoot to sKey
70311>>>>>        Get KeyExists of hoRegistry sKey to bExists
70312>>>>>        If (bExists) Begin
70314>>>>>            Get OpenKey of hoRegistry sKey to bOpened
70315>>>>>            If (bOpened) Begin
70317>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
70318>>>>>                If (bExists) Begin
70320>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
70321>>>>>                End
70321>>>>>>
70321>>>>>                
70321>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
70322>>>>>                If (bExists) Begin
70324>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
70325>>>>>                End
70325>>>>>>
70325>>>>>                Send CloseKey of hoRegistry
70326>>>>>            End
70326>>>>>>
70326>>>>>        End
70326>>>>>>
70326>>>>>        Send Destroy of hoRegistry
70327>>>>>        
70327>>>>>        If (sVersionDescription <> "") Begin
70329>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
70330>>>>>            Send AppendTextLn ""
70331>>>>>        End
70331>>>>>>
70331>>>>>    End_Procedure
70332>>>>>    
70332>>>>>    
70332>>>>>    Procedure Show_WorkspaceInformation
70334>>>>>        Integer hoWorkspace
70334>>>>>        
70334>>>>>        If (ghoApplication <> 0) Begin
70336>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
70337>>>>>            If (hoWorkspace <> 0) Begin
70339>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
70340>>>>>                Send AppendTextLn ""
70341>>>>>            End
70341>>>>>>
70341>>>>>        End
70341>>>>>>
70341>>>>>    End_Procedure
70342>>>>>    
70342>>>>>    // If connection ids are used, we will send the message EnumerateConnections
70342>>>>>    // to the connection manager object passing the an object and message to send
70342>>>>>    // back to this object. It is expected that the connection manager object will
70342>>>>>    // send this message for every line Of information it wants displayed (passing
70342>>>>>    // the information To be displayed
70342>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
70342>>>>>    
70342>>>>>    Procedure Show_ConnectionIdInformation
70344>>>>>        If (ghoConnection > 0) Begin
70346>>>>>            Send AppendTextLn ""
70347>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
70348>>>>>        End
70348>>>>>>
70348>>>>>    End_Procedure
70349>>>>>    
70349>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
70351>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
70352>>>>>    End_Function
70353>>>>>    
70353>>>>>    Procedure Show_Versions
70355>>>>>        Integer iVersion iRevision iBuild
70355>>>>>        
70355>>>>>        Version_Information iVersion iRevision iBuild
70357>>>>>        
70357>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
70358>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
70359>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
70360>>>>>    End_Procedure
70361>>>>>    
70361>>>>>    Procedure Show_Platform
70363>>>>>        Send AppendTextLn (SFormat (C_$Platform,"32-bit"))
70364>>>>>    End_Procedure
70365>>>>>    
70365>>>>>    Function CKRevisionNumber String sDriverID Returns String
70367>>>>>        Handle hoCLIHandler
70367>>>>>        Handle hoDFBtrDrvHandler
70367>>>>>        String sCKRevision
70367>>>>>        
70367>>>>>        
70367>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
70369>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
70370>>>>>            Set psDriverID of hoCLIHandler to sDriverID
70371>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
70372>>>>>            Send Destroy of hoCLIHandler
70373>>>>>        End
70373>>>>>>
70373>>>>>        Else Begin
70374>>>>>            If (sDriverID = "DFBTRDRV") Begin
70376>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
70377>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
70378>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
70379>>>>>                Send Destroy of hoDFBtrDrvHandler
70380>>>>>            End
70380>>>>>>
70380>>>>>        End
70380>>>>>>
70380>>>>>        
70380>>>>>        Function_Return sCKRevision
70381>>>>>    End_Function
70382>>>>>    
70382>>>>>    
70382>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
70384>>>>>        
70384>>>>>        If (sDriverID = "DATAFLEX") Begin
70386>>>>>            Function_Return False
70387>>>>>        End
70387>>>>>>
70387>>>>>        
70387>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
70388>>>>>    End_Function
70389>>>>>    
70389>>>>>    
70389>>>>>    Procedure Show_Drivers
70391>>>>>        String sCurrentDriver sRevNumber
70391>>>>>        String sLoadedDrivers sClientDriver
70391>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
70391>>>>>        Boolean bOK
70391>>>>>        Handle hoMsqlDrv
70391>>>>>        
70391>>>>>        Move "" to sLoadedDrivers
70392>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
70395>>>>>        For iCount from 1 to iNumberOfDrivers
70401>>>>>>
70401>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
70404>>>>>            If (sLoadedDrivers <> "") Begin
70406>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
70407>>>>>            End
70407>>>>>>
70407>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
70408>>>>>            If (bOK) Begin
70410>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
70412>>>>>                    Move iCount to iMSSQLIndex
70413>>>>>                End
70413>>>>>>
70413>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
70414>>>>>                // if mssqldrv, show the client number
70414>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
70415>>>>>            End
70415>>>>>>
70415>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
70416>>>>>        Loop
70417>>>>>>
70417>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
70418>>>>>        If (iMSSQLIndex>0) Begin
70420>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
70423>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
70424>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
70425>>>>>            Send Destroy of hoMsqlDrv
70426>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
70427>>>>>        End
70427>>>>>>
70427>>>>>    End_Procedure
70428>>>>>    
70428>>>>>    Procedure Show_HelpFile
70430>>>>>        String sHelpFile
70430>>>>>        Integer eHelpType
70430>>>>>        
70430>>>>>        If (ghoApplication <> 0) Begin
70432>>>>>            Get peHelpType of ghoApplication to eHelpType
70433>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
70435>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
70436>>>>>            End
70436>>>>>>
70436>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
70439>>>>>                Get Help_filename of Help_object_id to sHelpFile
70440>>>>>            End
70440>>>>>>
70440>>>>>            Else Begin
70441>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
70442>>>>>            End
70442>>>>>>
70442>>>>>            
70442>>>>>            Send AppendTextLn ""
70443>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
70444>>>>>        End
70444>>>>>>
70444>>>>>    End_Procedure
70445>>>>>    
70445>>>>>    Procedure Show_EnterAsTab
70447>>>>>        Boolean bEnterKeyAsTabKey
70447>>>>>        String sText
70447>>>>>        
70447>>>>>        If (ghoApplication <> 0) Begin
70449>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
70450>>>>>            If (bEnterKeyAsTabKey) Begin
70452>>>>>                Move "True" to sText
70453>>>>>            End
70453>>>>>>
70453>>>>>            Else Begin
70454>>>>>                Move "False" to sText
70455>>>>>            End
70455>>>>>>
70455>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
70456>>>>>        End
70456>>>>>>
70456>>>>>    End_Procedure
70457>>>>>    
70457>>>>>    //    During activation we will remove the old information and add the newly
70457>>>>>    //    found systeminformation
70457>>>>>    Procedure Add_Focus Integer hoRoot
70459>>>>>        Forward Send Add_Focus hoRoot
70461>>>>>        
70461>>>>>        Send Delete_Data
70462>>>>>        
70462>>>>>        Set Changed_State to False
70463>>>>>        Set Read_Only_State to True
70464>>>>>        
70464>>>>>        Send Show_ServicePack
70465>>>>>        Send Show_Versions
70466>>>>>        Send Show_Platform
70467>>>>>        Send Show_Drivers
70468>>>>>        If (ghoConnection <> 0) Begin
70470>>>>>            Send Show_ConnectionIdInformation
70471>>>>>        End
70471>>>>>>
70471>>>>>        Send Show_HelpFile
70472>>>>>        Send Show_Current_Directory
70473>>>>>        Send Show_Filelist_Name
70474>>>>>        If (ghoApplication <> 0) Begin
70476>>>>>            Send Show_WorkSpaceInformation // added To show WS info
70477>>>>>        End
70477>>>>>>
70477>>>>>        Send Show_Current_User
70478>>>>>        Send Show_Windows_Directory
70479>>>>>        Send Show_Screen_Size
70480>>>>>        Send Show_Page_Size
70481>>>>>        Send Show_EnterAsTab
70482>>>>>        Send Show_Number_Format
70483>>>>>        Send Show_Date_Format
70484>>>>>        Send Show_Lock_Delay
70485>>>>>        Send Show_Lock_Timeout
70486>>>>>        Send Show_Date
70487>>>>>        Send Show_Systemresources
70488>>>>>        Send Show_Registration
70489>>>>>        Send Beginning_of_Data
70490>>>>>        
70490>>>>>        Set Icon to 'default.ico'
70491>>>>>    End_Procedure
70492>>>>>End_Class
70493>>>>>
70493>>>>>Class SysInfoDialog is a ModalPanel
70494>>>>>    Procedure Construct_Object
70496>>>>>        Forward Send Construct_Object
70498>>>>>        
70498>>>>>        Set Label to C_$SystemInformation
70499>>>>>        Set Size to 140 267
70500>>>>>        Set piMinSize to 140 267
70501>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
70502>>>>>        Set Border_Style to Border_Thick
70503>>>>>        
70503>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
70505>>>>>            Set peAnchors to anAll
70506>>>>>        End_Object
70507>>>>>        
70507>>>>>        Object oCloseButton is a Button
70509>>>>>            Set Label to C_$Close
70510>>>>>            Set Location to 120 210
70511>>>>>            Set Message 0 to (Refproc (Close_Panel))
70512>>>>>            Set Default_State to True
70513>>>>>            Set peAnchors to anBottomRight
70514>>>>>        End_Object
70515>>>>>        
70515>>>>>        On_Key kCancel Send Close_Panel
70516>>>>>    End_Procedure
70517>>>>>End_Class
70518>>>>>
70518>>>>>Class AboutDialog is a ModalPanel
70519>>>>>    Procedure Construct_Object
70521>>>>>        String sVdfRootDir
70521>>>>>        
70521>>>>>        Forward Send Construct_Object
70523>>>>>        
70523>>>>>        Set Label to C_$About
70524>>>>>        Set Size to 89 212
70525>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
70526>>>>>        
70526>>>>>        Object oSysInfoDialog is a SysInfoDialog
70528>>>>>        End_Object
70529>>>>>        
70529>>>>>        Object oBox is a Container3d
70531>>>>>            Set Border_Style to Border_StaticEdge
70532>>>>>            Set Size to 63 202
70533>>>>>            Set Location to 4 5
70534>>>>>            
70534>>>>>            Object oAboutGraphic is a BitmapContainer
70536>>>>>                Set Border_Style to Border_None
70537>>>>>                Set Bitmap_Style to Bitmap_Center
70538>>>>>                Set Size to 48 48
70539>>>>>                Set Location to 7 2
70540>>>>>            End_Object
70541>>>>>            
70541>>>>>            Object oProductName is a TextBox
70543>>>>>                Set Label to C_$ProductName
70544>>>>>                Set Size to 10 45
70545>>>>>                Set Location to 8 53
70546>>>>>            End_Object
70547>>>>>            
70547>>>>>            Object oVersion is a TextBox
70549>>>>>                Set Label to C_$Version
70550>>>>>                Set Size to 10 25
70551>>>>>                Set Location to 21 53
70552>>>>>            End_Object
70553>>>>>            
70553>>>>>            Object oCopyright is a TextBox
70555>>>>>                Set Label to C_$Copyright
70556>>>>>                Set Size to 10 31
70557>>>>>                Set Location to 34 53
70558>>>>>            End_Object
70559>>>>>            
70559>>>>>            Object oAuthor is a TextBox
70561>>>>>                Set Label to C_$Author
70562>>>>>                Set Size to 10 22
70563>>>>>                Set Location to 46 53
70564>>>>>            End_Object
70565>>>>>        End_Object
70566>>>>>        
70566>>>>>        Object oOKButton is a Button
70568>>>>>            On_Item C_$OK Send Close_Panel
70569>>>>>            Set Size to 14 50
70570>>>>>            Set Location to 71 157
70571>>>>>        End_Object
70572>>>>>        
70572>>>>>        Object oSysInfoButton is a Button
70574>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
70575>>>>>            Set Size to 14 50
70576>>>>>            Set Location to 71 101
70577>>>>>        End_Object
70578>>>>>        
70578>>>>>        On_Key Kcancel Send KeyAction of oOKButton
70579>>>>>        
70579>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
70580>>>>>    End_Procedure
70581>>>>>    
70581>>>>>    Procedure Set ProductName String sProductName
70583>>>>>        Set Label of oProductName to sProductName
70584>>>>>    End_Procedure
70585>>>>>    
70585>>>>>    Procedure Set Version String sVersion
70587>>>>>        Set Label of oVersion to sVersion
70588>>>>>    End_Procedure
70589>>>>>    
70589>>>>>    Procedure Set Copyright String sCopyright
70591>>>>>        Set Label of oCopyright to sCopyright
70592>>>>>    End_Procedure
70593>>>>>    
70593>>>>>    Procedure Set Author String sAuthor
70595>>>>>        Set Label of oAuthor to sAuthor
70596>>>>>    End_Procedure
70597>>>>>    
70597>>>>>    Procedure Set Logo String sLogo
70599>>>>>        // square bitmaps Of 42x42 work best
70599>>>>>        Set Bitmap of oAboutGraphic to sLogo
70600>>>>>    End_Procedure
70601>>>>>    
70601>>>>>    Procedure Show_Sysinfo
70603>>>>>        Send Popup_Modal of oSysinfoDialog
70604>>>>>    End_Procedure
70605>>>>>    
70605>>>>>    Procedure End_Construct_Object
70607>>>>>        Handle hoVersionInfo
70607>>>>>        Boolean bIncluded
70607>>>>>        Integer iMajor iMinor iRelease iBuild
70607>>>>>        String sLabel
70607>>>>>        
70607>>>>>        Get Label of oVersion to sLabel
70608>>>>>        If (sLabel = C_$VERSION) Begin
70610>>>>>            // set it To the version info Of the program, if available
70610>>>>>            If (ghoApplication <> 0) Begin
70612>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
70613>>>>>                If (hoVersionInfo <> 0) Begin
70615>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
70616>>>>>                    If (bIncluded) Begin
70618>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
70619>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
70620>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
70621>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
70622>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
70623>>>>>                        Set Version to sLabel
70624>>>>>                    End
70624>>>>>>
70624>>>>>                End
70624>>>>>>
70624>>>>>            End
70624>>>>>>
70624>>>>>        End
70624>>>>>>
70624>>>>>        
70624>>>>>        Forward Send End_Construct_Object
70626>>>>>    End_Procedure
70627>>>>>End_Class
70628>>>
70628>>>//  This is the default message. It is expected that you will
70628>>>//  create your own message to override this
70628>>>Procedure Activate_About
70631>>>    Send DoAbout "" "" "" "" ""
70632>>>End_Procedure
70633>>>
70633>>>//  It is expected that you will send this message (most
70633>>>//  likely from Activate_About. This creates an about object, activates it
70633>>>//  and destroys it when done. It is not exepected that you will augment this.
70633>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
70636>>>    Integer hoObj hoMain
70636>>>    
70636>>>    // create object
70636>>>    Object About is an AboutDialog
70638>>>        // if no title passed use the label of the main panel
70638>>>        // (if a main panel exists).
70638>>>        If (sTitle = "") Begin
70640>>>            Get Main_Window of desktop to hoMain
70641>>>            If hoMain ;                Get Label of hoMain to sTitle
70644>>>        End
70644>>>>
70644>>>        Set productname to sTitle
70645>>>        Set version     to sVersion
70646>>>        Set copyright   to sCopyRight
70647>>>        Set author      to sAuthor
70648>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
70651>>>        Move Self to hoObj // object Id
70652>>>    End_Object
70653>>>    Send Popup   of hoObj    // popup the about object
70654>>>    Send Destroy of hoObj // when done, it will be destroyed
70655>>>End_Procedure
70656>>>
70656>        Use ConsultaDiretorio.vw
Including file: ConsultaDiretorio.vw    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\ConsultaDiretorio.vw)
70656>>>Use Windows.pkg
70656>>>Use DFClient.pkg
70656>>>Use DFTabDlg.pkg
70656>>>Use DfAllEnt.pkg
70656>>>Use File_dlg.pkg
70656>>>
70656>>>Activate_View Activate_oConsultaDiretorio for oConsultaDiretorio
70666>>>>
70666>>>Object oConsultaDiretorio is a dbView
70668>>>    Set Label to "Consulta"
70669>>>    Set Size to 73 470
70670>>>    Set Location to -1 4
70671>>>    
70671>>>    Object oOpenExplorer is a Form
70673>>>        Set Size to 14 326
70674>>>        Set Location to 14 68
70675>>>        Set Label to "Caminho arquivo:"
70676>>>
70676>>>        Procedure OnChange
70679>>>            Forward Send OnChange
70681>>>            
70681>>>            Get Value of oOpenExplorer to sDirOpenExlorer
70682>>>        End_Procedure
70683>>>    End_Object
70684>>>        
70684>>>    Object oReadDir is a Form
70686>>>        Set Size to 14 326
70687>>>        Set Location to 44 68
70688>>>        Set Label to "Caminho arquivo:"
70689>>>    
70689>>>        Procedure OnChange           
70692>>>            Forward Send OnChange
70694>>>            
70694>>>            Get Value of oReadDir to sReadDir
70695>>>        End_Procedure
70696>>>    End_Object
70697>>>              
70697>>>    Object oButton1 is a Button
70699>>>        Set Size to 15 56
70700>>>        Set Location to 14 401
70701>>>        Set Label to "Abrir explorer"
70702>>>        
70702>>>        Procedure OnClick
70705>>>            Boolean bFileExists
70705>>>            
70705>>>            File_Exist sDirOpenExlorer bFileExists
70706>>>                                               
70706>>>            If bFileExists Begin
70708>>>                Runprogram Background ('c:\windows\explorer.exe' *  '"' + ((sDirOpenExlorer)) + '"')
70709>>>            End
70709>>>>
70709>>>            Else Begin
70710>>>                
70710>>>            End
70710>>>>
70710>>>        End_Procedure  
70711>>>    End_Object
70712>>>    
70712>>>    Object oButton2 is a Button
70714>>>        Set Size to 14 56
70715>>>        Set Location to 44 401
70716>>>        Set Label to "Ver diretorio"
70717>>>        
70717>>>        Procedure OnClick
70720>>>            Boolean bFileExists
70720>>>            
70720>>>            File_Exist sReadDir bFileExists
70721>>>                                                 
70721>>>            If bFileExists Begin
70723>>>                Send Activate_oConteudoDiretorio 
70724>>>            End
70724>>>>
70724>>>            Else Begin
70725>>>                Send Info_Box "Caminho não encontrado"
70726>>>            End
70726>>>>
70726>>>        End_Procedure   
70727>>>    End_Object
70728>>>End_Object
70729>        Use ConteudoDiretorio.vw
Including file: ConteudoDiretorio.vw    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\ConteudoDiretorio.vw)
70729>>>Use Windows.pkg
70729>>>Use DFClient.pkg
70729>>>Use DFTabDlg.pkg
70729>>>Use DfAllEnt.pkg
70729>>>Use cCJGrid.pkg
70729>>>Use cCJGridColumn.pkg
70729>>>Use cFilesystem.pkg
Including file: cFilesystem.pkg    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\cFileSystem\AppSrc\cFilesystem.pkg)
70729>>>>>//************************************************************************
70729>>>>>//*** FileSystem - Binary file operations For VDF15+.
70729>>>>>//************************************************************************
70729>>>>>//*** Based on original package: akefs.pkg
70729>>>>>//*** Version: 4.0
70729>>>>>//*** (C) NordTeam Gruppen, NOVAX A/S
70729>>>>>//***
70729>>>>>//*** Author......: Allan Kim Eriksen
70729>>>>>//*** Created.....: 23/08 2001
70729>>>>>//***
70729>>>>>//*** Rev History.: 31/08 2018 Nils Svedmyr. Added Functions from Akefs.pkg
70729>>>>>//***               to get/set file date/time and procedure SetFileLastWriteTime.
70729>>>>>//***               Refactored functions FileSize & FileDate to only have one Function_Return,
70729>>>>>//***               and changed a couple of While loops to end with a "loop" word instead of "End".
70729>>>>>//***
70729>>>>>//************************************************************************
70729>>>>>// cFilesystem class with functions and procedures to access binary files.
70729>>>>>// Filenumbers are not limited to 10 but only to system resources.
70729>>>>>// Also windows API calls For file copy, file move ect.
70729>>>>>// This class is For vdf 15 and up.
70729>>>>>// This class is not limited to 2 GB but can handle filesizes up $7FFFFFFFFFFFFFFF (9 exabyte)
70729>>>>>
70729>>>>>//************************************************************************
70729>>>>>// Be aware that argument_size has to be larger
70729>>>>>// than the requested amount of bytes read in the buffer for
70729>>>>>// BytesFromBinaryFile.
70729>>>>>//************************************************************************
70729>>>>>
70729>>>>>//************************************************************************
70729>>>>>// Constants used For the external functions.
70729>>>>>//************************************************************************
70729>>>>>// fsCreatefile.
70729>>>>>    Define GENERIC_READ for            |CI$80000000
70729>>>>>    Define GENERIC_WRITE for           |CI$40000000
70729>>>>>    Define GENERIC_RANDOM for          (GENERIC_READ + GENERIC_WRITE)
70729>>>>>    Define CREATE_NEW for              |CI$00000001
70729>>>>>    Define CREATE_ALWAYS for           |CI$00000002
70729>>>>>    Define OPEN_EXISTING for           |CI$00000003
70729>>>>>    Define OPEN_ALWAYS for             |CI$00000004
70729>>>>>    Define TRUNCATE_EXISTING for       |CI$00000005
70729>>>>>
70729>>>>>
70729>>>>>    Define FILE_SHARE_READ for         |CI$1
70729>>>>>    Define FILE_SHARE_WRITE for        |CI$2
70729>>>>>    Define FILE_SHARE_RANDOM for       (FILE_SHARE_READ + FILE_SHARE_WRITE)
70729>>>>>
70729>>>>>// Generel.
70729>>>>>Define FNULL For                   |CI$0
70729>>>>>
70729>>>>>// FormatString.
70729>>>>>
70729>>>>>// SetFilePosition.
70729>>>>>Define FILE_BEGIN For     0
70729>>>>>Define FILE_CURRENT For  1
70729>>>>>Define FILE_END For      2
70729>>>>>Define INVALID_SET_FILE_POINTER For |CI$FFFFFFFF
70729>>>>>
70729>>>>>// FindFile.
70729>>>>>
70729>>>>>Define ERROR_NO_MORE_FILES    For |CI18
70729>>>>>Define ERROR_MOD_NOT_FOUND    For |CI126
70729>>>>>
70729>>>>>
70729>>>>>
70729>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileFlags.
70729>>>>>
70729>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileOS.
70729>>>>>Define VOS_DOS          For |CI$10000
70729>>>>>Define VOS_NT           For |CI$40000
70729>>>>>Define VOS_WINDOWS16    For |CI$00001
70729>>>>>Define VOS_WINDOWS32    For |CI$00004
70729>>>>>Define VOS_OS216        For |CI$20000
70729>>>>>Define VOS_OS232        For |CI$30000
70729>>>>>Define VOS_PM16         For |CI$00002
70729>>>>>Define VOS_PM32         For |CI$00003
70729>>>>>Define VOS_UNKNOWN      For |CI$00000
70729>>>>>
70729>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileType.
70729>>>>>Define VFT_APP          For |CI$01
70729>>>>>Define VFT_DLL          For |CI$02
70729>>>>>Define VFT_DRV          For |CI$03
70729>>>>>Define VFT_FONT         For |CI$04
70729>>>>>Define VFT_STATIC_LIB   For |CI$07
70729>>>>>Define VFT_UNKNOWN      For |CI$00
70729>>>>>Define VFT_VXD          For |CI$05
70729>>>>>
70729>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileSubtype if tsVS_FIXEDFILEINFO.dwFileType = VFT_DRV.
70729>>>>>Define VFT2_DRV_COMM                For |CI$0A
70729>>>>>Define VFT2_DRV_DISPLAY             For |CI$04
70729>>>>>Define VFT2_DRV_INSTALLABLE         For |CI$08
70729>>>>>Define VFT2_DRV_KEYBOARD            For |CI$02
70729>>>>>Define VFT2_DRV_LANGUAGE            For |CI$03
70729>>>>>Define VFT2_DRV_MOUSE               For |CI$05
70729>>>>>Define VFT2_DRV_NETWORK             For |CI$06
70729>>>>>Define VFT2_DRV_PRINTER             For |CI$01
70729>>>>>Define VFT2_DRV_SOUND               For |CI$09
70729>>>>>Define VFT2_DRV_SYSTEM              For |CI$07
70729>>>>>Define VFT2_DRV_VERSIONED_PRINTER   For |CI$0C
70729>>>>>
70729>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileSubtype if tsVS_FIXEDFILEINFO.dwFileType = VFT_FONT.
70729>>>>>Define VFT2_FONT_RASTER             For |CI$01
70729>>>>>Define VFT2_FONT_TRUETYPE           For |CI$03
70729>>>>>Define VFT2_FONT_VECTOR             For |CI$02
70729>>>>>
70729>>>>>Define VFT2_UNKNOWN                 For |CI$00
70729>>>>>
70729>>>>>Define FS_FILEHANDLEMISSING For "The filehandle does not exists For the current filenumber."
70729>>>>>
70729>>>>>// Filesearch
70729>>>>>Enum_List
70729>>>>>    Define DIRMODE_FILES_ONLY For 1
70729>>>>>    Define DIRMODE_DIRECTORIES_ONLY
70729>>>>>    Define DIRMODE_FILES_AND_DIRECTORIES
70729>>>>>End_Enum_List
70729>>>>>
70729>>>>>//************************************************************************
70729>>>>>// Declarations of external functions.
70729>>>>>// Functions that needs variables For output are made global stings or
70729>>>>>// integers, and can be found on top of the declaration.
70729>>>>>//************************************************************************
70729>>>>>External_Function fsCreatefile "CreateFileW" kernel32.dll ;WString wFile ;       //filenameDWord dwDesAccess ;   // access modeDWord dwShare ;       // share modePointer lpSecAtt ;    // SDDWord dwCrDisp ;      // how to createDWord dwFlags ;       // file attributesHandle hTempFile ;    // handle to template filReturns Integer       //Returns handle that can be used to access the object
70730>>>>>
70730>>>>>External_Function fsGetLastError "GetLastError" kernel32.dll Returns Integer
70731>>>>>
70731>>>>>External_Function fsFormatMessage "FormatMessageW" kernel32.dll ;DWord dwFlags ;         // source and processing optionsPointer lpSrc ;         // message sourceDWord dwMsgId ;         // message identifierDWord dwLngId ;         // language identifierPointer lpBuf ;         // message bufferDWord nSize ;           // maximum size of message bufferPointer Arg ;           // array of message insertsReturns Integer
70732>>>>>
70732>>>>>External_Function fsLocalFree "LocalFree" kernel32.dll ;Handle hMem ;   // A handle to the local memory object.Returns Integer
70733>>>>>
70733>>>>>External_Function fsCloseHandle "CloseHandle" kernel32.dll ;Handle hObject ;        // handle to objectReturns Integer
70734>>>>>
70734>>>>>External_Function fsReadFile "ReadFile" kernel32.dll ;Handle hFile ;          // handle to filePointer lpBuffer ;      // data bufferDWord nBytesToRead ;    // number of bytes to readPointer lpBytesRead ;   // number of bytes readPointer lpOverlapped ;  // overlapped bufferReturns Integer
70735>>>>>
70735>>>>>External_Function fsWriteFile "WriteFile" kernel32.dll ;Handle hFile ;              // handle to filePointer lpBuf ;             // data bufferDWord nNumBytesWrt ;        // number of bytes to writePointer lpNumBytesWritten ; // number of bytes writtenPointer lpOverlapped ;      // overlapped bufferReturns Integer
70736>>>>>
70736>>>>>External_Function fsGetFileSizeEx "GetFileSizeEx" kernel32.dll ;Handle hFile ;           // handle to filePointer lpFileSizeHigh ; // A pointer to a LARGE_INTEGER structure that receives the file size, in bytes.Returns Integer
70737>>>>>
70737>>>>>External_Function fsSetFilePointer "SetFilePointer" kernel32.dll ;Handle hFile ;              // handle to fileUInteger lDistanceToMove ;    // The low order 32-bits of a signed value that specifies the number of bytes to move the file pointer.Pointer lpDistanceToMoveHigh ;  // A pointer to the high order 32-bits of the signed 64-bit distance to move.DWord dwMoveMethod ;        // The starting point For the file pointer move.Returns UInteger
70738>>>>>
70738>>>>>External_Function fsSetEndOfFile "SetEndOfFile" kernel32.dll ;Handle hFile ;              // handle to the file to have its EOF position moved.Returns Integer             // nonzero if success
70739>>>>>
70739>>>>>External_Function fsDeleteFile "DeleteFileW" Kernel32.Dll ;WString wFileName ;             // Pointer to a null-terminated string that specifies the file to be deleted.Returns Integer
70740>>>>>
70740>>>>>External_Function fsMoveFile "MoveFileW" Kernel32.Dll ;WString sExistingFileName ;     // Pointer to a null-terminated string that names an existing file or directory.WString sNewFileName ;          // Pointer to a null-terminated string that specifies the new name of a file or directory.Returns Integer                 // The new name must Not already exist. A new File may be on A different File system Or drive. A new directory must be on the same drive.
70741>>>>>
70741>>>>>External_Function fsCopyFile "CopyFileW" Kernel32.Dll ;WString sExistingFileName ;     // Pointer to a null-terminated string that specifies the name of an existing file.WString sNewFileName ;          // Pointer to a null-terminated string that specifies the name of the new file.Boolean bFailIfExists ;         // If bFailIfExists is TRUE and the new file specified by lpNewFileName already exists, the function fails.Returns Integer                 // If bFailIfExists is FALSE and the new file already exists, the function overwrites the existing file and succeeds.
70742>>>>>
70742>>>>>External_Function fsFindFirstFile "FindFirstFileW" Kernel32.Dll ;WString wFileName ;             // Pointer to a null-terminated string that specifies a valid directory or path and file name, which can contain wildcard characters (* and ?).Pointer lpWin32_Find_Data ;     // Pointer to the WIN32_FIND_DATA structure that receives information about the found file or subdirectory.Returns Integer
70743>>>>>
70743>>>>>External_Function fsFindNextFile "FindNextFileW" Kernel32.Dll ;Handle hFindFile ;              // handle returned by a previous call to the FindFirstFile function.Pointer lpWin32_Find_Data ;     // Pointer to the WIN32_FIND_DATA structure that receives information about the found file or subdirectory.Returns Integer
70744>>>>>
70744>>>>>External_Function fsFindClose "FindClose" Kernel32.dll ;Handle hFindFile ;              // File search handle. This handle must have been previously opened by the FindFirstFile function.Returns Integer
70745>>>>>
70745>>>>>External_Function fsGetFileTime "GetFileTime" Kernel32.dll ;Handle  hFile  ;                // Handle For a file from createfile with read accessPointer lpCreationtime ;        // Pointer to a FILETIME structure containing the file creation timePointer lpLastAccesstime ;      // Pointer to a FILETIME structure containing the file last access timePointer lpLastWritetime ;       // Pointer to a FILETIME structure containing the file last write timeReturns Integer
70746>>>>>
70746>>>>>External_Function fsSetFileTime "SetFileTime" Kernel32.dll ;Handle  hFile  ;                // Handle For a file from createfile with write accessPointer lpCreationtime ;        // Pointer to a FILETIME structure containing the file creation timePointer lpLastAccesstime ;      // Pointer to a FILETIME structure containing the file last access timePointer lpLastWritetime ;       // Pointer to a FILETIME structure containing the file last write timeReturns Integer
70747>>>>>
70747>>>>>External_function fsGetSystemTimeAsFileTime "GetSystemTimeAsFileTime" Kernel32.dll ;Pointer lpSystemTimeAsFileTime ;   // Pointer to a FILETIME structure containing the current system time in filetimme formatReturns Integer
70748>>>>>
70748>>>>>External_Function fsFileTimeToSystemTime "FileTimeToSystemTime" Kernel32.dll ;Pointer lpFiletime ;            // Pointer to a FILETIME structure containing the file time to convert to system date and time format.Pointer lpSystemtime ;          // Pointer to a SYSTEMTIME structure to receive the converted file time.Returns Integer
70749>>>>>
70749>>>>>External_Function fsSystemTimeToTzSpecificLocalTime "SystemTimeToTzSpecificLocalTime" Kernel32.dll ;Pointer lpTimeZone ;            // A pointer to a TIME_ZONE_INFORMATION structure that specifies the time zone of interest.Pointer lpUniversalTime ;       // A pointer to a SYSTEMTIME structure that specifies a time, in UTC.Pointer lpLocalTime ;           // A pointer to a SYSTEMTIME structure that receives the local time.Returns Integer
70750>>>>>
70750>>>>>External_Function fsGetTempFileName "GetTempFileNameW" kernel32.dll ;WString sPathname ;WString sPrefixString ;Integer iUnique ;Pointer sTempFileName ;Returns Integer
70751>>>>>
70751>>>>>External_Function fsGetTempPath "GetTempPathW" Kernel32.Dll ;Integer nBufferLength ;Pointer lpBuffer ;Returns Integer
70752>>>>>
70752>>>>>External_Function fsCreateDirectory "CreateDirectoryW" Kernel32.dll ;WString sDirName ;              // Pointer to a null-terminated string that specifies the path of the directory to be created.Pointer lpSecAttributes ;       // Pointer to a SECURITY_ATTRIBUTES structure.Returns Integer
70753>>>>>
70753>>>>>External_Function fsRemoveDirectory "RemoveDirectoryW" Kernel32.dll ;WString sDirName ;             // Pointer to a null-terminated string that specifies the path of the directory to be removed.Returns Integer
70754>>>>>
70754>>>>>External_Function fsExtractAssociatedIcon "ExtractAssociatedIconW" shell32.dll ;Handle hInst ;Pointer lpIconPath ;Integer lpiIcon ;Returns Handle
70755>>>>>
70755>>>>>External_Function fsDestroyIcon "DestroyIcon" User32.dll ;Handle hIcon ;Returns Integer
70756>>>>>
70756>>>>>External_Function fsGetFileVersionInfoSize "GetFileVersionInfoSizeW" Version.dll ;WString sFilename ;             // The name of the file of interest. The function uses the search sequence specified by the LoadLibrary function.Pointer lpHandle ;              // A pointer to a variable that the function sets to zero.Returns UInteger
70757>>>>>
70757>>>>>External_Function fsGetFileVersionInfo "GetFileVersionInfoW" Version.dll ;WString sFilename ;             // The name of the file. If a full path is not specified, the function uses the search sequence specified by the LoadLibrary function.DWord   dwHandle ;              // This parameter is ignored.DWord   dwLen ;                 // The size, in bytes, of the buffer pointed to by the lpData parameter.Pointer lpData ;                // Pointer to a buffer that receives the file-version information.Returns Boolean
70758>>>>>
70758>>>>>External_Function fsVerQueryValue "VerQueryValueW" Version.dll ;Pointer lpBlock ;               // The version-information resource returned by the GetFileVersionInfo function.WString sSubBlock ;             // The version-information value to be retrieved.Pointer lplpBuffer ;            // When this method returns, contains the address of a pointer to the requested version information in the buffer pointed to by lpBlock.Pointer lpLen ;                 // When this method returns, contains a pointer to the size of the requested data pointed to by lpBuffer.Returns Boolean
70759>>>>>
70759>>>>>//************************************************************************
70759>>>>>// Structures
70759>>>>>//************************************************************************
70759>>>>>
70759>>>>>// Nils 2018-08-30 Added For the SourceCodeTools project
70759>>>>>// so we don't need to use both Akefs.pkg and this package.
70759>>>>>// A 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
70759>>>>>Struct tFileTime
70759>>>>>    DWord dwLowDateTime    // Low-order part of the file time.
70759>>>>>    DWord dwHighDateTime   // High-order part of the file time.
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct structWFD  // Used by FindFirstFile
70759>>>>>    DWord    dwFileAttributes
70759>>>>>    UBigInt  ftCreationDateTime
70759>>>>>    UBigInt  ftLastAccessDateTime
70759>>>>>    UBigInt  ftLastWriteDateTime
70759>>>>>    UInteger nFileSizeHigh
70759>>>>>    UInteger nFileSizeLow
70759>>>>>    DWord    dares
70759>>>>>    DWord    dbres
70759>>>>>    Short[MAX_PATH] cFileName
70759>>>>>    Short[14]       cAlternateFileName
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct structSystemTime
70759>>>>>    UShort wYear
70759>>>>>    UShort wMonth
70759>>>>>    UShort wDayOfWeek
70759>>>>>    UShort wDay
70759>>>>>    UShort wHour
70759>>>>>    UShort wMinute
70759>>>>>    UShort wSecond
70759>>>>>    UShort wMillieseconds
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct structFile
70759>>>>>    Handle hFilehandle
70759>>>>>    String sFilename    // Assigned filename in OEM format.
70759>>>>>    Boolean bEndOfFile  // True then the end of the binary file had been read.
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct structFileBufferPointer
70759>>>>>    Integer iBufferPointer
70759>>>>>    Integer iBufferSize
70759>>>>>    BigInt biFromFilePosition
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct tsSearchResult
70759>>>>>    String sFilename
70759>>>>>    String sAlternateFileName   // 8.3 format
70759>>>>>    DateTime dtCreationDateTime
70759>>>>>    DateTime dtLastAccessDateTime
70759>>>>>    DateTime dtLastWriteDateTime
70759>>>>>    BigInt biFileSize
70759>>>>>    Integer iFileAttributes
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct tsVS_FIXEDFILEINFO
70759>>>>>    DWord dwSignature
70759>>>>>    DWord dwStrucVersion
70759>>>>>    DWord dwFileVersionMS
70759>>>>>    DWord dwFileVersionLS
70759>>>>>    DWord dwProductVersionMS
70759>>>>>    DWord dwProductVersionLS
70759>>>>>    DWord dwFileFlagsMask
70759>>>>>    DWord dwFileFlags
70759>>>>>    DWord dwFileOS
70759>>>>>    DWord dwFileType
70759>>>>>    DWord dwFileSubtype
70759>>>>>    //    DWord dwFileDateMS
70759>>>>>    //    DWord dwFileDateLS
70759>>>>>    UBigInt ubiFileDate
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct tsFileVersionInfo
70759>>>>>    tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
70759>>>>>    tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
70759>>>>>    Short[] siFileVersion
70759>>>>>    Short[] siProductVersion
70759>>>>>    DateTime dtCreationDateTime
70759>>>>>    String sComments
70759>>>>>    String sCompanyName
70759>>>>>    String sFileDescription
70759>>>>>    String sFileVersion
70759>>>>>    String sInternalName
70759>>>>>    String sLegalCopyright
70759>>>>>    String sLegalTrademarks
70759>>>>>    String sOriginalFilename
70759>>>>>    String sProductName
70759>>>>>    String sProductVersion
70759>>>>>    String sPrivateBuild
70759>>>>>    String sSpecialBuild
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Struct tsLandAndCodePage
70759>>>>>    UShort wLanguage
70759>>>>>    UShort wCodePage
70759>>>>>End_Struct
70759>>>>>
70759>>>>>Register_Function FileErrorText Integer iFilenumber Returns String
70759>>>>>
70759>>>>>//************************************************************************
70759>>>>>// The filesystem class
70759>>>>>//************************************************************************
70759>>>>>Class cFilesystem is a cObject
70760>>>>>
70760>>>>>    Procedure Construct_Object
70762>>>>>        Forward Send Construct_Object
70764>>>>>
70764>>>>>        // True then the end of the binary file had been read - not when $1A (EOF) is met.
70764>>>>>        // Legacy property. Use the BinaryFileEndOfFile function instead.
70764>>>>>        Property Boolean pbEOF False
70765>>>>>
70765>>>>>        // True if any error has occured during fileoprerations.
70765>>>>>        Property Boolean pbError False
70766>>>>>
70766>>>>>        // If errormessages should be called with dataflex error command set this to true
70766>>>>>        Property Boolean pbErrorAsVDFError False
70767>>>>>
70767>>>>>        // Keeps assigned handles and filenames For each filenumber.
70767>>>>>        // private
70767>>>>>        Property structFile[] plsFile
70768>>>>>
70768>>>>>        // Keeps read cached buffers For each filenumer. Used For BinaryReadChcheu
70768>>>>>        // private
70768>>>>>        Property String[] psaCachedBuffer
70769>>>>>
70769>>>>>        // Pointers For cached buffers.
70769>>>>>        // private
70769>>>>>        Property structFileBufferPointer[] plsCachedPointer
70770>>>>>    End_Procedure
70771>>>>>
70771>>>>>    // Returns the next available filenumber For a binary file.
70771>>>>>    Function BinaryFileNextFilenumber Returns Integer
70773>>>>>        structFile[] lsFile
70773>>>>>        structFile[] lsFile
70774>>>>>        Integer iMaxFiles iCurrentFile iNextFileNumber
70774>>>>>        Get plsFile to lsFile
70775>>>>>        Move (SizeOfArray(lsFile)) to iMaxFiles
70776>>>>>        Move -1 to iNextFileNumber
70777>>>>>        Move 0 to iCurrentFile
70778>>>>>        While (iCurrentFile < iMaxFiles and iNextFileNumber = -1)
70782>>>>>            If (lsFile[iCurrentFile].hFilehandle = 0) Begin
70784>>>>>                Move iCurrentFile to iNextFileNumber
70785>>>>>            End
70785>>>>>>
70785>>>>>            Else Begin
70786>>>>>                Increment iCurrentFile
70787>>>>>            End
70787>>>>>>
70787>>>>>        Loop
70788>>>>>>
70788>>>>>        If (iNextFileNumber = -1) Begin
70790>>>>>            Move iMaxFiles to iNextFileNumber
70791>>>>>        End
70791>>>>>>
70791>>>>>        Function_Return iNextFileNumber
70792>>>>>    End_Function
70793>>>>>
70793>>>>>    // Opens a binary file.
70793>>>>>    // If bShared is false or not pharsed the file is opened in exclusive.
70793>>>>>    // If bShared is True the file is opened with both read and write shared mode
70793>>>>>    // If bCreate is True the file is created if it does not exist already.
70793>>>>>    // If bReadOnly is True the file is opened with only read access (and only read shared mode if bShared is also true).
70793>>>>>    // Returns true if the file was opened or created without error.
70793>>>>>    Function BinaryFileOpen Integer iFilenumber String sFilename Boolean bShared Boolean bCreate Boolean bReadOnly Returns Boolean
70795>>>>>        Integer iReturnValue iErrornumber
70795>>>>>        DWord dwSharedMode dwCreateMode dwAccessMode
70795>>>>>        structFile[] lsFile
70795>>>>>        structFile[] lsFile
70796>>>>>        String sFilenameANSI
70796>>>>>        Boolean bOk bFilehandleOK
70796>>>>>        Get plsFile to lsFile
70797>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
70799>>>>>            If (lsFile[iFilenumber].hFilehandle = 0) Begin
70801>>>>>                Move True to bFilehandleOK
70802>>>>>            End
70802>>>>>>
70802>>>>>        End
70802>>>>>>
70802>>>>>        Else Begin
70803>>>>>            Move True to bFilehandleOK
70804>>>>>        End
70804>>>>>>
70804>>>>>        If bFilehandleOK Begin
70806>>>>>            Move sFilename to lsFile[iFilenumber].sFilename
70807>>>>>            Move sFilename to sFilenameANSI
70808>>>>>            Set pbError to False
70809>>>>>            Move False to bOk
70810>>>>>            Move GENERIC_RANDOM to dwAccessMode
70811>>>>>            Move FNULL to dwSharedMode
70812>>>>>            If (num_arguments > 2) Begin
70814>>>>>                If (bShared = True) Begin
70816>>>>>                    Move FILE_SHARE_RANDOM to dwSharedMode
70817>>>>>                End
70817>>>>>>
70817>>>>>            End
70817>>>>>>
70817>>>>>            Move OPEN_EXISTING to dwCreateMode
70818>>>>>            If (num_arguments > 3) Begin
70820>>>>>                If (bCreate = True) Begin
70822>>>>>                    Move OPEN_ALWAYS to dwCreateMode
70823>>>>>                End
70823>>>>>>
70823>>>>>            End
70823>>>>>>
70823>>>>>            If (num_arguments > 4) Begin
70825>>>>>                If (bReadOnly = True) Begin
70827>>>>>                    Move GENERIC_READ to dwAccessMode
70828>>>>>                    If (bShared = True) Begin
70830>>>>>                        Move FILE_SHARE_READ to dwSharedMode
70831>>>>>                    End
70831>>>>>>
70831>>>>>                End
70831>>>>>>
70831>>>>>            End
70831>>>>>>
70831>>>>>            Append sFilenameANSI (Character(0)) (Character(0))
70833>>>>>            Move (fsCreatefile(sFilenameANSI, dwAccessMode, dwSharedMode, FNULL, dwCreateMode, FILE_ATTRIBUTE_NORMAL, FNULL)) to iReturnValue
70834>>>>>            If (iReturnValue = INVALID_HANDLE_VALUE) Begin
70836>>>>>                Move (fsGetLastError()) to iErrornumber
70837>>>>>                If iErrornumber Begin
70839>>>>>                    Send DoShowError iErrornumber ("File: "+ sFilename)
70840>>>>>                End
70840>>>>>>
70840>>>>>            End
70840>>>>>>
70840>>>>>            Else Begin
70841>>>>>                Move iReturnValue to lsFile[iFilenumber].hFilehandle
70842>>>>>                Move False to lsFile[iFilenumber].bEndOfFile
70843>>>>>                Set plsFile to lsFile
70844>>>>>                Set pbEOF to False
70845>>>>>                Move True to bOk
70846>>>>>            End
70846>>>>>>
70846>>>>>        End
70846>>>>>>
70846>>>>>        Else Begin
70847>>>>>            Send warning_box "The filenumber is already used."
70848>>>>>        End
70848>>>>>>
70848>>>>>        Function_Return bOk
70849>>>>>    End_Function
70850>>>>>
70850>>>>>    // Closing a binary file
70850>>>>>    // Returns true if the file could be closed.
70850>>>>>    Function BinaryFileClose Integer iFilenumber Returns Boolean
70852>>>>>        Integer iRetVal iErrorNumber
70852>>>>>        Handle hHandle
70852>>>>>        structFile[] lsFile
70852>>>>>        structFile[] lsFile
70853>>>>>        structFileBufferPointer[] lsFileBufferPointer
70853>>>>>        structFileBufferPointer[] lsFileBufferPointer
70854>>>>>        String[] saCachedBuffer
70855>>>>>        Boolean bOk
70855>>>>>        Get BinaryFileHandle iFilenumber to hHandle
70856>>>>>        Set pbError to False
70857>>>>>        Move False to bOk
70858>>>>>        If hHandle Begin
70860>>>>>            Move (fsCloseHandle(hHandle)) to iRetVal
70861>>>>>            If (iRetVal = 0) Begin           // Could not close
70863>>>>>                Move (fsGetLastError()) to iErrorNumber
70864>>>>>                If iErrorNumber Begin
70866>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
70867>>>>>                End
70867>>>>>>
70867>>>>>            End
70867>>>>>>
70867>>>>>            Else Begin
70868>>>>>                Get plsFile to lsFile
70869>>>>>                Get plsCachedPointer to lsFileBufferPointer
70870>>>>>                Get psaCachedBuffer to saCachedBuffer
70871>>>>>                Move 0 to lsFile[iFilenumber].hFilehandle
70872>>>>>                Move "" to saCachedBuffer[iFilenumber]
70873>>>>>                Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70874>>>>>                Move 0 to lsFileBufferPointer[iFilenumber].iBufferSize
70875>>>>>                Move 0 to lsFileBufferPointer[iFilenumber].biFromFilePosition
70876>>>>>                Set plsFile to lsFile
70877>>>>>                Set plsCachedPointer to lsFileBufferPointer
70878>>>>>                Set psaCachedBuffer to saCachedBuffer
70879>>>>>                Move True to bOk
70880>>>>>            End
70880>>>>>>
70880>>>>>        End
70880>>>>>>
70880>>>>>        Function_Return bOk
70881>>>>>    End_Function
70882>>>>>
70882>>>>>    // Reading from a binary file.
70882>>>>>    // The data read from the file is placed in sReadBuffer and the function returns the number of bytes read.
70882>>>>>    // Then the function returns 0 the end of file has been reached (pbEOF will then be true) or an error has occured (pbError will then be true).
70882>>>>>    // No errors occures if you try to read past end of file.
70882>>>>>    // To speed up reading process you should read in a block of data at a time (i.e. iNumberOfBytes = 2000) instead of
70882>>>>>    // reading one byte at a time. No errors occures if you try to read past end
70882>>>>>    // of file. Note that iNumberOfBytes must not exceed the argument size.
70882>>>>>    Function BinaryFileRead Integer iFilenumber Integer iNumberOfBytes String ByRef sReadBuffer Returns Integer
70884>>>>>        Handle hFileHandle
70884>>>>>        Integer iBytesRead iMaxBuffer iErrorNumber
70884>>>>>        Boolean bOk
70884>>>>>        structFile[] lsFile
70884>>>>>        structFile[] lsFile
70885>>>>>        Set pbError to False
70886>>>>>        Move 0 to iBytesRead
70887>>>>>        Get_Argument_Size to iMaxBuffer
70888>>>>>        If (iNumberOfBytes > iMaxBuffer) Begin
70890>>>>>            Send warning_box "Blocksize to read exceeds argument size!"
70891>>>>>            Function_Return iBytesRead
70892>>>>>        End
70892>>>>>>
70892>>>>>        If (iNumberOfBytes < 1) Begin
70894>>>>>            Send warning_box "Number of bytes to read can not be less than one."
70895>>>>>            Function_Return iBytesRead
70896>>>>>        End
70896>>>>>>
70896>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
70897>>>>>        If hFileHandle Begin
70899>>>>>            Move (ZeroString(iNumberOfBytes)) to sReadBuffer
70900>>>>>            Move (fsReadFile(hFileHandle, AddressOf(sReadBuffer), iNumberOfBytes, (AddressOf(iBytesRead)), FNULL)) to bOk
70901>>>>>            If (bOk = False) Begin
70903>>>>>                Move (fsGetLastError()) to iErrorNumber
70904>>>>>                If iErrorNumber Begin
70906>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
70907>>>>>                End
70907>>>>>>
70907>>>>>            End
70907>>>>>>
70907>>>>>            Else Begin
70908>>>>>                If (iBytesRead = 0 or iBytesRead <> iNumberOfBytes) Begin
70910>>>>>                    Get plsFile to lsFile
70911>>>>>                    Move True to lsFile[iFilenumber].bEndOfFile
70912>>>>>                    Set plsFile to lsFile
70913>>>>>                    Set pbEOF to True
70914>>>>>                    Move (Left(sReadBuffer, iBytesRead)) to sReadBuffer
70915>>>>>                End
70915>>>>>>
70915>>>>>            End
70915>>>>>>
70915>>>>>        End
70915>>>>>>
70915>>>>>        Else Begin
70916>>>>>            Send warning_box FS_FILEHANDLEMISSING
70917>>>>>        End
70917>>>>>>
70917>>>>>        Function_Return iBytesRead
70918>>>>>    End_Function
70919>>>>>
70919>>>>>    // Reading from a binary file until a string of bytes are matched.
70919>>>>>    // The data read from the file is placed in the sReturnBuffer and the function returns the number of bytes read until the match is read including the match.
70919>>>>>    // Then the function returns 0 the end of file has been reached (pbEOF will then be true) or an error has occured (pbError will then be true).
70919>>>>>    // The return string buffer would also be empty.
70919>>>>>    // No errors occures if you try to read past end of file.
70919>>>>>    // To speed up reading process the buffer will be read in sizes of the current argument_size.
70919>>>>>    Function BinaryFileReadCachedUntilMatch Integer iFilenumber String sMatchString String ByRef sReturnBuffer Boolean ByRef bEndOfFile Returns Integer
70921>>>>>        Handle hFileHandle
70921>>>>>        Integer iBuffersize iMatchPos iLengthMatch
70921>>>>>        String sByte
70921>>>>>        structFile[] lsFile
70921>>>>>        structFile[] lsFile
70922>>>>>        structFileBufferPointer[] lsFileBufferPointer
70922>>>>>        structFileBufferPointer[] lsFileBufferPointer
70923>>>>>        String[] saCachedBuffer
70924>>>>>        Get plsFile to lsFile
70925>>>>>        Move "" to sReturnBuffer
70926>>>>>        Move 1 to iMatchPos
70927>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
70929>>>>>            Move lsFile[iFilenumber].hFilehandle to hFileHandle
70930>>>>>            If (hFileHandle <> 0) Begin
70932>>>>>                Move (Length(sMatchString)) to iLengthMatch
70933>>>>>                Get plsCachedPointer to lsFileBufferPointer
70934>>>>>                Get psaCachedBuffer to saCachedBuffer
70935>>>>>                If (iFilenumber >= SizeOfArray(lsFileBufferPointer)) Begin
70937>>>>>                    Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70938>>>>>                    Move "" to saCachedBuffer[iFilenumber]
70939>>>>>                End
70939>>>>>>
70939>>>>>                Repeat
70939>>>>>>
70939>>>>>                    If (lsFileBufferPointer[iFilenumber].iBufferPointer > lsFileBufferPointer[iFilenumber].iBufferSize) Begin
70941>>>>>                        Get_Argument_Size to iBuffersize
70942>>>>>                        Get BinaryFilePosition iFilenumber to lsFileBufferPointer[iFilenumber].biFromFilePosition
70943>>>>>                        Get BinaryFileRead iFilenumber iBuffersize (&saCachedBuffer[iFilenumber]) to lsFileBufferPointer[iFilenumber].iBufferSize
70944>>>>>                        Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70945>>>>>                        Set psaCachedBuffer to saCachedBuffer
70946>>>>>                    End
70946>>>>>>
70946>>>>>                    If (lsFileBufferPointer[iFilenumber].iBufferPointer =< lsFileBufferPointer[iFilenumber].iBufferSize) Begin
70948>>>>>                        Move (Mid(saCachedBuffer[iFilenumber], 1, lsFileBufferPointer[iFilenumber].iBufferPointer)) to sByte
70949>>>>>                        Increment lsFileBufferPointer[iFilenumber].iBufferPointer
70950>>>>>                        Move (sReturnBuffer + sByte) to sReturnBuffer
70951>>>>>                        If (sByte = Mid(sMatchString, 1, iMatchPos)) Begin
70953>>>>>                            Increment iMatchPos
70954>>>>>                        End
70954>>>>>>
70954>>>>>                        Else Begin
70955>>>>>                            Move 1 to iMatchPos
70956>>>>>                        End
70956>>>>>>
70956>>>>>                    End
70956>>>>>>
70956>>>>>                Until (iMatchPos > iLengthMatch or lsFileBufferPointer[iFilenumber].iBufferSize = 0)
70958>>>>>                Set plsCachedPointer to lsFileBufferPointer
70959>>>>>                If (lsFileBufferPointer[iFilenumber].iBufferSize = 0) Begin
70961>>>>>                    Move lsFile[iFilenumber].bEndOfFile to bEndOfFile
70962>>>>>                End
70962>>>>>>
70962>>>>>            End
70962>>>>>>
70962>>>>>            Else Begin
70963>>>>>                Send warning_box FS_FILEHANDLEMISSING
70964>>>>>            End
70964>>>>>>
70964>>>>>        End
70964>>>>>>
70964>>>>>        Function_Return (Length(sReturnBuffer))
70965>>>>>    End_Function
70966>>>>>
70966>>>>>    // Reading from a binary file as CSV file For next text field.
70966>>>>>    // The data read from the file is placed in the sReturnBuffer excluding the separator and the function returns true.
70966>>>>>    // Then the function returns false the end of file has been reached (pbEOF will then be true) or an error has occured (pbError will then be true).
70966>>>>>    // When the end of row data has been read the bEndOfRow is set true.
70966>>>>>    // The end of row is indicated with sCharEOL. If that is not applied the charactersequence character(13) + character(10) is used.
70966>>>>>    // The return string buffer would also be empty.
70966>>>>>    // No errors occures if you try to read past end of file.
70966>>>>>    // To speed up reading process the buffer will be read in sizes of the current argument_size.
70966>>>>>    Function BinaryFileReadCachedCSV Integer iFilenumber String sFieldseparator String sTextQualification String ByRef sReturnBuffer Boolean ByRef bEndOfRow Boolean ByRef bEndOfFile String sCharEOL Returns Integer
70968>>>>>        Handle hFileHandle
70968>>>>>        Integer iLengthSeparator iLengthTextQualification iEOLLength iTestLength
70968>>>>>        String sByte sEOL sTestBuffer
70968>>>>>        structFile[] lsFile
70968>>>>>        structFile[] lsFile
70969>>>>>        structFileBufferPointer[] lsFileBufferPointer
70969>>>>>        structFileBufferPointer[] lsFileBufferPointer
70970>>>>>        String[] saCachedBuffer
70971>>>>>        Boolean bInTextFieldMode bTextFieldReady bFieldSeparator bTextQualificator bEscapeTextQualificatorTest bByteOk
70971>>>>>        BigInt biAfterTextQualificator
70971>>>>>        Get plsFile to lsFile
70972>>>>>        If (num_arguments > 6) Begin
70974>>>>>            Move sCharEOL to sEOL
70975>>>>>        End
70975>>>>>>
70975>>>>>        Else Begin
70976>>>>>            Move ((Character(13))+(Character(10))) to sEOL
70977>>>>>        End
70977>>>>>>
70977>>>>>        Move (Length(sEOL)) to iEOLLength
70978>>>>>        Move "" to sReturnBuffer
70979>>>>>        Move "" to sByte
70980>>>>>        Move False to bInTextFieldMode
70981>>>>>        Move False to bTextFieldReady
70982>>>>>        Move False to bEndOfRow
70983>>>>>        Move False to bTextQualificator
70984>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
70986>>>>>            Move lsFile[iFilenumber].hFilehandle to hFileHandle
70987>>>>>            If (hFileHandle <> 0) Begin
70989>>>>>                Move (Length(sFieldseparator)) to iLengthSeparator
70990>>>>>                Move (Length(sTextQualification)) to iLengthTextQualification
70991>>>>>                Get plsCachedPointer to lsFileBufferPointer
70992>>>>>                Get psaCachedBuffer to saCachedBuffer
70993>>>>>
70993>>>>>                If (iFilenumber >= SizeOfArray(lsFileBufferPointer)) Begin
70995>>>>>                    Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70996>>>>>                    Move "" to saCachedBuffer[iFilenumber]
70997>>>>>                End
70997>>>>>>
70997>>>>>                Repeat
70997>>>>>>
70997>>>>>                    Get NextByteCSV (&iFilenumber) (&lsFileBufferPointer[iFilenumber]) (&saCachedBuffer) (&sByte) to bByteOk
70998>>>>>                    If bByteOk Begin
71000>>>>>                        Move (sReturnBuffer + sByte) to sReturnBuffer
71001>>>>>                        Move (Right(sReturnBuffer, iLengthSeparator) = sFieldseparator) to bFieldSeparator
71002>>>>>                        If bFieldSeparator Begin
71004>>>>>                            Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iLengthSeparator))) to sReturnBuffer
71005>>>>>                            Move True to bTextFieldReady
71006>>>>>                            Move False to bEscapeTextQualificatorTest
71007>>>>>                        End
71007>>>>>>
71007>>>>>                        If (not(bTextFieldReady)) Begin
71009>>>>>                            Move (Right(sReturnBuffer, iEOLLength) = sEOL) to bEndOfRow
71010>>>>>                            If bEndOfRow Begin
71012>>>>>                                Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iEOLLength))) to sReturnBuffer
71013>>>>>                                Move True to bTextFieldReady
71014>>>>>                            End
71014>>>>>>
71014>>>>>                        End
71014>>>>>>
71014>>>>>                        If (not(bTextFieldReady)) Begin
71016>>>>>                            Move (Right(sReturnBuffer, iLengthTextQualification) = sTextQualification) to bTextQualificator
71017>>>>>                            If bTextQualificator Begin
71019>>>>>                            // Read until end of text field. Place filepointer after text field.
71019>>>>>                                Move True to bInTextFieldMode
71020>>>>>                                Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iLengthTextQualification))) to sReturnBuffer
71021>>>>>                                Repeat
71021>>>>>>
71021>>>>>                                    Get NextByteCSV (&iFilenumber) (&lsFileBufferPointer[iFilenumber]) (&saCachedBuffer) (&sByte) to bByteOk
71022>>>>>                                    If bByteOk Begin
71024>>>>>                                        Move (sReturnBuffer + sByte) to sReturnBuffer
71025>>>>>                                        Move (Right(sReturnBuffer, iLengthTextQualification) = sTextQualification) to bTextQualificator
71026>>>>>                                        If bTextQualificator Begin
71028>>>>>                                        // Either it is the end of the text field or the escape text qualificator has been read.
71028>>>>>                                        // Read ahead to a new buffer to see if the next bytes are the text qualificator.
71028>>>>>                                        // If it is, add the new buffer to the return buffer.
71028>>>>>                                        // If not, restore the filebuffer to this position and mark the text field ended.
71028>>>>>                                            Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iLengthTextQualification))) to sReturnBuffer
71029>>>>>                                            Set plsCachedPointer to lsFileBufferPointer
71030>>>>>                                            Get BinaryFileCachedPosition iFilenumber to biAfterTextQualificator
71031>>>>>                                            Move "" to sTestBuffer
71032>>>>>                                            Move 0 to iTestLength
71033>>>>>                                            Move True to bEscapeTextQualificatorTest
71034>>>>>                                            Repeat
71034>>>>>>
71034>>>>>                                                Get NextByteCSV (&iFilenumber) (&lsFileBufferPointer[iFilenumber]) (&saCachedBuffer) (&sByte) to bByteOk
71035>>>>>                                                If bByteOk Begin
71037>>>>>                                                    Move (sTestBuffer + sByte) to sTestBuffer
71038>>>>>                                                    Increment iTestLength
71039>>>>>                                                    If (Left(sTextQualification, iTestLength) = sTestBuffer) Begin
71041>>>>>                                                        If (iTestLength = iLengthTextQualification) Begin
71043>>>>>                                                            Move (sReturnBuffer + sTestBuffer) to sReturnBuffer
71044>>>>>                                                            Move False to bEscapeTextQualificatorTest
71045>>>>>                                                        End
71045>>>>>>
71045>>>>>                                                    End
71045>>>>>>
71045>>>>>                                                    Else Begin
71046>>>>>                                                        Set BinaryFileChachedPosition iFilenumber to biAfterTextQualificator
71047>>>>>                                                        Get plsCachedPointer to lsFileBufferPointer
71048>>>>>                                                        Move False to bEscapeTextQualificatorTest
71049>>>>>                                                        Move False to bInTextFieldMode
71050>>>>>                                                    End
71050>>>>>>
71050>>>>>                                                End
71050>>>>>>
71050>>>>>                                            Until (bEscapeTextQualificatorTest = False or lsFileBufferPointer[iFilenumber].iBufferSize = 0 or bByteOk = False)
71052>>>>>                                        End
71052>>>>>>
71052>>>>>                                    End
71052>>>>>>
71052>>>>>                                Until (bInTextFieldMode = False or lsFileBufferPointer[iFilenumber].iBufferSize = 0 or bByteOk = False)
71054>>>>>                            End
71054>>>>>>
71054>>>>>                        End
71054>>>>>>
71054>>>>>                    End
71054>>>>>>
71054>>>>>                Until (bTextFieldReady = True or lsFileBufferPointer[iFilenumber].iBufferSize = 0 or bByteOk = False)
71056>>>>>                Set plsCachedPointer to lsFileBufferPointer
71057>>>>>                If (lsFileBufferPointer[iFilenumber].iBufferSize = 0) Begin
71059>>>>>                    Move lsFile[iFilenumber].bEndOfFile to bEndOfFile
71060>>>>>                    If (bEndOfFile = True) Begin
71062>>>>>                        Move True to bTextFieldReady
71063>>>>>                        Move True to bEndOfRow
71064>>>>>                    End
71064>>>>>>
71064>>>>>                End
71064>>>>>>
71064>>>>>            End
71064>>>>>>
71064>>>>>            Else Begin
71065>>>>>                Send warning_box FS_FILEHANDLEMISSING
71066>>>>>            End
71066>>>>>>
71066>>>>>        End
71066>>>>>>
71066>>>>>        Function_Return bTextFieldReady
71067>>>>>    End_Function
71068>>>>>
71068>>>>>    Function NextByteCSV Integer ByRef iFilenumber structFileBufferPointer ByRef lsFileBufferPointer String[] ByRef saCachedBuffer String ByRef sByte Returns String
71070>>>>>        Integer iBufferSize
71070>>>>>        Boolean bOk
71070>>>>>        If (lsFileBufferPointer.iBufferPointer > lsFileBufferPointer.iBufferSize) Begin
71072>>>>>            Get_Argument_Size to iBufferSize
71073>>>>>            Get BinaryFilePosition iFilenumber to lsFileBufferPointer.biFromFilePosition
71074>>>>>            Get BinaryFileRead iFilenumber iBufferSize (&saCachedBuffer[iFilenumber]) to lsFileBufferPointer.iBufferSize
71075>>>>>            Move 1 to lsFileBufferPointer.iBufferPointer
71076>>>>>            Set psaCachedBuffer to saCachedBuffer
71077>>>>>        End
71077>>>>>>
71077>>>>>        If (lsFileBufferPointer.iBufferPointer <= lsFileBufferPointer.iBufferSize) Begin
71079>>>>>            Move (Mid(saCachedBuffer[iFilenumber], 1, lsFileBufferPointer.iBufferPointer)) to sByte
71080>>>>>            Increment lsFileBufferPointer.iBufferPointer
71081>>>>>            Move True to bOk
71082>>>>>        End
71082>>>>>>
71082>>>>>        Function_Return bOk
71083>>>>>    End_Function
71084>>>>>
71084>>>>>    // Shortcut to read a binary file as lines from a textfile.
71084>>>>>    // Reads from cached file until sCharEOL are recieved.
71084>>>>>    // Data is returned without the ending sCharEOL
71084>>>>>    // If sCharEOL is not applied the charactersequence character(13) + character(10) is used.
71084>>>>>    // Returns True when the line has been read.
71084>>>>>    Function BinaryFileReadCachedLN Integer iFilenumber String ByRef sLine Boolean ByRef bEndOfFile String sCharEOL Returns Boolean
71086>>>>>        Boolean bEndOfRow
71086>>>>>        Integer iBytesRead iEOLLength
71086>>>>>        String sEOL
71086>>>>>        If (num_arguments > 3) Begin
71088>>>>>            Move sCharEOL to sEOL
71089>>>>>        End
71089>>>>>>
71089>>>>>        Else Begin
71090>>>>>            Move ((Character(13))+(Character(10))) to sEOL
71091>>>>>        End
71091>>>>>>
71091>>>>>        Move (Length(sEOL)) to iEOLLength
71092>>>>>        Get BinaryFileReadCachedUntilMatch iFilenumber sEOL (&sLine) (&bEndOfFile) to iBytesRead
71093>>>>>        If (iBytesRead > 0) Begin
71095>>>>>            If (Right(sLine, iEOLLength) = sEOL) Begin
71097>>>>>                Move (Left(sLine, (Length(sLine) - iEOLLength))) to sLine
71098>>>>>                Move True to bEndOfRow
71099>>>>>            End
71099>>>>>>
71099>>>>>        End
71099>>>>>>
71099>>>>>        Function_Return bEndOfRow
71100>>>>>    End_Function
71101>>>>>
71101>>>>>    // Writing to a binary file.
71101>>>>>    // Returns true if the data was written to the file without error.
71101>>>>>    Function BinaryFileWrite Integer iFilenumber String ByRef sWriteData Returns Boolean
71103>>>>>        Integer iBytesWritten iBytesToWrite iErrorNumber
71103>>>>>        Handle hFileHandle
71103>>>>>        Boolean bOk
71103>>>>>        Set pbError to False
71104>>>>>        Move False to bOk
71105>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71106>>>>>        If hFileHandle Begin
71108>>>>>            Move 0 to iBytesWritten
71109>>>>>            Move (Length(sWriteData)) to iBytesToWrite
71110>>>>>            Move (fsWriteFile(hFileHandle, AddressOf(sWriteData), iBytesToWrite, AddressOf(iBytesWritten), FNULL)) to bOk
71111>>>>>            If (bOk = False) Begin
71113>>>>>                Move (fsGetLastError()) to iErrorNumber
71114>>>>>                If iErrorNumber Begin
71116>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71117>>>>>                End
71117>>>>>>
71117>>>>>            End
71117>>>>>>
71117>>>>>            If (iBytesToWrite <> iBytesWritten) Begin
71119>>>>>                Send Warning_box "Not all data could be written!"
71120>>>>>                Move False to bOk
71121>>>>>            End
71121>>>>>>
71121>>>>>        End
71121>>>>>>
71121>>>>>        Else Begin
71122>>>>>            Send Warning_Box FS_FILEHANDLEMISSING
71123>>>>>        End
71123>>>>>>
71123>>>>>        Function_Return bOk
71124>>>>>    End_Function
71125>>>>>
71125>>>>>    // Write HEX values to a binary file as bytes.
71125>>>>>    // HEX values in sWriteHEX are first coverted to bytes and then written
71125>>>>>    // to the binary file.
71125>>>>>    // Returns true if the HEX data was written to the file without error.
71125>>>>>    Function BinaryFileWriteHex Integer iFilenumer String ByRef sWriteHex Returns Boolean
71127>>>>>        String sData
71127>>>>>        Integer iLength iCount iByte
71127>>>>>        Boolean bOk
71127>>>>>        Move (Length(sWritehex)) to iLength
71128>>>>>        Move 1 to iCount
71129>>>>>        While (iCount < iLength)
71133>>>>>            Move ("$"+Mid(sWriteHex, 2, iCount)) to iByte
71134>>>>>            Move (iCount + 2) to iCount
71135>>>>>            Move (sData + Character(iByte)) to sData
71136>>>>>        Loop
71137>>>>>>
71137>>>>>        Get BinaryFileWrite iFilenumer (&sData) to bOk
71138>>>>>        Function_Return bOk
71139>>>>>    End_Function
71140>>>>>
71140>>>>>    // Retrives the file size from a binary file.
71140>>>>>    Function BinaryFileSize Integer iFilenumber Returns BigInt
71142>>>>>        BigInt biFilesize
71142>>>>>        Handle hFileHandle
71142>>>>>        Boolean bOk
71142>>>>>        Integer iErrorNumber
71142>>>>>        Set pbError to False
71143>>>>>        Move -1 to biFilesize
71144>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71145>>>>>        If hFileHandle Begin
71147>>>>>        // The LARGE_INTEGER structure has the same structure as a BigInt.
71147>>>>>            Move (fsGetFileSizeEx(hFileHandle, AddressOf(biFilesize))) to bOk
71148>>>>>            If (bOk = -False) Begin
71150>>>>>                Move (fsGetLastError()) to iErrorNumber
71151>>>>>                If iErrorNumber Begin
71153>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71154>>>>>                End
71154>>>>>>
71154>>>>>            End
71154>>>>>>
71154>>>>>        End
71154>>>>>>
71154>>>>>        Else Begin
71155>>>>>            Send warning_box FS_FILEHANDLEMISSING
71156>>>>>        End
71156>>>>>>
71156>>>>>        Function_Return biFilesize
71157>>>>>    End_Function
71158>>>>>
71158>>>>>    // Retrives the file position from a binary file.
71158>>>>>    // Returns -1 if an error occured.
71158>>>>>    Function BinaryFilePosition Integer iFilenumber Returns BigInt
71160>>>>>        BigInt biFilePosition biBigHi
71160>>>>>        Handle hFileHandle
71160>>>>>        Boolean bOk
71160>>>>>        Integer iErrorNumber iLo iHi
71160>>>>>        UInteger iNewPos
71160>>>>>
71160>>>>>        Set pbError to False
71161>>>>>        Move -1 to biFilePosition
71162>>>>>        Move 0 to iHi
71163>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71164>>>>>        If hFileHandle Begin
71166>>>>>            Move (2^32) to biBigHi
71167>>>>>            Move (fsSetFilePointer(hFileHandle, ilo, AddressOf(iHi), FILE_CURRENT)) to iNewPos
71168>>>>>            If (iNewPos = (biBigHi - 1)) Begin
71170>>>>>                Move (fsGetLastError()) to iErrorNumber
71171>>>>>                If iErrorNumber Begin
71173>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71174>>>>>                End
71174>>>>>>
71174>>>>>                Else Begin
71175>>>>>                    Move True to bOk
71176>>>>>                End
71176>>>>>>
71176>>>>>            End
71176>>>>>>
71176>>>>>            Else Begin
71177>>>>>                Move True to bOk
71178>>>>>            End
71178>>>>>>
71178>>>>>            If bOk Begin
71180>>>>>                Move ((iHi * biBigHi) + iNewPos) to biFilePosition
71181>>>>>            End
71181>>>>>>
71181>>>>>        End
71181>>>>>>
71181>>>>>        Else Begin
71182>>>>>            Send warning_box FS_FILEHANDLEMISSING
71183>>>>>        End
71183>>>>>>
71183>>>>>        Function_Return biFilePosition
71184>>>>>    End_Function
71185>>>>>
71185>>>>>    // Sets the file position from a binary file to a new position.
71185>>>>>    Procedure Set BinaryFilePosition Integer iFilenumber BigInt biPosition
71187>>>>>        Handle hFileHandle
71187>>>>>        Integer iHi iErrorNumber
71187>>>>>        UInteger iLo iNewPos
71187>>>>>        Boolean bOk
71187>>>>>        BigInt biFileSize biBigHi
71187>>>>>        structFile[] lsFile
71187>>>>>        structFile[] lsFile
71188>>>>>
71188>>>>>        Set pbError to False
71189>>>>>        Move False to bOk
71190>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71191>>>>>        If hFileHandle Begin
71193>>>>>            Move (2^32) to biBigHi
71194>>>>>            Move (biPosition / biBigHi) to iHi
71195>>>>>            Move (biPosition - (iHi * biBigHi)) to iLo
71196>>>>>            Move (fsSetFilePointer(hFileHandle, iLo, AddressOf(iHi), FILE_BEGIN)) to iNewPos
71197>>>>>            If (iNewPos = (biBigHi - 1)) Begin
71199>>>>>                Move (fsGetLastError()) to iErrorNumber
71200>>>>>                If iErrorNumber Begin
71202>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71203>>>>>                End
71203>>>>>>
71203>>>>>                Else Begin
71204>>>>>                    Move True to bOk
71205>>>>>                End
71205>>>>>>
71205>>>>>            End
71205>>>>>>
71205>>>>>            Else Begin
71206>>>>>                Move True to bOk
71207>>>>>            End
71207>>>>>>
71207>>>>>            If bOk Begin
71209>>>>>                Get BinaryFileSize iFilenumber to biFileSize
71210>>>>>                Get plsFile to lsFile
71211>>>>>                If (biFileSize > biPosition) Begin
71213>>>>>                    Move False to lsFile[iFilenumber].bEndOfFile
71214>>>>>                    Set pbEOF to False
71215>>>>>                End
71215>>>>>>
71215>>>>>                Else Begin
71216>>>>>                    Move True to lsFile[iFilenumber].bEndOfFile
71217>>>>>                    Set pbEOF to True
71218>>>>>                End
71218>>>>>>
71218>>>>>                Set plsFile to lsFile
71219>>>>>            End
71219>>>>>>
71219>>>>>        End
71219>>>>>>
71219>>>>>        Else Begin
71220>>>>>            Send warning_box FS_FILEHANDLEMISSING
71221>>>>>        End
71221>>>>>>
71221>>>>>        Set pbError to (not(bOk))
71222>>>>>    End_Procedure
71223>>>>>
71223>>>>>    // Returns -1 if an error occured.
71223>>>>>    Function BinaryFileCachedPosition Integer iFileNumber Returns BigInt
71225>>>>>        BigInt biPosition
71225>>>>>        structFileBufferPointer[] lsFileBufferPointer
71225>>>>>        structFileBufferPointer[] lsFileBufferPointer
71226>>>>>        Handle hFileHandle
71226>>>>>        Move -1 to biPosition
71227>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71228>>>>>        If hFileHandle Begin
71230>>>>>            Get plsCachedPointer to lsFileBufferPointer
71231>>>>>            If (iFilenumber < SizeOfArray(lsFileBufferPointer)) Begin
71233>>>>>                If (lsFileBufferPointer[iFileNumber].iBufferSize > 0) Begin
71235>>>>>                    Move (lsFileBufferPointer[iFileNumber].biFromFilePosition + lsFileBufferPointer[iFileNumber].iBufferPointer - 1) to biPosition
71236>>>>>                End
71236>>>>>>
71236>>>>>                Else Begin
71237>>>>>                    Get BinaryFilePosition iFileNumber to biPosition
71238>>>>>                End
71238>>>>>>
71238>>>>>            End
71238>>>>>>
71238>>>>>            Else Begin
71239>>>>>                Get BinaryFilePosition iFileNumber to biPosition
71240>>>>>            End
71240>>>>>>
71240>>>>>        End
71240>>>>>>
71240>>>>>        Else Begin
71241>>>>>            Send Warning_Box FS_FILEHANDLEMISSING
71242>>>>>        End
71242>>>>>>
71242>>>>>        Function_Return biPosition
71243>>>>>    End_Function
71244>>>>>
71244>>>>>    // Sets the pointer For the current file cache.
71244>>>>>    Procedure Set BinaryFileChachedPosition Integer iFileNumber BigInt biNewPosition
71246>>>>>        Handle hFileHandle
71246>>>>>        structFileBufferPointer[] lsFileBufferPointer
71246>>>>>        structFileBufferPointer[] lsFileBufferPointer
71247>>>>>        String[] saCachedBuffer
71248>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71249>>>>>        If hFileHandle Begin
71251>>>>>            Get plsCachedPointer to lsFileBufferPointer
71252>>>>>            If (lsFileBufferPointer[iFileNumber].biFromFilePosition > biNewPosition) Begin
71254>>>>>                Move 1 to lsFileBufferPointer[iFileNumber].iBufferPointer
71255>>>>>                Move 0 to lsFileBufferPointer[iFileNumber].iBufferSize
71256>>>>>                Set plsCachedPointer to lsFileBufferPointer
71257>>>>>                Set BinaryFilePosition iFileNumber to biNewPosition
71258>>>>>                Get psaCachedBuffer to saCachedBuffer
71259>>>>>                Move "" to saCachedBuffer[iFileNumber]
71260>>>>>                Set psaCachedBuffer to saCachedBuffer
71261>>>>>            End
71261>>>>>>
71261>>>>>            Else If ((lsFileBufferPointer[iFileNumber].biFromFilePosition + lsFileBufferPointer[iFileNumber].iBufferSize) < biNewPosition) Begin
71264>>>>>                Move 1 to lsFileBufferPointer[iFileNumber].iBufferPointer
71265>>>>>                Move 0 to lsFileBufferPointer[iFileNumber].iBufferSize
71266>>>>>                Set plsCachedPointer to lsFileBufferPointer
71267>>>>>                Set BinaryFilePosition iFileNumber to biNewPosition
71268>>>>>                Get psaCachedBuffer to saCachedBuffer
71269>>>>>                Move "" to saCachedBuffer[iFileNumber]
71270>>>>>                Set psaCachedBuffer to saCachedBuffer
71271>>>>>            End
71271>>>>>>
71271>>>>>            Else Begin
71272>>>>>                Move (biNewPosition - lsFileBufferPointer[iFileNumber].biFromFilePosition + 1) to lsFileBufferPointer[iFileNumber].iBufferPointer
71273>>>>>                Set plsCachedPointer to lsFileBufferPointer
71274>>>>>            End
71274>>>>>>
71274>>>>>        End
71274>>>>>>
71274>>>>>        Else Begin
71275>>>>>            Send warning_box FS_FILEHANDLEMISSING
71276>>>>>        End
71276>>>>>>
71276>>>>>    End_Procedure
71277>>>>>
71277>>>>>    // Truncate or extend a binary file to the specified file position
71277>>>>>    // by setting the binary file End Of File position.
71277>>>>>    // If biPosition is -1 the current file position is used as EOF position.
71277>>>>>    Procedure Set BinaryFileEndOfFile Integer iFilenumber BigInt biPosition
71279>>>>>        Handle hFileHandle
71279>>>>>        Boolean bError bOk
71279>>>>>        Integer iErrorNumber
71279>>>>>        structFile[] lsFile
71279>>>>>        structFile[] lsFile
71280>>>>>        Set pbError to False
71281>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71282>>>>>        If hFileHandle Begin
71284>>>>>            If (biPosition > -1) Begin
71286>>>>>                Set BinaryFilePosition iFilenumber to biPosition
71287>>>>>            End
71287>>>>>>
71287>>>>>            Get pbError to bError
71288>>>>>            If (bError = False) Begin
71290>>>>>                Move (fsSetEndOfFile(hFileHandle)) to bOk
71291>>>>>                If (bOk = False) Begin
71293>>>>>                    Move (fsGetLastError()) to iErrorNumber
71294>>>>>                    If iErrorNumber Begin
71296>>>>>                        Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71297>>>>>                    End
71297>>>>>>
71297>>>>>                End
71297>>>>>>
71297>>>>>                Else Begin
71298>>>>>                    Get plsFile to lsFile
71299>>>>>                    Move True to lsFile[iFilenumber].bEndOfFile
71300>>>>>                    Set plsFile to lsFile
71301>>>>>                    Set pbEOF to True
71302>>>>>                End
71302>>>>>>
71302>>>>>            End
71302>>>>>>
71302>>>>>        End
71302>>>>>>
71302>>>>>        Else Begin
71303>>>>>            Send warning_box FS_FILEHANDLEMISSING
71304>>>>>        End
71304>>>>>>
71304>>>>>        Set pbError to (not(bOk))
71305>>>>>    End_Procedure
71306>>>>>
71306>>>>>    // Returns true if the last read from the binary file had reached the end.
71306>>>>>    Function BinaryFileEndOfFile Integer iFilenumber Returns Boolean
71308>>>>>        structFile[] lsFile
71308>>>>>        structFile[] lsFile
71309>>>>>        Handle hFileHandle
71309>>>>>        Boolean bEndOfFile
71309>>>>>        Move True to bEndOfFile
71310>>>>>        Set pbError to False
71311>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71312>>>>>        If hFileHandle Begin
71314>>>>>            Get plsFile to lsFile
71315>>>>>            Move lsFile[iFilenumber].bEndOfFile to bEndOfFile
71316>>>>>        End
71316>>>>>>
71316>>>>>        Else Begin
71317>>>>>            Send warning_box FS_FILEHANDLEMISSING
71318>>>>>        End
71318>>>>>>
71318>>>>>        Function_Return bEndOfFile
71319>>>>>    End_Function
71320>>>>>
71320>>>>>    // Returns the filehandle from the filenumber.
71320>>>>>    // Returns 0 if the filenumber is not used.
71320>>>>>    Function BinaryFileHandle Integer iFilenumber Returns Handle
71322>>>>>        Handle hFileHandle
71322>>>>>        structFile[] lsFile
71322>>>>>        structFile[] lsFile
71323>>>>>        Get plsFile to lsFile
71324>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
71326>>>>>            Move lsFile[iFilenumber].hFilehandle to hFileHandle
71327>>>>>        End
71327>>>>>>
71327>>>>>        Function_Return hFileHandle
71328>>>>>    End_Function
71329>>>>>
71329>>>>>    // Searches For a file
71329>>>>>    // iMode = DIRMODE_FILES_ONLY (default)
71329>>>>>    // iMode = DIRMODE_DIRECTORIES_ONLY
71329>>>>>    // iMode = DIRMODE_FILES_AND_DIRECTORIES
71329>>>>>    // Returns True if found
71329>>>>>    Function FileExists String sFilePathMask Integer iFileDirMode Returns Boolean
71331>>>>>        Integer iMode
71331>>>>>        Boolean bFound
71331>>>>>        tsSearchResult[] lsResult
71331>>>>>        tsSearchResult[] lsResult
71332>>>>>        Move False to bFound
71333>>>>>        Set pbError to False
71334>>>>>        If (num_arguments < 2) Begin
71336>>>>>            Move DIRMODE_FILES_ONLY to iMode
71337>>>>>        End
71337>>>>>>
71337>>>>>        Else Begin
71338>>>>>            Move iFileDirMode to iMode
71339>>>>>        End
71339>>>>>>
71339>>>>>        Get FileSearch sFilePathMask iMode True to lsResult
71340>>>>>        If (SizeOfArray(lsResult) > 0) Begin
71342>>>>>            Move True to bFound
71343>>>>>        End
71343>>>>>>
71343>>>>>        Function_Return bFound
71344>>>>>    End_Function
71345>>>>>
71345>>>>>    // Deletes a file.
71345>>>>>    // Returns True if succeeds.
71345>>>>>    Function FileDelete String sFilename Integer iRetryAttempts Returns Boolean
71347>>>>>        Boolean bFound bDeleted
71347>>>>>        Integer iErrorNumber iRetryLeft
71347>>>>>
71347>>>>>        Set pbError to False
71348>>>>>        If (num_arguments > 1) Begin
71350>>>>>            Move iRetryAttempts to iRetryLeft
71351>>>>>        End
71351>>>>>>
71351>>>>>        Else Begin
71352>>>>>            Move 0 to iRetryLeft
71353>>>>>        End
71353>>>>>>
71353>>>>>        Get FileExists sFilename to bFound
71354>>>>>        If bFound Begin
71356>>>>>            Repeat
71356>>>>>>
71356>>>>>                Move (sFilename+(Character(0))) to sFilename
71357>>>>>                Move (fsDeleteFile(sFilename)) to bDeleted
71358>>>>>                If (bDeleted = False) Begin
71360>>>>>                    Decrement iRetryLeft
71361>>>>>                    If (iRetryLeft <= 0) Begin
71363>>>>>                        Move (fsGetLastError()) to iErrorNumber
71364>>>>>                        If iErrorNumber Begin
71366>>>>>                            Send DoShowError iErrorNumber ("Tried to delete file: "+sFilename)
71367>>>>>                        End
71367>>>>>>
71367>>>>>                    End
71367>>>>>>
71367>>>>>                    Else Begin
71368>>>>>                        Sleep 1
71369>>>>>                    End
71369>>>>>>
71369>>>>>                End
71369>>>>>>
71369>>>>>            Until (bDeleted = True or iRetryLeft <= 0)
71371>>>>>        End
71371>>>>>>
71371>>>>>        Function_Return bDeleted
71372>>>>>    End_Function
71373>>>>>
71373>>>>>    // Moves a file or directory.
71373>>>>>    // Returns True if succeeds.
71373>>>>>    Function FileMove String sExistingFileName String sNewFileName Integer iRetryAttempts Returns Boolean
71375>>>>>        Boolean bMoved
71375>>>>>        Integer iErrorNumber iRetryLeft
71375>>>>>
71375>>>>>        Set pbError to False
71376>>>>>        If (num_arguments > 2) Begin
71378>>>>>            Move iRetryAttempts to iRetryLeft
71379>>>>>        End
71379>>>>>>
71379>>>>>        Else Begin
71380>>>>>            Move 0 to iRetryLeft
71381>>>>>        End
71381>>>>>>
71381>>>>>        Move (sExistingFilename+(Character(0))) to sExistingFilename
71382>>>>>        Move (sNewFileName+(Character(0)))      to sNewFileName
71383>>>>>        Repeat
71383>>>>>>
71383>>>>>            Move (fsMoveFile(sExistingFilename, sNewFileName)) to bMoved
71384>>>>>            If (bMoved = False) Begin
71386>>>>>                Decrement iRetryLeft
71387>>>>>                If (iRetryLeft <= 0) Begin
71389>>>>>                    Move (fsGetLastError()) to iErrorNumber
71390>>>>>                    If iErrorNumber Begin
71392>>>>>                        Send DoShowError iErrorNumber ("Tried to move/rename file: "+sExistingFileName+" to "+sNewFileName)
71393>>>>>                    End
71393>>>>>>
71393>>>>>                End
71393>>>>>>
71393>>>>>                Else Begin
71394>>>>>                    Sleep 1
71395>>>>>                End
71395>>>>>>
71395>>>>>            End
71395>>>>>>
71395>>>>>        Until (bMoved = True or iRetryLeft <= 0)
71397>>>>>        Function_Return bMoved
71398>>>>>    End_Function
71399>>>>>
71399>>>>>    // Copies a file. Overwriting an existing file by default.
71399>>>>>    // Returns True if succeeds.
71399>>>>>    Function FileCopy String sExistingFileName String sNewFileName Boolean bFailIfExists Integer iRetryAttempts Returns Boolean
71401>>>>>        Boolean bCopied
71401>>>>>        Boolean bDoNotOverwrite
71401>>>>>        Integer iErrorNumber iRetryLeft
71401>>>>>        Set pbError to False
71402>>>>>        Move (sExistingFileName+(Character(0))) to sExistingFileName
71403>>>>>        Move (sNewFileName+(Character(0)))      to sNewFileName
71404>>>>>        If (Num_Arguments > 2) Begin
71406>>>>>            Move bFailIfExists to bDoNotOverwrite
71407>>>>>        End
71407>>>>>>
71407>>>>>        Else Begin
71408>>>>>            Move False to bDoNotOverwrite
71409>>>>>        End
71409>>>>>>
71409>>>>>        If (num_arguments > 3) Begin
71411>>>>>            Move iRetryAttempts to iRetryLeft
71412>>>>>        End
71412>>>>>>
71412>>>>>        Else Begin
71413>>>>>            Move 0 to iRetryLeft
71414>>>>>        End
71414>>>>>>
71414>>>>>        Repeat
71414>>>>>>
71414>>>>>            Move (fsCopyFile(sExistingFileName, sNewFileName, bDoNotOverwrite)) to bCopied
71415>>>>>            If (bCopied = False) Begin
71417>>>>>                Decrement iRetryLeft
71418>>>>>                If (iRetryLeft <= 0) Begin
71420>>>>>                    Move (fsGetLastError()) to iErrorNumber
71421>>>>>                    If iErrorNumber Begin
71423>>>>>                        Send DoShowError iErrorNumber ("Tried to copy file: "+sExistingFileName+" to "+sNewFileName)
71424>>>>>                    End
71424>>>>>>
71424>>>>>                End
71424>>>>>>
71424>>>>>                Else Begin
71425>>>>>                    Sleep 1
71426>>>>>                End
71426>>>>>>
71426>>>>>            End
71426>>>>>>
71426>>>>>        Until (bCopied = True or iRetryLeft <= 0)
71428>>>>>        Function_Return bCopied
71429>>>>>    End_Function
71430>>>>>
71430>>>>>    // Renames a file or directory.
71430>>>>>    // Returns True if succeeds.
71430>>>>>    Function FileRename String sExistingFileName String sNewFileName Integer iRetryAttempts Returns Boolean
71432>>>>>        Boolean bRenamed
71432>>>>>        If (num_arguments > 2) Begin
71434>>>>>            Get FileMove sExistingFileName sNewFileName iRetryAttempts to bRenamed
71435>>>>>        End
71435>>>>>>
71435>>>>>        Else Begin
71436>>>>>            Get FileMove sExistingFileName sNewFileName to bRenamed
71437>>>>>        End
71437>>>>>>
71437>>>>>        Function_Return bRenamed
71438>>>>>    End_Function
71439>>>>>
71439>>>>>    // Returns the file size of a file.
71439>>>>>    // Returns -1 if an error occured.
71439>>>>>    // Use *this* instead of FileSize as it works for both 32 bit as well as 64 bit and can
71439>>>>>    // always return filesizes over 2GB.
71439>>>>>    Function FileSizeEx String sFilename Returns Bigint
71441>>>>>        tsSearchResult[] lsSearchResult
71441>>>>>        tsSearchResult[] lsSearchResult
71442>>>>>        BigInt iRetval
71442>>>>>        Get FileSearch sFilename DIRMODE_FILES_ONLY to lsSearchResult
71443>>>>>        If (SizeOfArray(lsSearchResult) > 0) Begin
71445>>>>>            Move lsSearchResult[0].biFileSize to iRetval
71446>>>>>        End
71446>>>>>>
71446>>>>>        Else Begin
71447>>>>>            Move -1 to iRetval
71448>>>>>        End
71448>>>>>>
71448>>>>>        Function_Return iRetval
71449>>>>>    End_Function
71450>>>>>
71450>>>>>//
71450>>>>>// Check your source code to see if it uses the filesize function and if it does, change it to FileSizeEx
71450>>>>>// Once you verified that you are no longer using filesize, then add the following line to your code.
71450>>>>>//
71450>>>>>// // Source is not using obsolete filesize function
71450>>>>>// Define no_cFileSystem_filesize_here
71450>>>>>//
71450>>>>>// and the warning is resolved.
71450>>>>>    // Returns the file size of a file.
71450>>>>>    // Returns -1 if an error occured.
71450>>>>>    // ** Don't USE THIS, but FileSizeEx above as this only works correctly for 64 bit.
71450>>>>>    Function FileSize String sFilename Returns Longptr
71452>>>>>      BigInt biSize
71452>>>>>//      #Warning 12234 "FileSize is now obsolete, check your code and set no_cFileSystem_filesize_here compiler directive to remove"
71452>>>>>      Get FileSizeEx sFilename to biSize
71453>>>>>      Function_Return biSize
71454>>>>>    End_Function
71455>>>>>
71455>>>>>    // Returns the last write date of a file.
71455>>>>>    // Returns 0 if an error occured.
71455>>>>>    Function FileDate String sFilename Returns Date
71457>>>>>        tsSearchResult[] lsSearchResult
71457>>>>>        tsSearchResult[] lsSearchResult
71458>>>>>        Date dDate
71458>>>>>        Move 0 to dDate
71459>>>>>        Get FileSearch sFilename DIRMODE_FILES_ONLY to lsSearchResult
71460>>>>>        If (SizeOfArray(lsSearchResult) > 0) Begin
71462>>>>>            Move lsSearchResult[0].dtLastWriteDateTime to dDate
71463>>>>>        End
71463>>>>>>
71463>>>>>        Function_Return dDate
71464>>>>>    End_Function
71465>>>>>
71465>>>>>    // Returns the fileversion info.
71465>>>>>    // Returns false if an error occured.
71465>>>>>    Function FileVersion String sFilename tsFileVersionInfo ByRef lsFileVersionInfo Returns Boolean
71467>>>>>        Boolean bOk
71467>>>>>        Integer iErrorNumber iStatus
71467>>>>>        Get _FileVersion sFilename (&lsFileVersionInfo) to iStatus
71468>>>>>        If (iStatus = -1) Begin
71470>>>>>            Move (fsGetLastError()) to iErrorNumber
71471>>>>>            If iErrorNumber Begin
71473>>>>>                Send DoShowError iErrorNumber ("Tried to get fileversion info from file: "+sFilename)
71474>>>>>            End
71474>>>>>>
71474>>>>>        End
71474>>>>>>
71474>>>>>        Move (iStatus = 0) to bOk
71475>>>>>        Function_Return bOk
71476>>>>>    End_Function
71477>>>>>
71477>>>>>    Function _FileVersion String sFilename tsFileVersionInfo ByRef lsFileVersionInfo Returns Integer
71479>>>>>        tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
71479>>>>>        tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
71479>>>>>        UInteger iBytesNeeded
71479>>>>>        Address aBuffer
71479>>>>>        Boolean bOk
71479>>>>>        String sSubBlock
71479>>>>>        DWord dwBufferLen dwBufferPointer
71479>>>>>        tsLandAndCodePage lsLandAndCodePage
71479>>>>>        tsLandAndCodePage lsLandAndCodePage
71479>>>>>        Move (sFilename + (Character(0))) to sFilename
71480>>>>>        Move 0 to iBytesNeeded
71481>>>>>        Move 0 to aBuffer
71482>>>>>        Move 0 to lsFIXEDFILEINFO.dwStrucVersion    // Initialize the variable.
71483>>>>>        Move 0 to lsLandAndCodePage.wCodePage
71484>>>>>        Move (fsGetFileVersionInfoSize(sFilename, 0)) to iBytesNeeded
71485>>>>>        If (iBytesNeeded = 0) Begin
71487>>>>>            Function_Return False
71488>>>>>        End
71488>>>>>>
71488>>>>>        Move False to bOk
71489>>>>>        Move (Alloc(iBytesNeeded)) to aBuffer
71490>>>>>        Move (MemSet(aBuffer, 0, iBytesNeeded)) to bOk
71491>>>>>        Move (fsGetFileVersionInfo(sFilename, 0, iBytesNeeded, aBuffer)) to bOk
71492>>>>>        If (not(bOk)) Begin
71494>>>>>            Move (Free(aBuffer)) to bOk
71495>>>>>            Function_Return -1
71496>>>>>        End
71496>>>>>>
71496>>>>>        Move "\" to sSubBlock
71497>>>>>        Move (sSubBlock + (Character(0))) to sSubBlock
71498>>>>>        Move 0 to dwBufferLen
71499>>>>>        Move 0 to dwBufferPointer
71500>>>>>        Move (fsVerQueryValue(aBuffer, sSubBlock, AddressOf(dwBufferPointer), AddressOf(dwBufferLen))) to bOk
71501>>>>>        If (not(bOk)) Begin
71503>>>>>            Move (Free(aBuffer)) to bOk
71504>>>>>            Function_Return -1
71505>>>>>        End
71505>>>>>>
71505>>>>>        If (dwBufferLen <> 52) Begin
71507>>>>>            Send warning_box (SFormat("Length of bufferdata For VS_FIXEDFILEINFO struct are not in the expected size.\nLength is %1 and should have been 52.", dwBufferLen))
71508>>>>>            Move (Free(aBuffer)) to bOk
71509>>>>>            Function_Return -2
71510>>>>>        End
71510>>>>>>
71510>>>>>        Move (MemCopy(AddressOf(lsFIXEDFILEINFO), dwBufferPointer, dwBufferLen)) to bOk
71511>>>>>        If (not(bOk)) Begin
71513>>>>>            Move (Free(aBuffer)) to bOk
71514>>>>>            Function_Return -1
71515>>>>>        End
71515>>>>>>
71515>>>>>        Move lsFIXEDFILEINFO to lsFileVersionInfo.lsFIXEDFILEINFO
71516>>>>>        Get ConvertFileTimeToLocalDateTime lsFIXEDFILEINFO.ubiFileDate to lsFileVersionInfo.dtCreationDateTime
71517>>>>>        Move (Hi(lsFIXEDFILEINFO.dwFileVersionMS)) to lsFileVersionInfo.siFileVersion[0]
71518>>>>>        Move (Low(lsFIXEDFILEINFO.dwFileVersionMS)) to lsFileVersionInfo.siFileVersion[1]
71519>>>>>        Move (Hi(lsFIXEDFILEINFO.dwFileVersionLS)) to lsFileVersionInfo.siFileVersion[2]
71520>>>>>        Move (Low(lsFIXEDFILEINFO.dwFileVersionLS)) to lsFileVersionInfo.siFileVersion[3]
71521>>>>>        Move (Hi(lsFIXEDFILEINFO.dwProductVersionMS)) to lsFileVersionInfo.siProductVersion[0]
71522>>>>>        Move (Low(lsFIXEDFILEINFO.dwProductVersionMS)) to lsFileVersionInfo.siProductVersion[1]
71523>>>>>        Move (Hi(lsFIXEDFILEINFO.dwProductVersionLS)) to lsFileVersionInfo.siProductVersion[2]
71524>>>>>        Move (Low(lsFIXEDFILEINFO.dwProductVersionLS)) to lsFileVersionInfo.siProductVersion[3]
71525>>>>>        Move "\VarFileInfo\Translation" to sSubBlock
71526>>>>>        Move (sSubBlock + (Character(0))) to sSubBlock
71527>>>>>        Move 0 to dwBufferLen
71528>>>>>        Move 0 to dwBufferPointer
71529>>>>>        Move (fsVerQueryValue(aBuffer, sSubBlock, AddressOf(dwBufferPointer), AddressOf(dwBufferLen))) to bOk
71530>>>>>        If (not(bOk)) Begin
71532>>>>>            Move (Free(aBuffer)) to bOk
71533>>>>>            Function_Return -1
71534>>>>>        End
71534>>>>>>
71534>>>>>        If (dwBufferLen <> 4) Begin
71536>>>>>            Send warning_box (SFormat("Length of bufferdata For land and codepage numbers are not in the expected size.\nLength is %1 and should have been 4.", dwBufferLen))
71537>>>>>            Move (Free(aBuffer)) to bOk
71538>>>>>            Function_Return -2
71539>>>>>        End
71539>>>>>>
71539>>>>>        Move (MemCopy(AddressOf(lsLandAndCodePage), dwBufferPointer, dwBufferLen)) to bOk
71540>>>>>        Get VerQueryValueStringFileInfo aBuffer "Comments" lsLandAndCodePage to lsFileVersionInfo.sComments
71541>>>>>        Get VerQueryValueStringFileInfo aBuffer "CompanyName" lsLandAndCodePage to lsFileVersionInfo.sCompanyName
71542>>>>>        Get VerQueryValueStringFileInfo aBuffer "FileDescription" lsLandAndCodePage to lsFileVersionInfo.sFileDescription
71543>>>>>        Get VerQueryValueStringFileInfo aBuffer "FileVersion" lsLandAndCodePage to lsFileVersionInfo.sFileVersion
71544>>>>>        Get VerQueryValueStringFileInfo aBuffer "InternalName" lsLandAndCodePage to lsFileVersionInfo.sInternalName
71545>>>>>        Get VerQueryValueStringFileInfo aBuffer "LegalCopyright" lsLandAndCodePage to lsFileVersionInfo.sLegalCopyright
71546>>>>>        Get VerQueryValueStringFileInfo aBuffer "LegalTrademarks" lsLandAndCodePage to lsFileVersionInfo.sLegalTrademarks
71547>>>>>        Get VerQueryValueStringFileInfo aBuffer "OriginalFilename" lsLandAndCodePage to lsFileVersionInfo.sOriginalFilename
71548>>>>>        Get VerQueryValueStringFileInfo aBuffer "ProductName" lsLandAndCodePage to lsFileVersionInfo.sProductName
71549>>>>>        Get VerQueryValueStringFileInfo aBuffer "ProductVersion" lsLandAndCodePage to lsFileVersionInfo.sProductVersion
71550>>>>>        Get VerQueryValueStringFileInfo aBuffer "PrivateBuild" lsLandAndCodePage to lsFileVersionInfo.sPrivateBuild
71551>>>>>        Get VerQueryValueStringFileInfo aBuffer "SpecialBuild" lsLandAndCodePage to lsFileVersionInfo.sSpecialBuild
71552>>>>>        Move (Free(aBuffer)) to bOk
71553>>>>>        Function_Return 0
71554>>>>>    End_Function
71555>>>>>
71555>>>>>    // Convert an short integer to a 4-character hex string.
71555>>>>>    Function ShortToHex Short siValue Returns String
71557>>>>>        String sHex
71557>>>>>        Move "" to sHex
71558>>>>>        Repeat
71558>>>>>>
71558>>>>>            Move (Mid ("0123456789ABCDEF", 1, ((siValue iand |CI$0F) + 1)) + sHex) to sHex
71559>>>>>            Move (siValue / |CI$10) to siValue
71560>>>>>        Until (siValue = 0)
71562>>>>>        Move (Right("0000" + sHex, 4)) to sHex
71563>>>>>        Function_Return sHex
71564>>>>>    End_Function
71565>>>>>
71565>>>>>    Function VerQueryValueStringFileInfo Address aBuffer String sInfoName tsLandAndCodePage lsLandAndCodePage Returns String
71567>>>>>        String sSubBlock
71567>>>>>        String sValue
71567>>>>>        DWord dwBufferLen dwBufferPointer
71567>>>>>        Boolean bOk
71567>>>>>        WString wValue
71567>>>>>        Move (SFormat("\StringFileInfo\%1%2\%3", ShortToHex(Self, lsLandAndCodePage.wLanguage), ShortToHex(Self, lsLandAndCodePage.wCodePage), sInfoName)) to sSubBlock
71568>>>>>        Move (sSubBlock + (Character(0))) to sSubBlock
71569>>>>>        Move 0 to dwBufferLen
71570>>>>>        Move 0 to dwBufferPointer
71571>>>>>        Move (fsVerQueryValue(aBuffer, sSubBlock, AddressOf(dwBufferPointer), AddressOf(dwBufferLen))) to bOk
71572>>>>>        If (not(bOk)) Begin
71574>>>>>            Function_Return ""
71575>>>>>        End
71575>>>>>>
71575>>>>>        Move (ZeroString(dwBufferLen)) to wValue  // size is in bytes, so we are reserving too much space
71576>>>>>        Move (MemCopy(AddressOf(wValue), dwBufferPointer, dwBufferLen)) to bOk  // memcopy copies the correct amount though
71577>>>>>        Move (CString(wValue)) To sValue
71578>>>>>        Function_Return sValue
71579>>>>>    End_Function
71580>>>>>
71580>>>>>    // Returns the file extention without the leading "."
71580>>>>>    // Example sFile = "x:\text.txt". The function returns "txt".
71580>>>>>    Function FileExtention String sFilename Returns String
71582>>>>>        String sExtention
71582>>>>>        Integer iPos
71582>>>>>        Move (RightPos(".", sFilename)) to iPos
71583>>>>>        If (iPos > 0) Begin
71585>>>>>            Move (Right(sFilename, (Length(sFilename) - iPos))) to sExtention
71586>>>>>            If (sExtention contains "\" or sExtention contains " ") Begin
71588>>>>>                Move "" to sExtention
71589>>>>>            End
71589>>>>>>
71589>>>>>        End
71589>>>>>>
71589>>>>>        Function_Return sExtention
71590>>>>>    End_Function
71591>>>>>
71591>>>>>    // Gets a handle to an icon stored as a resource in a file or an icon
71591>>>>>    // stored in a file's associated executable file.
71591>>>>>    // When the icon handle is no longer needed, close it by using the DestroyFileIcon procedure.
71591>>>>>    Function FileIcon String sFilename Returns Handle
71593>>>>>        Handle hIcon
71593>>>>>        Integer iIcon
71593>>>>>        Address aFilename
71593>>>>>        WString wFileName
71593>>>>>        Move (Pad(sFilename, MAX_PATH)) to wFilename
71594>>>>>        Move (AddressOf(wFileName)) To aFileName
71595>>>>>        Move 0 to iIcon
71596>>>>>        Move (fsExtractAssociatedIcon(0, aFilename, AddressOf(iIcon))) to hIcon
71597>>>>>        Function_Return hIcon
71598>>>>>    End_Function
71599>>>>>
71599>>>>>    // Destroy hIcon, created from FileIcon.
71599>>>>>    Procedure DestroyFileIcon Handle hIcon
71601>>>>>        Integer iResult
71601>>>>>        If (hIcon <> 0) Begin
71603>>>>>            Move (fsDestroyIcon(hIcon)) to iResult
71604>>>>>        End
71604>>>>>>
71604>>>>>    End_Procedure
71605>>>>>
71605>>>>>    // Search a directory For the files with normal windows mask-signs
71605>>>>>    // Returns an array of matching files and directories
71605>>>>>    // iMode = DIRMODE_FILES_ONLY
71605>>>>>    // iMode = DIRMODE_DIRECTORIES_ONLY
71605>>>>>    // iMode = DIRMODE_FILES_AND_DIRECTORIES (default)
71605>>>>>    // If bReturnOnlyOne is true only one search result item is returned.
71605>>>>>    // If bReturnOnlyOne is true and no items where found no error is shown.
71605>>>>>    Function FileSearch String sFilePathMask Integer iFileDirMode Boolean bReturnOnlyOne Returns tsSearchResult[]
71607>>>>>        tsSearchResult[] lsSearchResult
71607>>>>>        tsSearchResult[] lsSearchResult
71608>>>>>        Integer iSearchResultCount iMode iErrorNumber
71608>>>>>        structWFD lsFindData
71608>>>>>        structWFD lsFindData
71608>>>>>        Handle hFindFile
71608>>>>>        Boolean bError bStop bFound bOk bOnlyOne
71608>>>>>        BigInt biBigHi
71608>>>>>        Address aFileName
71608>>>>>
71608>>>>>        If (num_arguments < 2) Begin
71610>>>>>            Move DIRMODE_FILES_AND_DIRECTORIES to iMode
71611>>>>>        End
71611>>>>>>
71611>>>>>        Else Begin
71612>>>>>            Move iFileDirMode to iMode
71613>>>>>        End
71613>>>>>>
71613>>>>>        If (num_arguments < 3) Begin
71615>>>>>            Move False to bOnlyOne
71616>>>>>        End
71616>>>>>>
71616>>>>>        Else Begin
71617>>>>>            Move bReturnOnlyOne to bOnlyOne
71618>>>>>        End
71618>>>>>>
71618>>>>>        Move (sFilePathMask+Character(0)) To sFilePathMask
71619>>>>>        Move 0 To lsFindData.dwFileAttributes   // Initialize lsFindData
71620>>>>>        Move (fsFindFirstFile(sFilePathMask, AddressOf(lsFindData))) to hFindFile
71621>>>>>        If (hFindFile <> INVALID_HANDLE_VALUE) Begin
71623>>>>>            Move False to bError
71624>>>>>            Move False to bStop
71625>>>>>            Move (2^32) to biBigHi
71626>>>>>            Set pbError to bError
71627>>>>>            While (bError = False and bStop = False)
71631>>>>>                Move False to bFound
71632>>>>>                Case Begin
71632>>>>>                    Case (iMode = DIRMODE_FILES_ONLY)
71634>>>>>                        If (lsFindData.dwFileAttributes iand FILE_ATTRIBUTE_DIRECTORY = 0) Begin
71636>>>>>                            Move True to bFound
71637>>>>>                        End
71637>>>>>>
71637>>>>>                        Case Break
71638>>>>>                    Case (iMode = DIRMODE_DIRECTORIES_ONLY)
71641>>>>>                        If (lsFindData.dwFileAttributes iand FILE_ATTRIBUTE_DIRECTORY = FILE_ATTRIBUTE_DIRECTORY) Begin
71643>>>>>                            Move True to bFound
71644>>>>>                        End
71644>>>>>>
71644>>>>>                        Case Break
71645>>>>>                    Case Else
71645>>>>>                        Move True to bFound
71646>>>>>                        Case Break
71647>>>>>                Case End
71647>>>>>                If bFound Begin
71649>>>>>                    Move (AddressOf(lsFindData.cFileName)) to aFilename
71650>>>>>                    Move (PointerToWString(aFilename)) to lsSearchResult[iSearchResultCount].sFilename
71651>>>>>                    Move (AddressOf(lsFindData.cAlternateFileName)) to aFilename
71652>>>>>                    Move (PointerToWString(aFilename)) to lsSearchResult[iSearchResultCount].sAlternateFileName
71653>>>>>                    Move lsFindData.dwFileAttributes to lsSearchResult[iSearchResultCount].iFileAttributes
71654>>>>>                    Get ConvertFileTimeToLocalDateTime lsFindData.ftCreationDateTime to lsSearchResult[iSearchResultCount].dtCreationDateTime
71655>>>>>                    Get ConvertFileTimeToLocalDateTime lsFindData.ftLastAccessDateTime to lsSearchResult[iSearchResultCount].dtLastAccessDateTime
71656>>>>>                    Get ConvertFileTimeToLocalDateTime lsFindData.ftLastWriteDateTime to lsSearchResult[iSearchResultCount].dtLastWriteDateTime
71657>>>>>                    Move ((lsFindData.nFileSizeHigh * biBigHi) + lsFindData.nFileSizeLow) to lsSearchResult[iSearchResultCount].biFileSize
71658>>>>>                    Increment iSearchResultCount
71659>>>>>                    If bOnlyOne Begin
71661>>>>>                        Move True to bStop
71662>>>>>                    End
71662>>>>>>
71662>>>>>                End
71662>>>>>>
71662>>>>>                If (bStop = False) Begin
71664>>>>>                    Move (fsFindNextFile(hFindFile, AddressOf(lsFindData))) to bOk
71665>>>>>                End
71665>>>>>>
71665>>>>>                If (bOk = False) Begin
71667>>>>>                    Move True to bStop
71668>>>>>                    If (bOnlyOne = False) Begin
71670>>>>>                        Move (fsGetLastError()) to iErrorNumber
71671>>>>>                        If (iErrorNumber <> ERROR_NO_MORE_FILES and iErrorNumber <> ERROR_MOD_NOT_FOUND and iErrorNumber <> 0) Begin
71673>>>>>                            Send DoShowError iErrorNumber ("Search path: "+sFilePathMask)
71674>>>>>                        End
71674>>>>>>
71674>>>>>                    End
71674>>>>>>
71674>>>>>                End
71674>>>>>>
71674>>>>>                Get pbError to bError
71675>>>>>            Loop
71676>>>>>>
71676>>>>>            Move (fsFindClose(hFindFile)) to bOk
71677>>>>>        End
71677>>>>>>
71677>>>>>        Function_Return lsSearchResult
71678>>>>>    End_Function
71679>>>>>
71679>>>>>    // Search a directory and all subdirectories For the files with normal windows mask-signs.
71679>>>>>    // lsResult[?].sFileName contains full path and filename.
71679>>>>>    // iMode = DIRMODE_FILES_ONLY
71679>>>>>    // iMode = DIRMODE_DIRECTORIES_ONLY
71679>>>>>    // iMode = DIRMODE_FILES_AND_DIRECTORIES (default)
71679>>>>>    Function FileSearchRecursive String sFilePathMask Integer iFileDirMode Boolean bReturnOnlyOne Returns tsSearchResult[]
71681>>>>>        Integer iMode
71681>>>>>        Boolean bOnlyOne
71681>>>>>        tsSearchResult[] lsFinalResult lsSearchResult
71681>>>>>        tsSearchResult[] lsFinalResult lsSearchResult
71683>>>>>        If (num_arguments < 2) Begin
71685>>>>>            Move DIRMODE_FILES_AND_DIRECTORIES to iMode
71686>>>>>        End
71686>>>>>>
71686>>>>>        Else Begin
71687>>>>>            Move iFileDirMode to iMode
71688>>>>>        End
71688>>>>>>
71688>>>>>        If (num_arguments < 3) Begin
71690>>>>>            Move False to bOnlyOne
71691>>>>>        End
71691>>>>>>
71691>>>>>        Else Begin
71692>>>>>            Move bReturnOnlyOne to bOnlyOne
71693>>>>>        End
71693>>>>>>
71693>>>>>        Get FileSearchRecursivePriv sFilePathMask iMode bOnlyOne (&lsFinalResult) to lsSearchResult
71694>>>>>        Function_Return lsFinalResult
71695>>>>>    End_Function
71696>>>>>
71696>>>>>    // Private
71696>>>>>    Function FileSearchRecursivePriv String sFilePathMask Integer iFileDirMode Boolean bReturnOnlyOne tsSearchResult[] ByRef lsFinalResult Returns tsSearchResult[]
71698>>>>>        tsSearchResult[] lsSearchResultDir lsSearchResult
71698>>>>>        tsSearchResult[] lsSearchResultDir lsSearchResult
71700>>>>>        Integer iMax iCnt iLast iFinalMax
71700>>>>>        String sSearchInDir sFileMask
71700>>>>>        Boolean bStop
71700>>>>>        
71700>>>>>        Move False to bStop
71701>>>>>        Move (RightPos("\", sFilePathMask)) to iLast
71702>>>>>        If (iLast > 0) Begin
71704>>>>>            Move (Left(sFilePathMask, iLast - 1)) to sSearchInDir
71705>>>>>            Move (Mid(sFilePathMask, Length(sFilePathMask), iLast + 1)) to sFileMask
71706>>>>>        End
71706>>>>>>
71706>>>>>        Get FileSearch (sSearchInDir + "\*.*") DIRMODE_DIRECTORIES_ONLY to lsSearchResultDir
71707>>>>>        Move (SizeOfArray(lsSearchResultDir)) to iMax
71708>>>>>        Move 0 to iCnt
71709>>>>>        While (iCnt < iMax and bStop = False)
71713>>>>>            If (lsSearchResultDir[iCnt].sFilename <> "." and lsSearchResultDir[iCnt].sFilename <> "..") Begin
71715>>>>>                Get FileSearchRecursivePriv (sSearchInDir + "\" + lsSearchResultDir[iCnt].sFilename + "\" + sFileMask) iFileDirMode bReturnOnlyOne (&lsFinalResult) to lsSearchResult
71716>>>>>            End
71716>>>>>>
71716>>>>>            Increment iCnt
71717>>>>>            If (bReturnOnlyOne = True) Begin
71719>>>>>                If (SizeOfArray(lsFinalResult) > 0) Begin
71721>>>>>                    Move True to bStop
71722>>>>>                End
71722>>>>>>
71722>>>>>            End
71722>>>>>>
71722>>>>>        Loop
71723>>>>>>
71723>>>>>        If (bStop = False) Begin
71725>>>>>            Get FileSearch sFilePathMask iFileDirMode to lsSearchResult
71726>>>>>            Move (SizeOfArray(lsSearchResult)) to iMax
71727>>>>>            Move (SizeOfArray(lsFinalResult)) to iFinalMax
71728>>>>>            Move 0 to iCnt
71729>>>>>            While (iCnt < iMax and bStop = False)
71733>>>>>                Move lsSearchResult[iCnt] to lsFinalResult[iFinalMax]
71734>>>>>                Move (sSearchInDir + "\" + lsSearchResult[iCnt].sFilename) to lsFinalResult[iFinalMax].sFilename
71735>>>>>                Increment iFinalMax
71736>>>>>                Increment iCnt
71737>>>>>                If (bReturnOnlyOne = True) Begin
71739>>>>>                    If (SizeOfArray(lsFinalResult) > 0) Begin
71741>>>>>                        Move True to bStop
71742>>>>>                    End
71742>>>>>>
71742>>>>>                End
71742>>>>>>
71742>>>>>            Loop
71743>>>>>>
71743>>>>>        End
71743>>>>>>
71743>>>>>        Function_Return lsSearchResult
71744>>>>>    End_Function
71745>>>>>
71745>>>>>    // Finds a list of files.
71745>>>>>    // sSearchFiles is a list of files to search For separated by semicolon (;).
71745>>>>>    // sSearchFiles may not contain paths but may contain wildcards.
71745>>>>>    // sSearchPaths may only contain paths.
71745>>>>>    // Returns a string array with the files
71745>>>>>    // Returns only files with full path.
71745>>>>>    // Use:
71745>>>>>    // Get ListOfFiles "path1;path2" "*.txt;*.asc"
71745>>>>>    // This will return all the .txt and .asc files with full path that exists in path1 and path2.
71745>>>>>    Function ListOfFiles String sSearchPaths String sSearchFiles Returns String[]
71747>>>>>        String[] saFileList
71748>>>>>        Integer iFilelistCount iSearchFilesCount iCurSearchFile
71748>>>>>        Integer iSearchPathsCount iCurSearchPath iFilesFound iCurFileFound
71748>>>>>        String sCurSearchFile sCurSearchPath
71748>>>>>        tsSearchResult[] lsSearchResult
71748>>>>>        tsSearchResult[] lsSearchResult
71749>>>>>        Get CountOfFields sSearchPaths to iSearchPathsCount
71750>>>>>        Get CountOfFields sSearchFiles to iSearchFilesCount
71751>>>>>        If (iSearchFilesCount > 0 and iSearchPathsCount > 0) Begin
71753>>>>>            For iCurSearchFile from 1 to iSearchFilesCount
71759>>>>>>
71759>>>>>                Get FieldAtIndex sSearchFiles iCurSearchFile to sCurSearchFile
71760>>>>>                Move (Trim(sCurSearchFile)) to sCurSearchFile
71761>>>>>                If (sCurSearchFile <> "") Begin
71763>>>>>                    For iCurSearchPath from 1 to iSearchPathsCount
71769>>>>>>
71769>>>>>                        Get FieldAtIndex sSearchPaths iCurSearchPath to sCurSearchPath
71770>>>>>                        If (Right(sCurSearchPath, 1) <> "\") Begin
71772>>>>>                            Move (sCurSearchPath + "\") to sCurSearchPath
71773>>>>>                        End
71773>>>>>>
71773>>>>>                        Get FileSearch (sCurSearchPath + sCurSearchFile) DIRMODE_FILES_ONLY to lsSearchResult
71774>>>>>                        Move (SizeOfArray(lsSearchResult)) to iFilesFound
71775>>>>>                        Decrement iFilesFound
71776>>>>>                        For iCurFileFound from 0 to iFilesFound
71782>>>>>>
71782>>>>>                            Move (sCurSearchPath + lsSearchResult[iCurFileFound].sFilename) to saFileList[iFilelistCount]
71783>>>>>                            Increment iFilelistCount
71784>>>>>                        Loop
71785>>>>>>
71785>>>>>                    Loop
71786>>>>>>
71786>>>>>                End
71786>>>>>>
71786>>>>>            Loop
71787>>>>>>
71787>>>>>        End
71787>>>>>>
71787>>>>>        Function_Return saFileList
71788>>>>>    End_Function
71789>>>>>
71789>>>>>    // Get Windows Temp path
71789>>>>>    Function FileTempPath Returns String
71791>>>>>        Integer iRetVal
71791>>>>>        String  sTempPath
71791>>>>>        WString wTempPath
71791>>>>>        Move (ZeroString(MAX_PATH)) to wTempPath
71792>>>>>        Move (fsGetTempPath(MAX_PATH, AddressOf(wTempPath))) to iRetVal
71793>>>>>        If (iRetVal > MAX_PATH) Begin
71795>>>>>            Move (ZeroString(iRetval)) to wTempPath
71796>>>>>            Move (fsGetTempPath(iRetVal, AddressOf(wTempPath))) to iRetVal
71797>>>>>        End
71797>>>>>>
71797>>>>>        Move wTempPath To sTempPath
71798>>>>>        Move (CString(sTempPath)) to sTempPath
71799>>>>>        Function_Return sTempPath
71800>>>>>    End_Function
71801>>>>>
71801>>>>>    // Generates a temporary file.
71801>>>>>    // Returns full path and filename or blank if no file could be created.
71801>>>>>    // sPathName is the place where the temporary file is generated. If it is
71801>>>>>    // not argumented the TEMP enviroment variable is used. If that is also not
71801>>>>>    // available the current directory is used.
71801>>>>>    // You can prefix the first 3 letters of the filename with sPrefix.
71801>>>>>    Function FileTempFileName String sPathName String sPrefix Returns String
71803>>>>>        Address aTempFileName
71803>>>>>        String sPathNameTmp sPrefixTmp sTempFileName
71803>>>>>        Boolean bOk
71803>>>>>        WString wTempFileName
71803>>>>>        Set pbError to False
71804>>>>>        If (num_arguments > 0) Begin
71806>>>>>            Move sPathName to sPathNameTmp
71807>>>>>        End
71807>>>>>>
71807>>>>>        Else Begin
71808>>>>>            Move "" to sPathNameTmp
71809>>>>>        End
71809>>>>>>
71809>>>>>        If (num_arguments > 1) Begin
71811>>>>>            Move sPrefix to sPrefixTmp
71812>>>>>        End
71812>>>>>>
71812>>>>>        Else Begin
71813>>>>>            Move "" to sPrefixTmp
71814>>>>>        End
71814>>>>>>
71814>>>>>        Move (Trim(sPathNameTmp)) to sPathNameTmp
71815>>>>>        If (sPathNameTmp = "") Begin
71817>>>>>            Get FileTempPath to sPathNameTmp
71818>>>>>            If (sPathNameTmp = "") Begin
71820>>>>>                Move "." to sPathNameTmp
71821>>>>>            End
71821>>>>>>
71821>>>>>        End
71821>>>>>>
71821>>>>>        Move (ZeroString(MAX_PATH))     To wTempFilename
71822>>>>>        Move (AddressOf(wTempFileName)) To aTempFileName
71823>>>>>        Move (fsGetTempFileName(sPathNameTmp, sPrefixTmp, 0, aTempFileName)) to bOk
71824>>>>>        If bOk Begin
71826>>>>>            Move wTempFileName          To sTempFileName
71827>>>>>            Move (CString(sTempFileName)) to sTempFileName
71828>>>>>        End
71828>>>>>>
71828>>>>>        Function_Return sTempFileName
71829>>>>>    End_Function
71830>>>>>
71830>>>>>    // Creates a new directory.
71830>>>>>    // Returns True if succeeds.
71830>>>>>    Function DirectoryCreate String sDirectoryName Returns Boolean
71832>>>>>        Boolean bFound bOk
71832>>>>>        Integer iErrorNumber
71832>>>>>        Move False to bOk
71833>>>>>        Set pbError to False
71834>>>>>        Get FileExists sDirectoryName DIRMODE_DIRECTORIES_ONLY to bFound
71835>>>>>        If (not(bFound)) Begin
71837>>>>>            Move (sDirectoryname+(Character(0))) to sDirectoryname
71838>>>>>            Move (fsCreateDirectory(sDirectoryname, FNULL)) to bOk
71839>>>>>            If (bOk = False) Begin           // Could not create
71841>>>>>                Move (fsGetLastError()) to iErrorNumber
71842>>>>>                If iErrorNumber Begin
71844>>>>>                    Send DoShowError iErrorNumber ("Tried to create directory: "+sDirectoryname)
71845>>>>>                End
71845>>>>>>
71845>>>>>            End
71845>>>>>>
71845>>>>>        End
71845>>>>>>
71845>>>>>        Function_Return bOk
71846>>>>>    End_Function
71847>>>>>
71847>>>>>    // Removes an existing empty directory.
71847>>>>>    // Returns True if succeeds.
71847>>>>>    Function DirectoryRemove String sDirectoryName Returns Boolean
71849>>>>>        Boolean bFound bOk
71849>>>>>        Integer iErrorNumber
71849>>>>>        Move False to bOk
71850>>>>>        Set pbError to False
71851>>>>>        Get FileExists sDirectoryName DIRMODE_DIRECTORIES_ONLY to bFound
71852>>>>>        If bFound Begin
71854>>>>>            Move (sDirectoryname+(Character(0))) to sDirectoryname
71855>>>>>            Move (fsRemoveDirectory(sDirectoryname)) to bOk
71856>>>>>            If (bOk = False) Begin           // Could not delete
71858>>>>>                Move (fsGetLastError()) to iErrorNumber
71859>>>>>                If iErrorNumber Begin
71861>>>>>                    Send DoShowError iErrorNumber ("Tried to remove directory: "+sDirectoryName)
71862>>>>>                End
71862>>>>>>
71862>>>>>            End
71862>>>>>>
71862>>>>>        End
71862>>>>>>
71862>>>>>        Function_Return bOk
71863>>>>>    End_Function
71864>>>>>
71864>>>>>    // Removes a directory and all its contents.
71864>>>>>    // Returns true on succes.
71864>>>>>    Function DirectoryRemoveRecursive String sDirectoryName Returns Boolean
71866>>>>>        tsSearchResult[] alsSearchResults
71866>>>>>        tsSearchResult[] alsSearchResults
71867>>>>>        Integer iIndex
71867>>>>>        Boolean bOk
71867>>>>>
71867>>>>>        If (Right(sDirectoryName, 1) = "\") Begin
71869>>>>>            Move (Left(sDirectoryName, Length(sDirectoryName) - 1)) to sDirectoryName
71870>>>>>        End
71870>>>>>>
71870>>>>>        Get FileSearch (sDirectoryName + "\*") DIRMODE_DIRECTORIES_ONLY to alsSearchResults
71871>>>>>        For iIndex from 2 to (SizeOfArray(alsSearchResults) - 1)
71877>>>>>>
71877>>>>>            Get DirectoryRemoveRecursive (sDirectoryName + "\" + alsSearchResults[iIndex].sFilename) to bOk
71878>>>>>            If (not(bOk)) Begin
71880>>>>>                Function_Return False
71881>>>>>            End
71881>>>>>>
71881>>>>>        Loop
71882>>>>>>
71882>>>>>        Get FileSearch (sDirectoryName + "\*") DIRMODE_FILES_ONLY to alsSearchResults
71883>>>>>        For iIndex from 0 to (SizeOfArray(alsSearchResults) - 1)
71889>>>>>>
71889>>>>>            Get FileDelete (sDirectoryName + "\" + alsSearchResults[iIndex].sFilename) to bOk
71890>>>>>            If (not(bOk)) Begin
71892>>>>>                Function_Return False
71893>>>>>            End
71893>>>>>>
71893>>>>>        Loop
71894>>>>>>
71894>>>>>        Get DirectoryRemove sDirectoryName to bOk
71895>>>>>        Function_Return bOk
71896>>>>>    End_Function
71897>>>>>
71897>>>>>    // Converts the filetime in UTC and returns a datetime in local time.
71897>>>>>    // private
71897>>>>>    Function ConvertFileTimeToLocalDateTime UBigInt ubiFileTime Returns DateTime
71899>>>>>        Boolean bOk
71899>>>>>        UBigInt ubiZero
71899>>>>>        structSystemTime lsSystemTime lsLocalTime
71899>>>>>        structSystemTime lsSystemTime lsLocalTime
71899>>>>>        DateTime dtLocalTime
71899>>>>>        Move 0 to lsSystemTime.wDay
71900>>>>>        Move 0 to lsLocalTime.wDay
71901>>>>>        Move 0 to ubiZero
71902>>>>>        If (ubiFileTime <> ubiZero) Begin
71904>>>>>            Move (fsFileTimeToSystemTime(AddressOf(ubiFileTime), AddressOf(lsSystemTime))) to bOk
71905>>>>>            If bOk Begin
71907>>>>>                Move (fsSystemTimeToTzSpecificLocalTime(FNULL, AddressOf(lsSystemTime), AddressOf(lsLocalTime))) to bOk
71908>>>>>                If bOk Begin
71910>>>>>                    Move (DateSetYear(dtLocalTime, lsLocalTime.wYear)) to dtLocalTime
71911>>>>>                    Move (DateSetMonth(dtLocalTime, lsLocalTime.wMonth)) to dtLocalTime
71912>>>>>                    Move (DateSetDay(dtLocalTime, lsLocalTime.wDay)) to dtLocalTime
71913>>>>>                    Move (DateSetHour(dtLocalTime, lsLocalTime.wHour)) to dtLocalTime
71914>>>>>                    Move (DateSetMinute(dtLocalTime, lsLocalTime.wMinute)) to dtLocalTime
71915>>>>>                    Move (DateSetSecond(dtLocalTime, lsLocalTime.wSecond)) to dtLocalTime
71916>>>>>                    Move (DateSetMillisecond(dtLocalTime, lsLocalTime.wMillieseconds)) to dtLocalTime
71917>>>>>                End
71917>>>>>>
71917>>>>>            End
71917>>>>>>
71917>>>>>        End
71917>>>>>>
71917>>>>>        Function_Return dtLocalTime
71918>>>>>    End_Function
71919>>>>>
71919>>>>>    // Returns the filename with full path where the casing is preserved from windows.
71919>>>>>    Function FilePreservedFilename String sFilename Returns String
71921>>>>>        Integer iNumOfDirectories iCurrentDirectory
71921>>>>>        String sPreservedFilename sCurDir sSearchName
71921>>>>>        tsSearchResult[] lsSearchResult
71921>>>>>        tsSearchResult[] lsSearchResult
71922>>>>>
71922>>>>>        Get CountOfFields sFilename "\" to iNumOfDirectories
71923>>>>>        For iCurrentDirectory from 1 to (iNumOfDirectories - 1)
71929>>>>>>
71929>>>>>            Get FieldAtIndex sFilename iCurrentDirectory "\" to sCurDir
71930>>>>>            If (sCurDir <> "") Begin
71932>>>>>                If (Right(sCurDir, 1) <> ":") Begin
71934>>>>>                    Move (sPreservedFilename + sCurDir) to sSearchName
71935>>>>>                    Get FileSearch sSearchName DIRMODE_DIRECTORIES_ONLY to lsSearchResult
71936>>>>>                    If (SizeOfArray(lsSearchResult) > 0) Begin
71938>>>>>                        Move (sPreservedFilename + lsSearchResult[0].sFilename + "\") to sPreservedFilename
71939>>>>>                    End
71939>>>>>>
71939>>>>>                    Else Begin
71940>>>>>                        Move (sPreservedFilename + sCurDir + "\") to sPreservedFilename
71941>>>>>                    End
71941>>>>>>
71941>>>>>                End
71941>>>>>>
71941>>>>>                Else Begin
71942>>>>>                    Move (sPreservedFilename + sCurDir + "\") to sPreservedFilename
71943>>>>>                End
71943>>>>>>
71943>>>>>            End
71943>>>>>>
71943>>>>>            Else Begin
71944>>>>>                Move (sPreservedFilename + "\") to sPreservedFilename
71945>>>>>            End
71945>>>>>>
71945>>>>>        Loop
71946>>>>>>
71946>>>>>        Get FileSearch sFilename DIRMODE_FILES_AND_DIRECTORIES to lsSearchResult
71947>>>>>        If (SizeOfArray(lsSearchResult) > 0) Begin
71949>>>>>            Move (sPreservedFilename + lsSearchResult[0].sFilename) to sPreservedFilename
71950>>>>>        End
71950>>>>>>
71950>>>>>        Else Begin
71951>>>>>            Function_Return ""
71952>>>>>        End
71952>>>>>>
71952>>>>>        Function_Return sPreservedFilename
71953>>>>>    End_Function
71954>>>>>
71954>>>>>    // Returns the number of fields present in a string of fields seperated by a delimiter.
71954>>>>>    // If sDelimiter is not applied the ";" will be used.
71954>>>>>    Function CountOfFields String sFields String sDelimiter Returns Integer
71956>>>>>        Integer iChar icChar iField
71956>>>>>        String sDlm
71956>>>>>        If (sFields ="") Begin
71958>>>>>            Function_Return 0
71959>>>>>        End
71959>>>>>>
71959>>>>>        If (num_arguments > 1) Begin
71961>>>>>            Move sDelimiter to sDlm
71962>>>>>        End
71962>>>>>>
71962>>>>>        Else Begin
71963>>>>>            Move ";" to sDlm
71964>>>>>        End
71964>>>>>>
71964>>>>>        Move (Length(sFields) -1) to icChar
71965>>>>>        For iChar from 1 to icChar
71971>>>>>>
71971>>>>>            If (Mid(sFields, 1, iChar) = sDlm) Begin
71973>>>>>                Increment iField
71974>>>>>            End
71974>>>>>>
71974>>>>>        Loop
71975>>>>>>
71975>>>>>        Function_Return (iField +1)
71976>>>>>    End_Function
71977>>>>>
71977>>>>>    // Returns a field from a string containing multiple delimited fields.
71977>>>>>    // Index is 1-based.
71977>>>>>    Function FieldAtIndex String sFields Integer iIndex String sDelimiter Returns String
71979>>>>>        Integer iField iPos
71979>>>>>        String sField sDlm
71979>>>>>        If (num_arguments > 2) Begin
71981>>>>>            Move sDelimiter to sDlm
71982>>>>>        End
71982>>>>>>
71982>>>>>        Else Begin
71983>>>>>            Move ";" to sDlm
71984>>>>>        End
71984>>>>>>
71984>>>>>        Move (sFields + sDlm) to sFields
71985>>>>>        For iField from 1 to iIndex
71991>>>>>>
71991>>>>>            Move (Pos(sDlm, sFields)) to iPos
71992>>>>>            If iPos Begin
71994>>>>>                Move (Left(sFields, iPos -1)) to sField
71995>>>>>                Move (Right(sFields, Length(sFields) -iPos)) to sFields
71996>>>>>            End
71996>>>>>>
71996>>>>>            Else Begin
71997>>>>>                Function_Return ""
71998>>>>>            End
71998>>>>>>
71998>>>>>        Loop
71999>>>>>>
71999>>>>>        Function_Return sField
72000>>>>>    End_Function
72001>>>>>
72001>>>>>    // Removes the file extention from the sFile string and returns the extention including "."
72001>>>>>    // Example sFile = "x:\text.txt". The function returns ".txt" and sFile = "x:\text".
72001>>>>>    Function RemoveExtention String ByRef sFilename Returns String
72003>>>>>        String sExtention
72003>>>>>        Integer iLengthExtention
72003>>>>>        Get FileExtention sFilename to sExtention
72004>>>>>        Move (Length(sExtention)) to iLengthExtention
72005>>>>>        If (iLengthExtention > 0) Begin
72007>>>>>            Move (Left(sFilename, (Length(sFilename) - iLengthExtention - 1))) to sFilename
72008>>>>>        End
72008>>>>>>
72008>>>>>        Function_Return sExtention
72009>>>>>    End_Function
72010>>>>>
72010>>>>>    // Add a directory separator if it is not present.
72010>>>>>    // Example sFoldername = "x:\FolderA". The function returns "x:\FolderA\"
72010>>>>>    Function AddFolderSeperator String sFolderName Returns String
72012>>>>>        String sDirSep
72012>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
72013>>>>>        Move (Trim(sFolderName)) to sFolderName
72014>>>>>        If (Right(sFolderName, 1) <> sDirSep) Begin
72016>>>>>            Move (sFolderName + sDirSep) to sFolderName
72017>>>>>        End
72017>>>>>>
72017>>>>>        Function_Return sFolderName
72018>>>>>    End_Function
72019>>>>>
72019>>>>>    // Removes a directory separator if it is present.
72019>>>>>    // Example sFoldername = "x:\FolderA\". The function returns "x:\FolderA"
72019>>>>>    Function RemoveFolderSeperator String sFolderName Returns String
72021>>>>>        String sDirSep
72021>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
72022>>>>>        Move (Trim(sFolderName)) to sFolderName
72023>>>>>        If (Right(sFolderName, 1) = sDirSep) Begin
72025>>>>>            Move (Left(sFolderName, Length(sFolderName) - 1)) to sFolderName
72026>>>>>        End
72026>>>>>>
72026>>>>>        Function_Return sFolderName
72027>>>>>    End_Function
72028>>>>>
72028>>>>>    Function FileLastWriteTime String sFileName Returns tFileTime
72030>>>>>        DWord dwAccess
72030>>>>>        DWord dwShared
72030>>>>>        DWord dwCreate
72030>>>>>        Handle hFile
72030>>>>>        Integer iRetval iErrorNumber
72030>>>>>        tFileTime ftLastWrite
72030>>>>>        tFileTime ftLastWrite
72030>>>>>        //
72030>>>>>        Append sFilename (Character(0)) (Character(0))
72032>>>>>        Move (GENERIC_READ iOr GENERIC_WRITE) To dwAccess
72033>>>>>        Move FILE_SHARE_RANDOM   To dwShared
72034>>>>>        Move OPEN_EXISTING       To dwCreate
72035>>>>>
72035>>>>>        Move (fsCreatefile(sFilename, dwAccess, dwShared, FNULL, dwCreate, FILE_ATTRIBUTE_NORMAL, FNULL)) To hFile
72036>>>>>        If (hFile = INVALID_HANDLE_VALUE) Begin
72038>>>>>            Move (fsGetLastError()) To iErrorNumber
72039>>>>>            If iErrorNumber Begin
72041>>>>>                Send DoShowError iErrorNumber sFileName
72042>>>>>            End
72042>>>>>>
72042>>>>>            Procedure_Return
72043>>>>>        End
72043>>>>>>
72043>>>>>        Else Begin
72044>>>>>            Move 0 To ftLastWrite.dwLowDateTime
72045>>>>>            Move (fsGetFileTime(hFile,FNULL,FNULL,AddressOf(ftLastWrite))) To iRetval
72046>>>>>            If (iRetVal = 0) Begin           //Could not close
72048>>>>>                Move (fsGetLastError()) To iErrorNumber
72049>>>>>                If iErrorNumber Begin
72051>>>>>                    Send DoShowError iErrorNumber sFileName
72052>>>>>                End
72052>>>>>>
72052>>>>>            End
72052>>>>>>
72052>>>>>            Move (fsCloseHandle(hFile)) To iRetVal
72053>>>>>            If (iRetVal = 0) Begin           //Could not close
72055>>>>>                Move (fsGetLastError()) To iErrorNumber
72056>>>>>                If iErrorNumber Begin
72058>>>>>                    Send DoShowError iErrorNumber sFileName
72059>>>>>                End
72059>>>>>>
72059>>>>>            End
72059>>>>>>
72059>>>>>        End
72059>>>>>>
72059>>>>>        Function_Return ftLastWrite
72060>>>>>    End_Function
72061>>>>>
72061>>>>>    Function CurrentSystemTimeAsFileTime Returns tFileTime
72063>>>>>        Integer iRetVal
72063>>>>>        Integer iErrorNumber
72063>>>>>        String  sFileName
72063>>>>>        tFileTime ftCurrentTime
72063>>>>>        tFileTime ftCurrentTime
72063>>>>>
72063>>>>>        Move 0 to ftCurrentTime.dwLowDateTime
72064>>>>>        Move (fsGetSystemTimeAsFileTime(AddressOf(ftCurrentTime))) to iRetVal
72065>>>>>        If (iRetVal = 0) Begin
72067>>>>>            Move (fsGetLastError()) to iErrorNumber
72068>>>>>            If iErrorNumber Begin
72070>>>>>                Send DoShowError iErrorNumber sFileName
72071>>>>>            End
72071>>>>>>
72071>>>>>        End
72071>>>>>>
72071>>>>>        Function_Return ftCurrentTime
72072>>>>>    End_Function
72073>>>>>
72073>>>>>    // Nils 2018-08-30 Added this message from Akefs.pkg as we need it For the
72073>>>>>    // SourceCodeTools project
72073>>>>>    Procedure Set FileLastWriteTime String sFileName tFileTime ftLastWrite
72075>>>>>        DWord dwAccess dwShared dwCreate
72075>>>>>        Handle hFile
72075>>>>>        Integer iRetval iErrorNumber
72075>>>>>
72075>>>>>        Append sFilename (Character(0)) (Character(0))
72077>>>>>        Move (GENERIC_READ ior GENERIC_WRITE) to dwAccess
72078>>>>>        Move FILE_SHARE_RANDOM   to dwShared
72079>>>>>        Move OPEN_EXISTING       to dwCreate
72080>>>>>
72080>>>>>        Move (fsCreatefile(sFilename, dwAccess, dwShared, FNULL, dwCreate, FILE_ATTRIBUTE_NORMAL, FNULL)) to hFile
72081>>>>>        If (hFile = INVALID_HANDLE_VALUE) Begin
72083>>>>>            Move (fsGetLastError()) to iErrorNumber
72084>>>>>            If (iErrorNumber <> 0) Begin
72086>>>>>                Send DoShowError iErrorNumber sFileName
72087>>>>>            End
72087>>>>>>
72087>>>>>            Procedure_Return
72088>>>>>        End
72088>>>>>>
72088>>>>>        Else Begin
72089>>>>>            Move (fsSetFileTime(hFile,FNULL,FNULL,AddressOf(ftLastWrite))) to iRetval
72090>>>>>            If (iRetVal = 0) Begin           //Could not close
72092>>>>>                Move (fsGetLastError()) to iErrorNumber
72093>>>>>                If (iErrorNumber <> 0) Begin
72095>>>>>                    Send DoShowError iErrorNumber sFileName
72096>>>>>                End
72096>>>>>>
72096>>>>>            End
72096>>>>>>
72096>>>>>            Move (fsCloseHandle(hFile)) to iRetVal
72097>>>>>            If (iRetVal = 0) Begin           //Could not close
72099>>>>>                Move (fsGetLastError()) to iErrorNumber
72100>>>>>                If (iErrorNumber <> 0) Begin
72102>>>>>                    Send DoShowError iErrorNumber sFileName
72103>>>>>                End
72103>>>>>>
72103>>>>>            End
72103>>>>>>
72103>>>>>        End
72103>>>>>>
72103>>>>>    End_Procedure
72104>>>>>
72104>>>>>    // Fetch the error message from the system message table using the default language.
72104>>>>>    // If not in unicode then the variable sAppendErrorText is in ANSI
72104>>>>>    Procedure DoShowError Integer iErrorNumber String sAppendErrorText
72106>>>>>        Pointer lpOut
72106>>>>>        Integer iRetChars iRetVal
72106>>>>>        String sMsg
72106>>>>>        Boolean bOk
72106>>>>>        WString wMsg
72106>>>>>
72106>>>>>        Move 0 to lpOut
72107>>>>>        Move (fsFormatMessage((FORMAT_MESSAGE_FROM_SYSTEM+FORMAT_MESSAGE_IGNORE_INSERTS+FORMAT_MESSAGE_ALLOCATE_BUFFER), FNULL, iErrorNumber, FNULL, AddressOf(lpOut), 0, FNULL)) to iRetChars
72108>>>>>        If (iRetChars > 0) Begin
72110>>>>>            Move (ZeroString(iRetChars*2)) to wMsg
72111>>>>>            Move (MemCopy(AddressOf(wMsg), lpOut, iRetChars*2)) to bOk
72112>>>>>            Move (fsLocalFree(lpOut)) to iRetVal
72113>>>>>            Move wMsg To sMsg
72114>>>>>            If (num_arguments > 0) Begin
72116>>>>>                Move (Trim(sAppendErrorText)) to sAppendErrorText
72117>>>>>                If (sAppendErrorText <> "") Begin
72119>>>>>                    Append sMsg "\n" sAppendErrorText
72121>>>>>                End
72121>>>>>>
72121>>>>>            End
72121>>>>>>
72121>>>>>            Send warning_box sMsg
72122>>>>>        End
72122>>>>>>
72122>>>>>    End_Procedure
72123>>>>>
72123>>>>>    // Shows a warning message to user with OK button and a exclamation icon.
72123>>>>>    // private
72123>>>>>    Procedure Warning_Box String sWngMsg
72125>>>>>        Integer iVoid
72125>>>>>        Boolean bSendVdfError
72125>>>>>        Set pbError to True
72126>>>>>        Get pbErrorAsVDFError to bSendVdfError
72127>>>>>        If (bSendVdfError = False) Begin
72129>>>>>            Get Message_Box sWngMsg "Filesystem Error" MB_OK MB_ICONEXCLAMATION to iVoid
72130>>>>>        End
72130>>>>>>
72130>>>>>        Else Begin
72131>>>>>            Error DFERR_PROGRAM sWngMsg
72132>>>>>>
72132>>>>>        End
72132>>>>>>
72132>>>>>    End_Procedure
72133>>>>>
72133>>>>>    // Fetch the filename from the list of filenames associated with a filenumber.
72133>>>>>    // This function is used For reporting filenames during an error.
72133>>>>>    // private
72133>>>>>    Function FileErrorText Integer iFilenumber Returns String
72135>>>>>        String sErrorText
72135>>>>>        structFile[] lsFile
72135>>>>>        structFile[] lsFile
72136>>>>>        Get plsFile to lsFile
72137>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
72139>>>>>            Move ("File: "+lsFile[iFilenumber].sFilename) to sErrorText
72140>>>>>        End
72140>>>>>>
72140>>>>>        Function_Return sErrorText
72141>>>>>    End_Function
72142>>>>>
72142>>>>>End_Class
72143>>>Use cCJGridColumnRowIndicator.pkg
Including file: cCJGridColumnRowIndicator.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJGridColumnRowIndicator.pkg)
72143>>>>>Use cCJGridColumn.pkg
72143>>>>>
72143>>>>>Class cCJGridColumnRowIndicator is a cCJGridColumn
72144>>>>>    
72144>>>>>    Procedure Construct_Object
72146>>>>>        Forward Send Construct_Object
72148>>>>>        
72148>>>>>        Property Integer piImage 0
72149>>>>>        
72149>>>>>        Set psCaption to ""
72150>>>>>        Set piWidth to 20
72151>>>>>        Set pbResizable to False
72152>>>>>        Set pbEditable to False
72153>>>>>        Set pbFocusable to False
72154>>>>>        Set pbAllowDrag to False
72155>>>>>        Set psToolTip to "Row Indicator"
72156>>>>>    End_Procedure
72157>>>>>    
72157>>>>>    Procedure OnCreateColumn
72159>>>>>        Integer iImage
72159>>>>>        Delegate Get AddImage "GridColumnRowIndicator.bmp" 0 to iImage
72161>>>>>        Set piImage to iImage
72162>>>>>    End_Procedure
72163>>>>>    
72163>>>>>    Procedure OnSetDisplayMetrics Handle hoGridItemMetrics Integer iRow String ByRef sValue
72165>>>>>        Integer iImage iFocusedRow
72165>>>>>        Handle hoDataSource
72165>>>>>        
72165>>>>>        Get phoDataSource to hoDataSource
72166>>>>>        Get SelectedRow of hoDataSource to iFocusedRow
72167>>>>>        Move -1 to iImage
72168>>>>>        If (iRow = iFocusedRow) Begin
72170>>>>>            Get piImage to iImage
72171>>>>>            Set ComItemIcon of hoGridItemMetrics to iImage
72172>>>>>        End
72172>>>>>>
72172>>>>>    End_Procedure
72173>>>>>    
72173>>>>>End_Class
72174>>>
72174>>>Activate_View Activate_oConteudoDiretorio for oConteudoDiretorio
72184>>>>
72184>>>Object oConteudoDiretorio is a dbView
72186>>>    Set Location to 2 4
72187>>>    Set Border_Style to Border_Thick
72188>>>    Set Size to 241 567
72189>>>    Set piMinSize to 228 525                                     
72190>>>       
72190>>>    Object oPathFile is a Form
72192>>>        Set Location to 22 81
72193>>>        Set Size to 13 469
72194>>>        Set Label to "Caminho arquivo:"
72195>>>        Set Enabled_State to False
72196>>>    End_Object
72197>>>       
72197>>>    Object oCJGrid1 is a cCJGrid
72199>>>        Set Size to 165 533
72200>>>        Set Location to 54 17
72201>>>        Set peAnchors to anAll
72202>>>        Set pbReadOnly to True
72203>>>        Set pbSelectionEnable to True 
72204>>>
72204>>>        Object oCJGridColumnRowIndicator1 is a cCJGridColumnRowIndicator
72206>>>            Set piWidth to 18
72207>>>        End_Object
72208>>>
72208>>>        Object oCustomer_Name is a cCJGridColumn
72210>>>            Set piWidth to 889
72211>>>            Set psCaption to "Arquivos encontrados:"
72212>>>        End_Object
72213>>>        
72213>>>        Procedure CheckPath
72216>>>            Boolean bExist
72216>>>            
72216>>>            File_Exist sReadDir bExist
72217>>>            If (bExist) Begin
72219>>>                Set Value of oPathFile to sReadDir
72220>>>                Send LoadData
72221>>>            End
72221>>>>
72221>>>            Else Begin
72222>>>                Send Info_Box "Caminho não encontrado, grid não foi criada"
72223>>>                Break
72224>>>            End 
72224>>>>
72224>>>        End_Procedure
72225>>>               
72225>>>        Procedure OnRowDoubleClick Integer iRow Integer iCol                      
72228>>>            Forward Send OnRowDoubleClick iRow iCol 
72230>>>            String sFile
72230>>>            Boolean bExist
72230>>>                        
72230>>>            //  Setinha
72230>>>            If (iCol = (piColumnId(oCJGridColumnRowIndicator1))) Begin
72232>>>                If (YesNo_Box("Deseja mesmo excluir o arquivo?","Informação",MBR_Yes) = MBR_Yes) Begin                   
72234>>>                      
72234>>>                    Get RowValue of oCustomer_Name iRow to sFile
72235>>>                    Move (sReadDir + "\" + sFile) to sFile
72236>>>                   
72236>>>                    EraseFile sFile        
72237>>>>
72237>>>                    File_Exist sFile bExist
72238>>>                        
72238>>>                    If (not(bExist)) Begin
72240>>>                        Send Info_Box (sFile + "was deleted successfully")
72241>>>                    End
72241>>>>
72241>>>                    Else Begin
72242>>>                        Send Stop_Box (sFile + "was NOT deleted successfully")
72243>>>                    End    
72243>>>>
72243>>>                End
72243>>>>
72243>>>            End
72243>>>>
72243>>>            //  Nome do arquivo
72243>>>            If (iCol = (piColumnId(oCustomer_Name))) Begin     
72245>>>                Get RowValue of oCustomer_Name iRow to sFile
72246>>>                Move (sReadDir + "\" + sFile) to sFile
72247>>>                
72247>>>                Send Info_Box ("Function download " + sFile)
72248>>>                // Dowload
72248>>>            End
72248>>>>
72248>>>
72248>>>          Send LoadData
72249>>>        End_Procedure
72250>>>        
72250>>>        Procedure LoadData 
72253>>>            tDataSourceRow[] TheData
72253>>>            tDataSourceRow[] TheData
72254>>>            String [] aFiles
72255>>>            Boolean bFound
72255>>>            Integer iRows iName iIndex iIndicador   
72255>>>            String sBuffer sDiretorio
72255>>>    
72255>>>            Move ("dir: " + sReadDir) to sDiretorio
72256>>>            Direct_Input sDiretorio
72257>>>            Move 0 to iIndex                          
72258>>>            While (not (SeqEof))
72262>>>                Readln sBuffer
72263>>>                Move (Trim(sBuffer)) to aFiles[iIndex]
72264>>>                Increment iIndex
72265>>>            Loop
72266>>>>
72266>>>            Close_Input 
72267>>>        
72267>>>            // Get the datasource indexes of the various columns
72267>>>            Get piColumnId of oCJGridColumnRowIndicator1 to iIndicador
72268>>>            Get piColumnId of oCustomer_Name to iName
72269>>>    
72269>>>            Move 0 to iIndex 
72270>>>            For iIndex from 0 to (SizeOfArray(aFiles) - 1)   
72276>>>>
72276>>>                If not (aFiles[iIndex] = "[.]" or aFiles[iIndex] = "[..]" or aFiles[iIndex] = "") Begin
72278>>>                    Move aFiles[iIndex] to TheData[iRows].sValue[iName] 
72279>>>                    Increment iRows
72280>>>                End
72280>>>>
72280>>>            Loop
72281>>>>
72281>>>            
72281>>>            // Initialize Grid with new data
72281>>>            Send InitializeData TheData
72282>>>            Send MovetoFirstRow
72283>>>        End_Procedure
72284>>>        
72284>>>        Procedure Activating    
72287>>>          Forward Send Activating
72289>>>          Send CheckPath
72290>>>        End_Procedure  
72291>>>
72291>>>        Procedure Deactivating                  
72294>>>            Forward Send Deactivating
72296>>>            
72296>>>            Send LoadData 
72297>>>        End_Procedure
72298>>>    End_Object  
72299>>>End_Object
72300>        Use TestFunction.vw
Including file: TestFunction.vw    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\TestFunction.vw)
72300>>>Use Windows.pkg
72300>>>Use DFClient.pkg
72300>>>Use DFTabDlg.pkg
72300>>>Use DfAllEnt.pkg
72300>>>Use File_dlg.pkg
72300>>>Use cFilesystem.pkg
72300>>>
72300>>>Deferred_View Activate_oTestFunction for ;Object oTestFunction is a dbView
72325>>>
72325>>>    Set Border_Style to Border_Thick
72326>>>    Set Size to 126 470
72327>>>    Set Location to -1 4
72328>>>
72328>>>    Procedure FindDbFiles String sPathFind String sPathDestiny String sNameDb String[] ByRef sArquivosOrigem String[] ByRef sArquivosDestino  
72331>>>        Boolean bExist
72331>>>        String [] aFiles aExtension
72333>>>        String sBuffer sFilePlusExtension sExtension sFile
72333>>>        Integer iIndexFiles iIndexExtension
72333>>>        
72333>>>        Move "DAT" to aExtension[0]
72334>>>        Move "K1" to aExtension[1]
72335>>>        Move "K2" to aExtension[2]
72336>>>        Move "K3" to aExtension[3]
72337>>>        Move "K4" to aExtension[4]
72338>>>        Move "K5" to aExtension[5]
72339>>>        Move "K6" to aExtension[6]
72340>>>        Move "K7" to aExtension[7]
72341>>>        Move "K8" to aExtension[8]
72342>>>        Move "K9" to aExtension[9]
72343>>>        Move "K10" to aExtension[10]
72344>>>        Move "K11" to aExtension[11]
72345>>>        Move "K12" to aExtension[12]
72346>>>        Move "K13" to aExtension[13]
72347>>>        Move "K14" to aExtension[14]
72348>>>        Move "K15" to aExtension[15]
72349>>>        Move "VLD" to aExtension[16]
72350>>>        Move "TAG" to aExtension[17]
72351>>>        Move "HDR" to aExtension[18]
72352>>>                   
72352>>>        File_Exist sPathFind bExist
72353>>>        If (bExist) Begin   
72355>>>            
72355>>>            Direct_Input ("dir: " + sPathFind)      
72356>>>            While (not (SeqEof))  
72360>>>                Readln sBuffer
72361>>>                If not (sBuffer = "[.]" or sBuffer = "[..]" or sBuffer = "") Begin 
72363>>>                    Move (Uppercase(sBuffer)) to sFile
72364>>>                    Move (Uppercase(sNameDb)) to sNameDb  
72365>>>                    
72365>>>                    For iIndexExtension from 0 to (SizeOfArray(aExtension) - 1)
72371>>>>
72371>>>                        Move aExtension[iIndexExtension] to sExtension
72372>>>                        Move (sNameDb + "." + sExtension) to sFilePlusExtension
72373>>>                         
72373>>>                        If (sFile = sFilePlusExtension) Begin       
72375>>>                            Move (sPathFind + "\" + sBuffer) to sArquivosOrigem[iIndexFiles] 
72376>>>                            Move (sPathDestiny + "\" + sBuffer) to sArquivosDestino[iIndexFiles]                          
72377>>>                            Increment iIndexFiles
72378>>>                            Move (SizeOfArray(aExtension) - 1) to iIndexExtension
72379>>>                        End                    
72379>>>>
72379>>>                    Loop             
72380>>>>
72380>>>                End
72380>>>>
72380>>>            Loop
72381>>>>
72381>>>            Close_Input            
72382>>>        End
72382>>>>
72382>>>        Else Begin
72383>>>            Send Info_Box "Caminho não encontrado"
72384>>>        End 
72384>>>>
72384>>>    End_Procedure
72385>>>    
72385>>>    Function CopyDbFiles String sPathSender String sPathDestination String sFiles Returns Boolean
72388>>>        Integer iIndex
72388>>>        String[] sArquivosOrigem 
72389>>>        String[] sArquivosDestino
72390>>>        Boolean bReturn
72390>>>              
72390>>>        Handle hoFileSystem
72390>>>        Get Create (RefClass(cFilesystem)) to hoFileSystem
72391>>>   
72391>>>        Send FindDbFiles sGPathFind sGPathDestination sGNameDb (&sArquivosOrigem) (&sArquivosDestino)
72392>>>    
72392>>>        For iIndex from 0 to (SizeOfArray(sArquivosOrigem) - 1) 
72398>>>>
72398>>>            Get FileCopy of hoFileSystem sArquivosOrigem[iIndex] sArquivosDestino[iIndex] 0 0 to bReturn
72399>>>        Loop
72400>>>>
72400>>>        
72400>>>        Send Destroy of hoFileSystem
72401>>>        
72401>>>        Function_Return bReturn
72402>>>    End_Function
72403>>>      
72403>>>    Object oPathFind is a Form
72405>>>        Set Size to 15 263
72406>>>        Set Location to 4 64
72407>>>        Set Label to "oPathFind:"
72408>>>
72408>>>        Procedure OnChange
72411>>>            Forward Send OnChange
72413>>>            
72413>>>            Get Value of oPathFind to sGPathFind
72414>>>        End_Procedure
72415>>>    End_Object
72416>>>                                                                        
72416>>>//    Object oPathSender is a Form
72416>>>//        Set Size to 17 381
72416>>>//        Set Location to 25 64
72416>>>//        Set Label to "oPathSender:"
72416>>>//
72416>>>//        Procedure OnChange
72416>>>//            Forward Send OnChange
72416>>>//            
72416>>>//        End_Procedure
72416>>>//    End_Object
72416>>>        
72416>>>    Object oPathDestinatio is a Form
72418>>>        Set Size to 17 381
72419>>>        Set Location to 45 64
72420>>>        Set Label to "oPathDestinatio:"
72421>>>    
72421>>>        Procedure OnChange           
72424>>>            Forward Send OnChange
72426>>>            
72426>>>            Get Value of oPathDestinatio to sGPathDestination
72427>>>        End_Procedure
72428>>>    End_Object
72429>>>    
72429>>>    Object oNameDb is a Form
72431>>>        Set Size to 17 70
72432>>>        Set Location to 4 389
72433>>>        Set Label to "oNameDb:"
72434>>>    
72434>>>        Procedure OnChange           
72437>>>            Forward Send OnChange
72439>>>            
72439>>>            Get Value of oNameDb to sGNameDb
72440>>>        End_Procedure
72441>>>    End_Object  
72442>>>                                   
72442>>>//    Object oFunctionFindDbFiles is a Button
72442>>>//        Set Size to 19 96
72442>>>//        Set Location to 29 366
72442>>>//        Set Label to 'Testar função FindDbFiles'
72442>>>//    
72442>>>//        // fires when the button is clicked
72442>>>//        Procedure OnClick
72442>>>//        End_Procedure
72442>>>//    End_Object
72442>>>
72442>>>    Object oFunctionCopyDbFiles is a Button
72444>>>        Set Size to 38 212
72445>>>        Set Location to 78 132
72446>>>        Set Label to 'Testar função'
72447>>>    
72447>>>        // fires when the button is clicked
72447>>>        Procedure OnClick
72450>>>            Boolean bRetornoFunction
72450>>>            
72450>>>            Get CopyDbFiles sGPathFind sGPathDestination sGNameDb to bRetornoFunction
72451>>>        End_Procedure
72452>>>    End_Object
72453>>>Cd_End_Object
72455>>>>
72455>
72455>        Procedure Activate_About
72458>            Send DoAbout "" "" "" "" ""
72459>        End_Procedure
72460>
72460>    End_Object
72461>
72461>End_Object
72462>
72462>Start_UI
72463>
Summary
Memory Available: 413827072
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 42385
Total Resources: 0
Total Commands : 72462
Total Windows  : 0
Total Pages    : 0
Static Data    : 448189
Message area   : 506495
Total Blocks   : 26357
