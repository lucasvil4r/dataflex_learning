Compiling Program: C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\ProjectTeste.src
Memory Available: 2147483646
1>Use DFAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.pkd    (C:\Program Files\DataFlex 20.0\Pkg\dfallent.pkd)
68480>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJStandardCommandBarSystem.pkg)
68480>>>// these are all the packages used in a standard MDI menubar/toolbar system
68480>>>
68480>>>Use cCJCommandBarSystem.pkg
68480>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJStandardMenuItemClasses.pkg)
68480>>>>>Use Dfpanel.pkg
68480>>>>>Use cCJCommandBarSystem.pkg
68480>>>>>Use LanguageText.pkg
68480>>>>>
68480>>>>>
68480>>>>>Class cCJUndoMenuItem is a cCJMenuItem
68481>>>>>    
68481>>>>>    Procedure Construct_Object
68483>>>>>        Forward Send Construct_Object
68485>>>>>        Set psCaption   to C_$CaptionUndo
68486>>>>>        Set psToolTip to C_$ToolTipUndo
68487>>>>>        Set psDescription to C_$DescUndo
68488>>>>>        Set psImage to "ActionUndo.ico"
68489>>>>>        Set pbActiveUpdate to True
68490>>>>>        Set psCategory to C_$CategoryEdit
68491>>>>>        Set psShortcut to C_$Key_Ctrl_Z
68492>>>>>    End_Procedure
68493>>>>>    
68493>>>>>    Procedure OnExecute Variant vCommandBarControl
68495>>>>>        Send Undo of (focus(Self))
68496>>>>>    End_Procedure
68497>>>>>    
68497>>>>>    Function IsEnabled Returns Boolean
68499>>>>>        Boolean bEnabled
68499>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
68500>>>>>        Function_Return bEnabled
68501>>>>>    End_Function
68502>>>>>    
68502>>>>>End_Class
68503>>>>>
68503>>>>>
68503>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
68504>>>>>    
68504>>>>>    Procedure Construct_Object
68506>>>>>        Forward Send Construct_Object
68508>>>>>        Set psCaption   to C_$CaptionDelete
68509>>>>>        Set psToolTip to C_$ToolTipDelete
68510>>>>>        Set psDescription to C_$DescDelete
68511>>>>>        Set psImage to "actionDelete.ico"
68512>>>>>        Set psShortcut to C_$Key_Delete
68513>>>>>        Set pbActiveUpdate to True
68514>>>>>        Set psCategory to C_$CategoryEdit
68515>>>>>    End_Procedure
68516>>>>>    
68516>>>>>    
68516>>>>>    Procedure OnExecute Variant vCommandBarControl
68518>>>>>        Send Delete of (focus(Self))
68519>>>>>    End_Procedure
68520>>>>>    
68520>>>>>    Function IsEnabled Returns Boolean
68522>>>>>        Boolean bEnabled
68522>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
68523>>>>>        Function_Return bEnabled
68524>>>>>    End_Function
68525>>>>>    
68525>>>>>End_Class
68526>>>>>
68526>>>>>
68526>>>>>Class cCJCutMenuItem is a cCJMenuItem
68527>>>>>    
68527>>>>>    Procedure Construct_Object
68529>>>>>        Forward Send Construct_Object
68531>>>>>        Set psCaption   to C_$CaptionCut
68532>>>>>        Set psToolTip to C_$TooltipCut
68533>>>>>        Set psDescription to C_$DescCut
68534>>>>>        Set psImage to "actionCut.ico"
68535>>>>>        Set psShortcut to C_$Key_Ctrl_X
68536>>>>>        Set pbActiveUpdate to True
68537>>>>>        Set psCategory to C_$CategoryEdit
68538>>>>>    End_Procedure
68539>>>>>    
68539>>>>>    
68539>>>>>    Procedure OnExecute Variant vCommandBarControl
68541>>>>>        Send Cut of (focus(Self))
68542>>>>>    End_Procedure
68543>>>>>    
68543>>>>>    Function IsEnabled Returns Boolean
68545>>>>>        Boolean bEnabled
68545>>>>>        Get CanCut of (Focus(Self)) to bEnabled
68546>>>>>        Function_Return bEnabled
68547>>>>>    End_Function
68548>>>>>    
68548>>>>>End_Class
68549>>>>>
68549>>>>>
68549>>>>>Class cCJCopyMenuItem is a cCJMenuItem
68550>>>>>    
68550>>>>>    Procedure Construct_Object
68552>>>>>        Forward Send Construct_Object
68554>>>>>        Set psCaption   to C_$CaptionCopy
68555>>>>>        Set psToolTip to C_$ToolTipCopy
68556>>>>>        Set psDescription to C_$DescCopy
68557>>>>>        Set psImage to "actionCopy.ico"
68558>>>>>        Set psShortcut to C_$Key_Ctrl_C
68559>>>>>        Set pbActiveUpdate to True
68560>>>>>        Set psCategory to C_$CategoryEdit
68561>>>>>    End_Procedure
68562>>>>>    
68562>>>>>    
68562>>>>>    Procedure OnExecute Variant vCommandBarControl
68564>>>>>        Send Copy of (focus(Self))
68565>>>>>    End_Procedure
68566>>>>>    
68566>>>>>    Function IsEnabled Returns Boolean
68568>>>>>        Boolean bEnabled
68568>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
68569>>>>>        Function_Return bEnabled
68570>>>>>    End_Function
68571>>>>>    
68571>>>>>End_Class
68572>>>>>
68572>>>>>
68572>>>>>Class cCJPasteMenuItem is a cCJMenuItem
68573>>>>>    
68573>>>>>    Procedure Construct_Object
68575>>>>>        Forward Send Construct_Object
68577>>>>>        Set psCaption   to C_$CaptionPaste
68578>>>>>        Set psToolTip to C_$ToolTipPaste
68579>>>>>        Set psDescription to C_$DescPaste
68580>>>>>        Set psImage to "actionPaste.ico"
68581>>>>>        Set pbActiveUpdate to True
68582>>>>>        Set psShortcut to C_$Key_Ctrl_V
68583>>>>>        Set psCategory to C_$CategoryEdit
68584>>>>>    End_Procedure
68585>>>>>    
68585>>>>>    
68585>>>>>    Procedure OnExecute Variant vCommandBarControl
68587>>>>>        Send Paste of (focus(Self))
68588>>>>>    End_Procedure
68589>>>>>    
68589>>>>>    Function IsEnabled Returns Boolean
68591>>>>>        Boolean bEnabled
68591>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
68592>>>>>        Function_Return bEnabled
68593>>>>>    End_Function
68594>>>>>    
68594>>>>>End_Class
68595>>>>>
68595>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
68596>>>>>    
68596>>>>>    Procedure Construct_Object
68598>>>>>        Forward Send Construct_Object
68600>>>>>        Set psCaption   to C_$CaptionSelectAll
68601>>>>>        Set psToolTip to C_$ToolTipSelectAll
68602>>>>>        Set psDescription to C_$DescSelectAll
68603>>>>>        Set pbActiveUpdate to True
68604>>>>>        Set psShortcut to C_$Key_Ctrl_A
68605>>>>>        Set psCategory to C_$CategoryEdit
68606>>>>>    End_Procedure
68607>>>>>    
68607>>>>>    
68607>>>>>    Procedure OnExecute Variant vCommandBarControl
68609>>>>>        Send Select_All of (focus(Self))
68610>>>>>    End_Procedure
68611>>>>>    
68611>>>>>    Function IsEnabled Returns Boolean
68613>>>>>        Boolean bEnabled
68613>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
68614>>>>>        Function_Return bEnabled
68615>>>>>    End_Function
68616>>>>>    
68616>>>>>End_Class
68617>>>>>
68617>>>>>
68617>>>>>Class cCJExitMenuItem is a cCJMenuItem
68618>>>>>    
68618>>>>>    Procedure Construct_Object
68620>>>>>        Forward Send Construct_Object
68622>>>>>        Set psCaption to C_$CaptionExit
68623>>>>>        Set psToolTip to C_$ToolTipExit
68624>>>>>        Set psDescription to C_$ToolTipExit
68625>>>>>        Set psShortcut to C_$Key_Alt_F4
68626>>>>>        Set psCategory to C_$CategoryFile
68627>>>>>    End_Procedure
68628>>>>>    
68628>>>>>    Procedure OnExecute Variant vCommandBarControl
68630>>>>>        Send Exit_Application of Desktop
68631>>>>>    End_Procedure
68632>>>>>    
68632>>>>>End_Class
68633>>>>>
68633>>>>>Class cCJHelpMenuItem is a cCJMenuItem
68634>>>>>    
68634>>>>>    Procedure Construct_Object
68636>>>>>        Forward Send Construct_Object
68638>>>>>        Set psCaption to C_$CaptionHelp
68639>>>>>        Set psDescription to C_$ToolTipHelp
68640>>>>>        Set psToolTip to C_$DescHelp
68641>>>>>        Set psImage to "ActionHelp.ico"
68642>>>>>        Set psShortcut to "F1"
68643>>>>>        Set psCategory to C_$CategoryHelp
68644>>>>>    End_Procedure
68645>>>>>    
68645>>>>>    Procedure OnExecute Variant vCommandBarControl
68647>>>>>        Send Help of (Focus(Self))
68648>>>>>    End_Procedure
68649>>>>>    
68649>>>>>End_Class
68650>>>>>
68650>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
68651>>>>>    
68651>>>>>    Procedure Construct_Object
68653>>>>>        Forward Send Construct_Object
68655>>>>>        Set psCaption to C_$CaptionAddStatusbar
68656>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
68657>>>>>        Set psDescription to  C_$DescAddStatusbar
68658>>>>>        Set psCategory to C_$CategoryWindow
68659>>>>>    End_Procedure
68660>>>>>    
68660>>>>>    Procedure OnExecute Variant vCommandBarControl
68662>>>>>        Handle hoCommandBars hoClientArea
68662>>>>>        Get CommandBarSystemObject to hoCommandBars
68663>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68664>>>>>        If hoClientArea Begin
68666>>>>>            // the clientarea's parent panel has message
68666>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
68667>>>>>        End
68667>>>>>>
68667>>>>>    End_Procedure
68668>>>>>    
68668>>>>>    Function IsChecked Returns Boolean
68670>>>>>        Boolean bOn
68670>>>>>        Handle hoCommandBars hoClientArea
68670>>>>>        Get CommandBarSystemObject to hoCommandBars
68671>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68672>>>>>        If hoClientArea Begin
68674>>>>>            // the clientarea's parent panel has message
68674>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
68675>>>>>        End
68675>>>>>>
68675>>>>>        Function_Return bOn
68676>>>>>    End_Function
68677>>>>>End_Class
68678>>>>>
68678>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
68679>>>>>    
68679>>>>>    Procedure Construct_Object
68681>>>>>        Forward Send Construct_Object
68683>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
68684>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
68685>>>>>        Set psDescription to C_$DescAutoArrangeIcons
68686>>>>>        Set psCategory to C_$CategoryWindow
68687>>>>>    End_Procedure
68688>>>>>    
68688>>>>>    Procedure OnExecute Variant vCommandBarControl
68690>>>>>        Handle hoCommandBars hoClientArea
68690>>>>>        Get CommandBarSystemObject to hoCommandBars
68691>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68692>>>>>        If hoClientArea Begin
68694>>>>>            // the clientarea's parent panel has message
68694>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
68695>>>>>        End
68695>>>>>>
68695>>>>>    End_Procedure
68696>>>>>    
68696>>>>>    Function IsChecked Returns Boolean
68698>>>>>        Boolean bOn
68698>>>>>        Handle hoCommandBars hoClientArea
68698>>>>>        Get CommandBarSystemObject to hoCommandBars
68699>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68700>>>>>        If hoClientArea Begin
68702>>>>>            // the clientarea's parent panel has message
68702>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
68703>>>>>        End
68703>>>>>>
68703>>>>>        Function_Return bOn
68704>>>>>    End_Function
68705>>>>>End_Class
68706>>>>>
68706>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
68707>>>>>    
68707>>>>>    Procedure Construct_Object
68709>>>>>        Forward Send Construct_Object
68711>>>>>        Set psCaption to C_$CaptionRestoreMenus
68712>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
68713>>>>>        Set psDescription to C_$DescRestoreMenus
68714>>>>>        Set psCategory to C_$CategoryWindow
68715>>>>>    End_Procedure
68716>>>>>    
68716>>>>>    Procedure OnExecute Variant vCommandBarControl
68718>>>>>        Handle hoCommandBars
68718>>>>>        Get CommandBarSystemObject to hoCommandBars
68719>>>>>        Send RestoreLayout of hoCommandBars
68720>>>>>    End_Procedure
68721>>>>>    
68721>>>>>End_Class
68722>>>>>
68722>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
68723>>>>>    
68723>>>>>    Procedure Construct_Object
68725>>>>>        Forward Send Construct_Object
68727>>>>>        Set psCaption to C_$CaptionCascade
68728>>>>>        Set psToolTip to C_$ToolTipCascade
68729>>>>>        Set psDescription to  C_$DescCascade
68730>>>>>        Set psImage to "ActionCascade.ico"
68731>>>>>        Set psCategory to C_$CategoryWindow
68732>>>>>    End_Procedure
68733>>>>>    
68733>>>>>    Procedure OnExecute Variant vCommandBarControl
68735>>>>>        Handle hoCommandBars hoClientArea
68735>>>>>        Get CommandBarSystemObject to hoCommandBars
68736>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68737>>>>>        If hoClientArea Begin
68739>>>>>            Send Cascade_Windows of hoClientArea
68740>>>>>        End
68740>>>>>>
68740>>>>>    End_Procedure
68741>>>>>End_Class
68742>>>>>
68742>>>>>Class cCJTileHorizontally is a cCJMenuItem
68743>>>>>    
68743>>>>>    Procedure Construct_Object
68745>>>>>        Forward Send Construct_Object
68747>>>>>        Set psCaption to C_$CaptionTileHorizontally
68748>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
68749>>>>>        Set psDescription to  C_$DescTileHorizontally
68750>>>>>        Set psImage to "ActionTileHorizontally.ico"
68751>>>>>        Set psCategory to C_$CategoryWindow
68752>>>>>    End_Procedure
68753>>>>>    
68753>>>>>    Procedure OnExecute Variant vCommandBarControl
68755>>>>>        Handle hoCommandBars hoClientArea
68755>>>>>        Get CommandBarSystemObject to hoCommandBars
68756>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68757>>>>>        If hoClientArea Begin
68759>>>>>            Send Tile_Windows_Horizontal of hoClientArea
68760>>>>>        End
68760>>>>>>
68760>>>>>    End_Procedure
68761>>>>>End_Class
68762>>>>>
68762>>>>>Class cCJTileVertically is a cCJMenuItem
68763>>>>>    
68763>>>>>    Procedure Construct_Object
68765>>>>>        Forward Send Construct_Object
68767>>>>>        Set psCaption to C_$CaptionTileVertically
68768>>>>>        Set psToolTip to C_$ToolTipTileVertically
68769>>>>>        Set psDescription to  C_$DescTileVertically
68770>>>>>        Set psImage to "ActionTileVertically.ico"
68771>>>>>        Set psCategory to C_$CategoryWindow
68772>>>>>    End_Procedure
68773>>>>>    
68773>>>>>    Procedure OnExecute Variant vCommandBarControl
68775>>>>>        Handle hoCommandBars hoClientArea
68775>>>>>        Get CommandBarSystemObject to hoCommandBars
68776>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68777>>>>>        If hoClientArea Begin
68779>>>>>            Send Tile_Windows_Vertical of hoClientArea
68780>>>>>        End
68780>>>>>>
68780>>>>>    End_Procedure
68781>>>>>End_Class
68782>>>>>
68782>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
68783>>>>>    
68783>>>>>    Procedure Construct_Object
68785>>>>>        Forward Send Construct_Object
68787>>>>>        Set psCaption to C_$CaptionMinimizeWindows
68788>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
68789>>>>>        Set psDescription to  C_$DescMinimizeWindows
68790>>>>>        Set psCategory to C_$CategoryWindow
68791>>>>>    End_Procedure
68792>>>>>    
68792>>>>>    Procedure OnExecute Variant vCommandBarControl
68794>>>>>        Handle hoCommandBars hoClientArea
68794>>>>>        Get CommandBarSystemObject to hoCommandBars
68795>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68796>>>>>        If hoClientArea Begin
68798>>>>>            // the clientarea's parent panel has message
68798>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
68799>>>>>        End
68799>>>>>>
68799>>>>>    End_Procedure
68800>>>>>End_Class
68801>>>>>
68801>>>>>
68801>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
68802>>>>>    
68802>>>>>    Procedure Construct_Object
68804>>>>>        Forward Send Construct_Object
68806>>>>>        Set psCaption to C_$CaptionRestoreWindows
68807>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
68808>>>>>        Set psDescription to  C_$DescRestoreWindows
68809>>>>>        Set psCategory to C_$CategoryWindow
68810>>>>>    End_Procedure
68811>>>>>    
68811>>>>>    Procedure OnExecute Variant vCommandBarControl
68813>>>>>        Handle hoCommandBars hoClientArea
68813>>>>>        Get CommandBarSystemObject to hoCommandBars
68814>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68815>>>>>        If hoClientArea Begin
68817>>>>>            // the clientarea's parent panel has message
68817>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
68818>>>>>        End
68818>>>>>>
68818>>>>>    End_Procedure
68819>>>>>End_Class
68820>>>>>
68820>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
68821>>>>>    
68821>>>>>    Procedure Construct_Object
68823>>>>>        Forward Send Construct_Object
68825>>>>>        Set psCaption to C_$CaptionArrangeIcons
68826>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
68827>>>>>        Set psDescription to  C_$DescArrangeIcons
68828>>>>>        Set psCategory to C_$CategoryWindow
68829>>>>>    End_Procedure
68830>>>>>    
68830>>>>>    Procedure OnExecute Variant vCommandBarControl
68832>>>>>        Handle hoCommandBars hoClientArea
68832>>>>>        Get CommandBarSystemObject to hoCommandBars
68833>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68834>>>>>        If hoClientArea Begin
68836>>>>>            Send Arrange_Icons of hoClientArea
68837>>>>>        End
68837>>>>>>
68837>>>>>    End_Procedure
68838>>>>>    
68838>>>>>End_Class
68839>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJAboutMenuItem.pkg)
68839>>>>>Use cCJCommandBarSystem.pkg
68839>>>>>Use LanguageText.pkg
68839>>>>>
68839>>>>>// It is expected that if you use this class that you provide an about object that is
68839>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
68839>>>>>// because you may wish to create your own custom about package.
68839>>>>>
68839>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
68840>>>>>
68840>>>>>    Procedure Construct_Object
68842>>>>>        Forward Send Construct_Object
68844>>>>>        Set psCaption to C_$CaptionAbout
68845>>>>>        Set psDescription to C_$ToolTipAbout
68846>>>>>        Set psToolTip to C_$DescAbout
68847>>>>>        Set psImage to "ActionAbout.ico"
68848>>>>>        Set psCategory to C_$CategoryHelp
68849>>>>>    End_Procedure
68850>>>>>    
68850>>>>>    Procedure OnExecute Variant vCommandBarControl
68852>>>>>        Handle hoCommandBars hoClientArea
68852>>>>>        Get CommandBarSystemObject to hoCommandBars
68853>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68854>>>>>        If hoClientArea Begin
68856>>>>>            Send Activate_About of hoClientArea
68857>>>>>        End
68857>>>>>>
68857>>>>>    End_Procedure
68858>>>>>
68858>>>>>End_Class
68859>>>>>
68859>>>>>
68859>>>Use cCJDeoMenuItemClasses.pkg
68859>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJMDIWindowsMenuItem.pkg)
68859>>>>>Use cCJCommandBarSystem.pkg
68859>>>>>
68859>>>>>Register_Function Client_ID Returns Integer
68859>>>>>
68859>>>>>// only used by cCJMDIWIndowsMenuItem
68859>>>>>Class cCJMDIWindowItem is a cCJMenuItem
68860>>>>>    
68860>>>>>    Procedure Construct_Object
68862>>>>>        Forward Send Construct_Object
68864>>>>>        Property Handle phWindow 0 // object id of view
68865>>>>>        Set pbControlFlagNoMovable to True
68866>>>>>        Set pbActiveUpdate to True
68867>>>>>    End_Procedure
68868>>>>>    
68868>>>>>    Procedure OnExecute Variant vCommandBarControl
68870>>>>>        Handle hWindow
68870>>>>>        Get phWindow to hWindow
68871>>>>>        Send Activate_View of hWindow
68872>>>>>    End_Procedure
68873>>>>>    
68873>>>>>End_Class
68874>>>>>
68874>>>>>
68874>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
68875>>>>>    
68875>>>>>    Procedure Construct_Object
68877>>>>>        Forward Send Construct_Object
68879>>>>>        Property Handle[] phArrayOfWindows
68880>>>>>        Set peControlType to xtpControlPopup
68881>>>>>        Set psCategory to C_$CategoryWindow
68882>>>>>    End_Procedure
68883>>>>>    
68883>>>>>    // This adds MDI windows to the existing menu items.
68883>>>>>    // This removes any existing windows menus and always adds a new set to the end
68883>>>>>    
68883>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
68885>>>>>        Handle  hClientArea hView
68885>>>>>        String  sLabel
68885>>>>>        Integer i iWindows
68885>>>>>        Handle[] hArrayOfWindows
68886>>>>>        Variant vItem
68886>>>>>        
68886>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
68886>>>>>        // also assume that destroying an action removes all menu instances of that action
68886>>>>>        Get phArrayOfWindows to hArrayOfWindows
68887>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
68888>>>>>        For i from 0 to (iWindows-1)
68894>>>>>>
68894>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
68895>>>>>        Loop
68896>>>>>>
68896>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
68897>>>>>        
68897>>>>>        // Add all views to this menu. Create the action and add the item
68897>>>>>        Move 0 to i
68898>>>>>        Get Client_Id to hClientArea // object id of client area
68899>>>>>        If (hClientArea > 0) Begin
68901>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
68902>>>>>            While (hView <> 0)
68906>>>>>                If (Active_State(hView)) Begin
68908>>>>>                    // create the action
68908>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
68909>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
68910>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
68911>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
68912>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
68914>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
68915>>>>>                    End
68915>>>>>>
68915>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
68916>>>>>                    If (i=0) Begin
68918>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
68919>>>>>                    End
68919>>>>>>
68919>>>>>                    // Create a menu item for this action
68919>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
68920>>>>>                    Increment i
68921>>>>>                End
68921>>>>>>
68921>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
68922>>>>>            Loop
68923>>>>>>
68923>>>>>        End
68923>>>>>>
68923>>>>>        
68923>>>>>        Set phArrayOfWindows to hArrayOfWindows
68924>>>>>        
68924>>>>>    End_Procedure
68925>>>>>    
68925>>>>>End_Class
68926>
68926>String jjkjkk
68926>
68926>
68926>
68926>Object oHtmlHelp is a cHtmlHelp
68928>End_Object
68929>
68929>Object oApplication is a cApplication
68931>    Set peHelpType to htHtmlHelp
68932>
68932>    Object oConnection is a cConnection
68934>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 20.0\Pkg\LoginEncryption.pkg)
68934>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cLoginEncryption.pkg)
68934>>>>>Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCryptographerEx.pkg)
68934>>>>>>>Use VdfBase.pkg
68934>>>>>>>
68934>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 20.0\Pkg\CryptographerConstants.pkg)
68934>>>>>>>>>//   Author  : Ulbe Stellema
68934>>>>>>>>>// Algorithm classes
68934>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
68934>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
68934>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
68934>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
68934>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
68934>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
68934>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
68934>>>>>>>>>
68934>>>>>>>>>// Algorithm types
68934>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
68934>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
68934>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
68934>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
68934>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
68934>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
68934>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
68934>>>>>>>>>
68934>>>>>>>>>// Generic sub-ids
68934>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
68934>>>>>>>>>
68934>>>>>>>>>// RSA sub-ids
68934>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
68934>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
68934>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
68934>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
68934>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
68934>>>>>>>>>
68934>>>>>>>>>// DSS sub-ids
68934>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
68934>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
68934>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
68934>>>>>>>>>
68934>>>>>>>>>// DES sub_ids
68934>>>>>>>>>Define ALG_SID_DES                      for 1
68934>>>>>>>>>Define ALG_SID_3DES                     for 3
68934>>>>>>>>>Define ALG_SID_DESX                     for 4
68934>>>>>>>>>Define ALG_SID_IDEA                     for 5
68934>>>>>>>>>Define ALG_SID_CAST                     for 6
68934>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
68934>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
68934>>>>>>>>>Define ALG_SID_3DES_112                 for 9
68934>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
68934>>>>>>>>>Define ALG_SID_RC5                      for 13
68934>>>>>>>>>Define ALG_SID_AES_128                  for 14
68934>>>>>>>>>Define ALG_SID_AES_192                  for 15
68934>>>>>>>>>Define ALG_SID_AES_256                  for 16
68934>>>>>>>>>Define ALG_SID_AES                      for 17
68934>>>>>>>>>
68934>>>>>>>>>// Fortezza sub-ids
68934>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
68934>>>>>>>>>Define ALG_SID_TEK                      for 11
68934>>>>>>>>>
68934>>>>>>>>>// RC2 sub-ids
68934>>>>>>>>>Define ALG_SID_RC2                      for 2
68934>>>>>>>>>
68934>>>>>>>>>// Stream cipher sub-ids
68934>>>>>>>>>Define ALG_SID_RC4                      for 1
68934>>>>>>>>>Define ALG_SID_SEAL                     for 2
68934>>>>>>>>>
68934>>>>>>>>>// Diffie-Hellman sub-ids
68934>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
68934>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
68934>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
68934>>>>>>>>>Define ALG_SID_KEA                      for 4
68934>>>>>>>>>
68934>>>>>>>>>// Hash sub ids
68934>>>>>>>>>Define ALG_SID_MD2                      for 1
68934>>>>>>>>>Define ALG_SID_MD4                      for 2
68934>>>>>>>>>Define ALG_SID_MD5                      for 3
68934>>>>>>>>>Define ALG_SID_SHA                      for 4
68934>>>>>>>>>Define ALG_SID_SHA1                     for 4
68934>>>>>>>>>Define ALG_SID_MAC                      for 5
68934>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
68934>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
68934>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
68934>>>>>>>>>Define ALG_SID_HMAC                     for 9
68934>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
68934>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
68934>>>>>>>>>Define ALG_SID_SHA_256                  for 12
68934>>>>>>>>>Define ALG_SID_SHA_384                  for 13
68934>>>>>>>>>Define ALG_SID_SHA_512                  for 14
68934>>>>>>>>>
68934>>>>>>>>>// secure channel sub ids
68934>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
68934>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
68934>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
68934>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
68934>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
68934>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
68934>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
68934>>>>>>>>>
68934>>>>>>>>>// algorithm identifier definitions
68934>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
68934>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
68934>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
68934>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
68934>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
68934>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
68934>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
68934>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
68934>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
68934>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
68934>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
68934>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
68934>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
68934>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
68934>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
68934>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
68934>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
68934>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
68934>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
68934>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
68934>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
68934>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
68934>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
68934>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
68934>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
68934>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
68934>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
68934>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
68934>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
68934>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
68934>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
68934>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
68934>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
68934>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
68934>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
68934>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
68934>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
68934>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
68934>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
68934>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
68934>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
68934>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
68934>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
68934>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
68934>>>>>>>>>
68934>>>>>>>>>// Providers
68934>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
68934>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
68934>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
68934>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
68934>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
68934>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
68934>>>>>>>>>
68934>>>>>>>>>// dwFlags definitions for CryptAcquireContext
68934>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
68934>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
68934>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
68934>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
68934>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
68934>>>>>>>>>
68934>>>>>>>>>// dwFlag definitions for CryptGenKey
68934>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
68934>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
68934>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
68934>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
68934>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
68934>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
68934>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
68934>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
68934>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
68934>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
68934>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
68934>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
68934>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
68934>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
68934>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
68934>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
68934>>>>>>>>>
68934>>>>>>>>>// Provider types
68934>>>>>>>>>Define PROV_RSA_FULL                    for 1
68934>>>>>>>>>Define PROV_RSA_SIG                     for 2
68934>>>>>>>>>Define PROV_DSS                         for 3
68934>>>>>>>>>Define PROV_FORTEZZA                    for 4
68934>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
68934>>>>>>>>>Define PROV_SSL                         for 6
68934>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
68934>>>>>>>>>Define PROV_DSS_DH                      for 13
68934>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
68934>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
68934>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
68934>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
68934>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
68934>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
68934>>>>>>>>>Define PROV_RNG                         for 21
68934>>>>>>>>>Define PROV_INTEL_SEC                   for 22
68934>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
68934>>>>>>>>>Define PROV_RSA_AES                     for 24
68934>>>>>>>>>
68934>>>>>>>>>// KP_MODE
68934>>>>>>>>>// KP_MODE
68934>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
68934>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
68934>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
68934>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
68934>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
68934>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
68934>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
68934>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
68934>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
68934>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
68934>>>>>>>>>
68934>>>>>>>>>// dwParam definitions for CryptGetKeyParam
68934>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
68934>>>>>>>>>Define KP_SALT                          for 2       // Salt value
68934>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
68934>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
68934>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
68934>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
68934>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
68934>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
68934>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
68934>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
68934>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
68934>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
68934>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
68934>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
68934>>>>>>>>>Define KP_Y                             for 15      // Y value
68934>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
68934>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
68934>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
68934>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
68934>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
68934>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
68934>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
68934>>>>>>>>>Define KP_RP                            for 23
68934>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
68934>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
68934>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
68934>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
68934>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
68934>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
68934>>>>>>>>>Define KP_KEYVAL                        for 30
68934>>>>>>>>>Define KP_ADMIN_PIN                     for 31
68934>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
68934>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
68934>>>>>>>>>Define KP_PREHASH                       for 34
68934>>>>>>>>>Define KP_ROUNDS                        for 35
68934>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
68934>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
68934>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
68934>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
68934>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
68934>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
68934>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
68934>>>>>>>>>
68934>>>>>>>>>// dwParam definitions for CryptGetHashParam
68934>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
68934>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
68934>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
68934>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
68934>>>>>>>>>
68934>>>>>>>>>// key BLOB types
68934>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
68934>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
68934>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
68934>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
68934>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
68934>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
68934>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
68934>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
68934>>>>>>>>>
68934>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
68934>>>>>>>>>
68934>>>>>>>>>// KP_PADDING
68934>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
68934>>>>>>>>>Define RANDOM_PADDING                   for 2
68934>>>>>>>>>Define ZERO_PADDING                     for 3
68934>>>>>>>>>
68934>>>>>>>>>//  Structure cryptimportkey
68934>>>>>>>>>Struct PUBLICKEYSTRUC
68934>>>>>>>>>    UChar    bType
68934>>>>>>>>>    UChar    bVersion
68934>>>>>>>>>    UShort   reserved
68934>>>>>>>>>    UInteger aiKeyAlg
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct tPLAINTEXTKEYBLOB
68934>>>>>>>>>    PUBLICKEYSTRUC hdr
68934>>>>>>>>>    PUBLICKEYSTRUC hdr
68934>>>>>>>>>    UInteger       dwKeySize
68934>>>>>>>>>//    UChar[]        rgbKeyData
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
68934>>>>>>>>>Struct HMAC_INFO
68934>>>>>>>>>    UInteger HashAlgid
68934>>>>>>>>>    Pointer pbInnerString
68934>>>>>>>>>    DWord cbInnerString
68934>>>>>>>>>    Pointer pbOuterString
68934>>>>>>>>>    DWord cbOuterString
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct BLOBHEADER
68934>>>>>>>>>    UChar   bType
68934>>>>>>>>>    UChar   bVersion
68934>>>>>>>>>    Short   reserved
68934>>>>>>>>>    Integer aiKeyAlg
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct CryptoBlob
68934>>>>>>>>>    BLOBHEADER  header
68934>>>>>>>>>    BLOBHEADER  header
68934>>>>>>>>>    Integer     cbKeySize
68934>>>>>>>>>    UChar[32]   rgbKeyData
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
68934>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
68935>>>>>>>>>
68935>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
68935>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
68937>>>>>>>>>    
68937>>>>>>>>>    Boolean bResult
68937>>>>>>>>>    UWide   uwContainer uwProvider
68937>>>>>>>>>    UWide   uwContainer uwProvider
68937>>>>>>>>>
68937>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
68938>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
68939>>>>>>>>>    
68939>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
68940>>>>>>>>>
68940>>>>>>>>>    Function_Return bResult
68941>>>>>>>>>End_Function
68942>>>>>>>>>
68942>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
68943>>>>>>>>>
68943>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
68944>>>>>>>>>
68944>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
68945>>>>>>>>>
68945>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
68946>>>>>>>>>
68946>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68947>>>>>>>>>
68947>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
68948>>>>>>>>>
68948>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
68949>>>>>>>>>
68949>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68950>>>>>>>>>
68950>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
68951>>>>>>>>>    
68951>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
68952>>>>>>>>>
68952>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
68953>>>>>>>>>
68953>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
68954>>>>>>>>>
68954>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
68955>>>>>>>>>    
68955>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
68956>>>>>>>>>    
68956>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68957>>>>>>>>>    
68957>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
68958>>>>>>>
68958>>>>>>>Class cCryptographerEx is a cObject
68959>>>>>>>    
68959>>>>>>>    Procedure Construct_Object
68961>>>>>>>        Forward Send Construct_Object
68963>>>>>>>        
68963>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
68964>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
68965>>>>>>>        Property Integer    piCipher    CALG_RC4
68966>>>>>>>        Property Integer    piHash      CALG_MD5
68967>>>>>>>        
68967>>>>>>>        // Private properties
68967>>>>>>>        Property Handle     Private_phProv
68968>>>>>>>        
68968>>>>>>>        // Block cipher properties
68968>>>>>>>        Property UChar[]    paKey
68969>>>>>>>        Property UChar[]    paIV
68970>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
68971>>>>>>>        Property Integer    piKeyType       CALG_AES_256
68972>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
68973>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
68974>>>>>>>        Property Integer    piBlockSize     16
68975>>>>>>>    End_Procedure
68976>>>>>>>    
68976>>>>>>>    
68976>>>>>>>    // Acquire key container handle
68976>>>>>>>    Function AcquireContext Returns Handle
68978>>>>>>>        Integer iProvider
68978>>>>>>>        WString wProvider
68978>>>>>>>        Handle hProv
68978>>>>>>>        Boolean bOk
68978>>>>>>>        Pointer pProv
68978>>>>>>>        
68978>>>>>>>        Move 0 to hProv
68979>>>>>>>        Get piProvider to iProvider
68980>>>>>>>        Get psProvider to wProvider
68981>>>>>>>        
68981>>>>>>>        //  Determine address to be passed as provider
68981>>>>>>>        If (Trim(wProvider) <> "") Begin
68983>>>>>>>            Move (AddressOf(wProvider)) to pProv
68984>>>>>>>        End
68984>>>>>>>>
68984>>>>>>>        Else Begin
68985>>>>>>>            Move 0 to pProv
68986>>>>>>>        End
68986>>>>>>>>
68986>>>>>>>        
68986>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
68986>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
68987>>>>>>>        If (not(bOk) or hProv = 0) Begin
68989>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
68990>>>>>>>        End
68990>>>>>>>>
68990>>>>>>>        
68990>>>>>>>        If (not(bOk) or hProv = 0) Begin
68992>>>>>>>            // Fallback to original
68992>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
68993>>>>>>>            
68993>>>>>>>            If (not(bOk) or hProv = 0) Begin
68995>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
68996>>>>>>>            End
68996>>>>>>>>
68996>>>>>>>        End
68996>>>>>>>>
68996>>>>>>>        Set Private_phProv to hProv
68997>>>>>>>        
68997>>>>>>>        Function_Return hProv
68998>>>>>>>    End_Function
68999>>>>>>>    
68999>>>>>>>    // Releases key container handle
68999>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
69001>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
69002>>>>>>>    End_Function
69003>>>>>>>    
69003>>>>>>>    // Creates hash object
69003>>>>>>>    Function CreateHash Handle hProv Returns Handle
69005>>>>>>>        Integer iAlgorithm
69005>>>>>>>        Handle hHash
69005>>>>>>>        Boolean bOk
69005>>>>>>>        
69005>>>>>>>        Move 0 to hHash
69006>>>>>>>        Get piHash to iAlgorithm
69007>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
69008>>>>>>>        
69008>>>>>>>        Function_Return hHash
69009>>>>>>>    End_Function
69010>>>>>>>    
69010>>>>>>>    // Destroys the hash object
69010>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
69012>>>>>>>        Function_Return (CryptDestroyHash(hHash))
69013>>>>>>>    End_Function
69014>>>>>>>    
69014>>>>>>>    // Adds data to hash object
69014>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
69016>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
69017>>>>>>>    End_Function
69018>>>>>>>    
69018>>>>>>>    // Generates session key
69018>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
69020>>>>>>>        Integer iAlgorithm
69020>>>>>>>        Handle hKey
69020>>>>>>>        Boolean bOk
69020>>>>>>>        
69020>>>>>>>        Move 0 to hKey
69021>>>>>>>        Get piCipher to iAlgorithm
69022>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
69023>>>>>>>        
69023>>>>>>>        Function_Return hKey
69024>>>>>>>    End_Function
69025>>>>>>>    
69025>>>>>>>    // Imports a plain text key
69025>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
69027>>>>>>>        tPLAINTEXTKEYBLOB blobhead
69027>>>>>>>        tPLAINTEXTKEYBLOB blobhead
69027>>>>>>>        Boolean   bSuccess
69027>>>>>>>        Handle    hKey
69027>>>>>>>        Integer   iHeadSize iKeySize
69027>>>>>>>        UChar[]   ucaKeyblob
69028>>>>>>>        Integer iVoid
69028>>>>>>>        
69028>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
69029>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
69030>>>>>>>        
69030>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
69031>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
69032>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
69033>>>>>>>        Move iKeySize           to blobhead.dwKeySize
69034>>>>>>>        
69034>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
69035>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
69036>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
69037>>>>>>>        
69037>>>>>>>        Move 0 to hKey
69038>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
69039>>>>>>>        If (not(bSuccess)) Begin
69041>>>>>>>            Move (ShowLastError()) to iVoid
69042>>>>>>>        End
69042>>>>>>>>
69042>>>>>>>        
69042>>>>>>>        Function_Return hKey
69043>>>>>>>    End_Function
69044>>>>>>>    
69044>>>>>>>    // Destroys the key
69044>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
69046>>>>>>>        Function_Return (CryptDestroyKey(hKey))
69047>>>>>>>    End_Function
69048>>>>>>>    
69048>>>>>>>    // Retrieves key data
69048>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
69050>>>>>>>        Integer iBuffer iLen
69050>>>>>>>        Boolean bOk
69050>>>>>>>        
69050>>>>>>>        Move (SizeOfType(Integer)) to iLen
69051>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
69052>>>>>>>        Function_Return iBuffer
69053>>>>>>>    End_Function
69054>>>>>>>    
69054>>>>>>>    // Retrieves a hash value
69054>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
69056>>>>>>>        UChar[] ucHash
69057>>>>>>>        Integer liResult
69057>>>>>>>        DWord   dwDataLen
69057>>>>>>>        
69057>>>>>>>        Move 0 to dwDataLen
69058>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
69059>>>>>>>        If (liResult = 0) ;            Function_Return ""
69062>>>>>>>        
69062>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
69063>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
69064>>>>>>>        If (liResult = 0) ;            Function_Return ""
69067>>>>>>>        
69067>>>>>>>        Function_Return ucHash
69068>>>>>>>    End_Function
69069>>>>>>>
69069>>>>>>>    // Encrypts data
69069>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
69071>>>>>>>        Handle hProv hHash hKey
69071>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
69071>>>>>>>        Boolean bOk
69071>>>>>>>        
69071>>>>>>>        Get AcquireContext to hProv
69072>>>>>>>        If (hProv) Begin
69074>>>>>>>            Get CreateHash hProv to hHash
69075>>>>>>>            If (hHash) Begin
69077>>>>>>>                Get HashData hHash ucPassword to bOk
69078>>>>>>>                If (bOk) Begin
69080>>>>>>>                    Get piCipher to iAlgorithm
69081>>>>>>>                    Get DeriveKey hProv hHash to hKey
69082>>>>>>>                End
69082>>>>>>>>
69082>>>>>>>                Get DestroyHash hHash to bOk
69083>>>>>>>            End
69083>>>>>>>>
69083>>>>>>>            
69083>>>>>>>            If (hKey) Begin
69085>>>>>>>                //  First call to determine resulting data size
69085>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
69086>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
69087>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
69088>>>>>>>                
69088>>>>>>>                //  Reserve space in string
69088>>>>>>>                If (iDataLen < iCipherLen) Begin
69090>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
69091>>>>>>>                End
69091>>>>>>>>
69091>>>>>>>                
69091>>>>>>>                //  Call to really decrypt
69091>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
69092>>>>>>>                //If (not(bOk)) Begin
69092>>>>>>>                //Move "" to sData
69092>>>>>>>                //Move (GetLastError()) to iErr
69092>>>>>>>                //End
69092>>>>>>>                
69092>>>>>>>                Get DestroyKey hKey to bOk
69093>>>>>>>            End 
69093>>>>>>>>
69093>>>>>>>            Get ReleaseContext hProv to bOk
69094>>>>>>>        End 
69094>>>>>>>>
69094>>>>>>>        Function_Return ucData
69095>>>>>>>    End_Function
69096>>>>>>>    
69096>>>>>>>    // Decrypts data
69096>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
69098>>>>>>>        Handle hProv hHash hKey
69098>>>>>>>        Integer iAlgorithm iDataLen
69098>>>>>>>        Boolean bOk
69098>>>>>>>        
69098>>>>>>>        Get AcquireContext to hProv
69099>>>>>>>        If (hProv) Begin
69101>>>>>>>            Get CreateHash hProv to hHash
69102>>>>>>>            If (hHash) Begin
69104>>>>>>>                Get HashData hHash ucPassword to bOk
69105>>>>>>>                If (bOk) Begin
69107>>>>>>>                    Get piCipher to iAlgorithm
69108>>>>>>>                    Get DeriveKey hProv hHash to hKey
69109>>>>>>>                End
69109>>>>>>>>
69109>>>>>>>                Get DestroyHash hHash to bOk
69110>>>>>>>            End
69110>>>>>>>>
69110>>>>>>>            
69110>>>>>>>            If (hKey) Begin
69112>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
69113>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
69114>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
69114>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
69116>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
69117>>>>>>>                End
69117>>>>>>>>
69117>>>>>>>                
69117>>>>>>>                Get DestroyKey hKey to bOk
69118>>>>>>>            End
69118>>>>>>>>
69118>>>>>>>            Get ReleaseContext hProv to bOk
69119>>>>>>>        End
69119>>>>>>>>
69119>>>>>>>        Function_Return ucData
69120>>>>>>>    End_Function
69121>>>>>>>    
69121>>>>>>>    // Creates a key
69121>>>>>>>    Function CreateKey Handle hProv Returns Handle
69123>>>>>>>        Integer iAlg iType iByte iLength iSize
69123>>>>>>>        CryptoBlob keyBlob
69123>>>>>>>        CryptoBlob keyBlob
69123>>>>>>>        Boolean bOk
69123>>>>>>>        Handle hKey
69123>>>>>>>        UChar[] aKey
69124>>>>>>>
69124>>>>>>>        Get paKey to aKey
69125>>>>>>>        Get piKeyAlg to iAlg
69126>>>>>>>        Get piKeyType to iType
69127>>>>>>>        Move iAlg                   to keyBlob.header.bType
69128>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
69129>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
69130>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
69131>>>>>>>        
69131>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
69132>>>>>>>        For iByte from 0 to iLength
69138>>>>>>>>
69138>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
69139>>>>>>>        Loop
69140>>>>>>>>
69140>>>>>>>        
69140>>>>>>>        Move 0 to hKey
69141>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
69142>>>>>>>        Function_Return hKey
69143>>>>>>>    End_Function
69144>>>>>>>    
69144>>>>>>>    // Sets the key parameters
69144>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
69146>>>>>>>        Integer iPadding iMode
69146>>>>>>>        Boolean bOk
69146>>>>>>>        UChar[] aIV
69147>>>>>>>        
69147>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
69147>>>>>>>        //For iByte from 0 to iLength
69147>>>>>>>        //    Move iByte to aIV[iByte]
69147>>>>>>>        //Loop
69147>>>>>>>
69147>>>>>>>        // Set initialization vector
69147>>>>>>>        Get paIV to aIV
69148>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
69149>>>>>>>        If (bOk) Begin
69151>>>>>>>            // Set padding
69151>>>>>>>            Get piKeyPadding to iPadding
69152>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
69153>>>>>>>            If (bOk) Begin
69155>>>>>>>                // Set move
69155>>>>>>>                Get piKeyMode to iMode
69156>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
69157>>>>>>>            End
69157>>>>>>>>
69157>>>>>>>        End
69157>>>>>>>>
69157>>>>>>>        Function_Return bOk        
69158>>>>>>>    End_Function
69159>>>>>>>    
69159>>>>>>>    // Encrypts using block cipher
69159>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
69161>>>>>>>        Handle hProv hKey
69161>>>>>>>        Integer iLen iSize iBlocks
69161>>>>>>>        Boolean bOk
69161>>>>>>>        
69161>>>>>>>        Get AcquireContext to hProv
69162>>>>>>>        If (hProv) Begin
69164>>>>>>>            // Create key
69164>>>>>>>            Get CreateKey hProv to hKey
69165>>>>>>>            If (hKey) Begin
69167>>>>>>>                Get SetKeyParameters hKey to bOk
69168>>>>>>>                If (bOk) Begin
69170>>>>>>>                    // Buffer for block ciphers can be up to block length larger
69170>>>>>>>                    Get piBlockSize to iSize
69171>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
69172>>>>>>>                    
69172>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
69173>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
69174>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
69175>>>>>>>                End
69175>>>>>>>>
69175>>>>>>>                Get DestroyKey hKey to bOk
69176>>>>>>>            End
69176>>>>>>>>
69176>>>>>>>            Get ReleaseContext hProv to bOk
69177>>>>>>>        End
69177>>>>>>>>
69177>>>>>>>        Function_Return ucData
69178>>>>>>>    End_Function
69179>>>>>>>    
69179>>>>>>>    // Decrypts using block cipher
69179>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
69181>>>>>>>        Handle hProv hKey
69181>>>>>>>        Integer iLen
69181>>>>>>>        Boolean bOk
69181>>>>>>>        
69181>>>>>>>        Get AcquireContext to hProv
69182>>>>>>>        If (hProv) Begin
69184>>>>>>>            // Create key
69184>>>>>>>            Get CreateKey hProv to hKey
69185>>>>>>>            If (hKey) Begin
69187>>>>>>>                Get SetKeyParameters hKey to bOk
69188>>>>>>>                If (bOk) Begin
69190>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
69191>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
69192>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
69193>>>>>>>                End
69193>>>>>>>>
69193>>>>>>>                Get DestroyKey hKey to bOk
69194>>>>>>>            End
69194>>>>>>>>
69194>>>>>>>            Get ReleaseContext hProv to bOk
69195>>>>>>>        End
69195>>>>>>>>
69195>>>>>>>        Function_Return ucData
69196>>>>>>>    End_Function
69197>>>>>>>    
69197>>>>>>>    
69197>>>>>>>    //  Generates random data.
69197>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
69199>>>>>>>        Handle hProv
69199>>>>>>>        UChar[] uaResult
69200>>>>>>>        Boolean bRes
69200>>>>>>>        
69200>>>>>>>        Get AcquireContext to hProv
69201>>>>>>>        
69201>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
69202>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
69203>>>>>>>        
69203>>>>>>>        Get ReleaseContext hProv to bRes
69204>>>>>>>        
69204>>>>>>>        Function_Return uaResult
69205>>>>>>>    End_Function
69206>>>>>>>    
69206>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
69206>>>>>>>    Function GenerateRandomString Integer iLength Returns String
69208>>>>>>>        String sResult
69208>>>>>>>        UChar[] ucData
69209>>>>>>>        Pointer pBase64
69209>>>>>>>        Integer iVoid
69209>>>>>>>        
69209>>>>>>>        Get GenerateRandom iLength to ucData
69210>>>>>>>        
69210>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
69211>>>>>>>        Move (PointerToString(pBase64)) to sResult
69212>>>>>>>        Move (Free(pBase64)) to iVoid
69213>>>>>>>        
69213>>>>>>>        Function_Return (Left(sResult, iLength))
69214>>>>>>>    End_Function
69215>>>>>>>    
69215>>>>>>>End_Class
69216>>>>>
69216>>>>>Class cLoginEncryption is a cObject
69217>>>>>    
69217>>>>>    Procedure Construct_Object
69219>>>>>        Forward Send Construct_Object
69221>>>>>        // this must be set to a multi (40ish) character random key
69221>>>>>        Property String psEncryptPassword ""
69222>>>>>        
69222>>>>>        Object oDataCrypter is a cCryptographerEx
69224>>>>>            Set piHash to CALG_SHA_256
69225>>>>>            Set piCipher to CALG_AES_256
69226>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
69227>>>>>            Set piProvider to PROV_RSA_AES
69228>>>>>        End_Object
69229>>>>>    End_Procedure
69230>>>>>    
69230>>>>>    // This can be augmented to return a password encryption key using any
69230>>>>>    // hidden mechanism desired.
69230>>>>>    Function GetEncryptionPassword Returns String
69232>>>>>        String sPassword
69232>>>>>        Get psEncryptPassword to sPassword
69233>>>>>        Function_Return sPassword
69234>>>>>    End_Function
69235>>>>>    
69235>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
69235>>>>>    //
69235>>>>>    // Params:
69235>>>>>    //   sPlainText     String to encrypt.
69235>>>>>    // Returns:
69235>>>>>    //   Base64 encoded hash.
69235>>>>>    Function EncryptPassword String sPlainText Returns String
69237>>>>>        String sEncryptPassword sBase64
69237>>>>>        UChar[] ucBinary
69238>>>>>        Pointer pBase64
69238>>>>>        Integer iVoid
69238>>>>>        
69238>>>>>        //  Encrypt Key
69238>>>>>        Get GetEncryptionPassword to sEncryptPassword
69239>>>>>        If (sEncryptPassword = "") Begin
69241>>>>>            Error DFERR_PROGRAM "No encryption password set"
69242>>>>>>
69242>>>>>        End
69242>>>>>>
69242>>>>>        
69242>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
69243>>>>>        
69243>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
69245>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
69246>>>>>>
69246>>>>>            Function_Return ""
69247>>>>>        End
69247>>>>>>
69247>>>>>        
69247>>>>>        //  Encode binary hash to Base64
69247>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
69248>>>>>        Move (PointerToString(pBase64)) to sBase64
69249>>>>>        Move (Free(pBase64)) to iVoid
69250>>>>>        
69250>>>>>        Function_Return sBase64
69251>>>>>    End_Function
69252>>>>>    
69252>>>>>    
69252>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
69252>>>>>    //
69252>>>>>    // Params:
69252>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
69252>>>>>    // Returns:
69252>>>>>    //   Readable plain text password
69252>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
69254>>>>>        String sEncryptPassword
69254>>>>>        UChar[] ucBinary ucPlain
69256>>>>>        Boolean bIsHex
69256>>>>>        Integer iLen iVoid
69256>>>>>        Pointer pBinary
69256>>>>>        
69256>>>>>        If (sBase64EncryptedPassword <> "") Begin
69258>>>>>            //  Decode from Base64
69258>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
69259>>>>>            
69259>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
69260>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
69261>>>>>                        
69261>>>>>            Move (Free(pBinary)) to iVoid
69262>>>>>            
69262>>>>>            //  Encrypted binary hash to string
69262>>>>>            Get GetEncryptionPassword to sEncryptPassword
69263>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
69264>>>>>        End
69264>>>>>>
69264>>>>>        
69264>>>>>        Function_Return (UCharArrayToString(ucPlain))
69265>>>>>    End_Function
69266>>>>>End_Class
69267>>>
69267>>>Object oLoginEncryption is a cLoginEncryption
69269>>>
69269>>>    // this must be created in your appsrc directory and must contain an encryption
69269>>>    // key that is set to psEncryptPassword. It will look something like this
69269>>>    //
69269>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
69269>>>    //  
Including file: LoginEncryptionKey.inc    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\LoginEncryptionKey.inc)
69269>>>>// Studio generated login encryption key
69269>>>>Set psEncryptPassword to "3dv{g#~d=DOf~}.pmM:e4lijC*_C`x>$@[,(v<cu"
69270>>>>
69270>>>    
69270>>>    // use this to register this object to your cConnection Object. This object
69270>>>    // must be created after the cConnection object
69270>>>    Move Self to ghoLoginEncryption
69271>>>End_Object
69272>        Use DatabaseLoginDialog.dg
Including file: DatabaseLoginDialog.dg    (C:\Program Files\DataFlex 20.0\Pkg\DatabaseLoginDialog.dg)
69272>>>
69272>>>Use Windows.pkg
69272>>>Use cConnection.pkg
69272>>>Use dfLine.pkg
69272>>>
69272>>>Object oDatabaseLoginDialog is a ModalPanel
69274>>>    Set Label to "Database Login"
69275>>>    Set Location to 2 2
69276>>>    Set Size to 110 211
69277>>>    
69277>>>    Property String psId
69279>>>    Property Boolean pbOk False
69281>>>    Property Boolean pbChanged False
69283>>>    Property Boolean pbAllowRemember True
69285>>>    
69285>>>    // this registers this object with the cConnection object.
69285>>>    Move Self to ghoLoginConnectDialog
69286>>>    
69286>>>    Object oUserIDForm is a Form
69288>>>        Set Label to "User Name"
69289>>>        Set Size to 12 85
69290>>>        Set Location to 34 79
69291>>>        Set Label_Col_Offset to 64
69292>>>        Set peAnchors to anTopLeftRight
69293>>>    End_Object
69294>>>    
69294>>>    Object oPwdForm is a Form
69296>>>        Set Size to 12 85
69297>>>        Set Location to 49 79
69298>>>        Set Label_Col_Offset to 64
69299>>>        Set Password_State to True
69300>>>        Set peAnchors to anTopLeftRight
69301>>>        Set Label to "Password"
69302>>>    End_Object
69303>>>    
69303>>>    Object oTrustedConnection is a CheckBox
69305>>>        Set Size to 10 50
69306>>>        Set Location to 65 79
69307>>>        Set Label to "Trusted Connection"
69308>>>    End_Object
69309>>>    
69309>>>    Object oRemember is a CheckBox
69311>>>        Set Size to 10 50
69312>>>        Set Location to 79 14
69313>>>        Set Label to "Remember and don't ask again"
69314>>>        Set Checked_State to True
69315>>>    End_Object
69316>>>    
69316>>>    Object oLogin_btn is a Button
69318>>>        Set Label to "&Login"
69319>>>        Set Location to 92 102
69320>>>        Set peAnchors to anBottomRight
69321>>>        Set Default_State to True
69322>>>        
69322>>>        Procedure OnClick
69325>>>            Boolean bTrust
69325>>>            String sUser sPwd sConn sErr sId
69325>>>            Integer iError
69325>>>            Get psId to sId
69326>>>            Get Value of oUserIDForm to sUser
69327>>>            Get Value of oPwdForm to sPwd
69328>>>            Get Checked_State of oTrustedConnection to bTrust
69329>>>            
69329>>>            Get LoginConnectIdNewCredentials of ghoConnection sId sUser sPwd bTrust to iError
69330>>>            If (iError=0) Begin
69332>>>                Set pbOk to True
69333>>>                Set pbChanged to True
69334>>>                Send Close_Panel
69335>>>            End
69335>>>>
69335>>>            Else Begin
69336>>>                Get psErrorText of ghoConnection to sErr
69337>>>                Send UserError sErr "Login Error"
69338>>>            End
69338>>>>
69338>>>        End_Procedure
69339>>>    End_Object
69340>>>    
69340>>>    Object oCancel_btn is a Button
69342>>>        Set Label to "&Cancel"
69343>>>        Set Location to 92 157
69344>>>        Set peAnchors to anBottomRight
69345>>>        
69345>>>        Procedure OnClick
69348>>>            Send Close_Panel
69349>>>        End_Procedure
69350>>>    End_Object
69351>>>    
69351>>>    Object oConnectionIdInfo is a TextBox
69353>>>        Set Size to 10 50
69354>>>        Set Location to 4 14
69355>>>        Set Label to 'Connection Id='
69356>>>    End_Object
69357>>>    
69357>>>    Object oConnectionServerInfo is a TextBox
69359>>>        Set Size to 10 50
69360>>>        Set Location to 16 14
69361>>>        Set Label to 'Server'
69362>>>    End_Object
69363>>>    
69363>>>    Object oLineControl1 is a LineControl
69365>>>        Set Size to 2 202
69366>>>        Set Location to 29 5
69367>>>    End_Object
69368>>>    
69368>>>    Function LoginConnectIdDialog String sId Returns Boolean
69371>>>        Boolean bOk bChanged bTrusted bAllowRemember bRemember
69371>>>        String sUser sPwd sDescription
69371>>>        tConnection Connect
69371>>>        tConnection Connect
69371>>>        
69371>>>        Get pbAllowRemember to bAllowRemember
69372>>>        
69372>>>        
69372>>>        If not bAllowRemember Begin
69374>>>            Set Enabled_State of oRemember to bRemember
69375>>>            Set Visible_State of oRemember to bRemember
69376>>>        End
69376>>>>
69376>>>        
69376>>>        Get ConnectionIdInfo of ghoConnection sId to Connect
69377>>>        Set Value of oConnectionIdInfo to ("Connection ID="+Connect.sId)
69378>>>        Set Value of oConnectionServerInfo to Connect.sString
69379>>>        
69379>>>        Set psId to sId
69380>>>        Set pbOk to False
69381>>>        Set pbChanged to False
69382>>>        Set Value of oUserIDForm to Connect.sUID
69383>>>        Set Value of oPwdForm to ""
69384>>>        
69384>>>        Send Popup
69385>>>        
69385>>>        Get pbOk to bOk
69386>>>        Get pbChanged to bChanged
69387>>>        If (bChanged and bOk) Begin
69389>>>            If bAllowRemember Begin
69391>>>                Get Checked_State of oRemember to bRemember
69392>>>                If bRemember Begin
69394>>>                    Get Checked_State of oTrustedConnection to bTrusted
69395>>>                    If not (bTrusted) Begin
69397>>>                        Get Value of oUserIDForm to sUser
69398>>>                        Get Value of oPwdForm to sPwd
69399>>>                    End
69399>>>>
69399>>>                    Get StoreConnectionIdCredentials of ghoConnection sId sUser sPwd bTrusted to bOk
69400>>>                End
69400>>>>
69400>>>            End
69400>>>>
69400>>>        End
69400>>>>
69400>>>        Function_Return bOk
69401>>>    End_Function
69402>>>    
69402>>>    
69402>>>    On_Key Key_Alt+Key_O Send KeyAction of oLogin_btn
69403>>>    On_Key Key_Alt+Key_L Send KeyAction of oCancel_btn
69404>>>End_Object
69405>>>
69405>    End_Object
69406>
69406>End_Object
69407>
69407>Object oToolTipController is a cToolTipController
69409>    Move Self to ghoToolTipController
69410>End_Object
69411>
69411>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 20.0\Pkg\oEditContextMenu.pkg)
69411>>>Use cCJStandardMenuItemClasses.pkg
69411>>>
69411>>>Object oEditContextMenu is a cCJContextMenu
69413>>>    
69413>>>    Move Self to Default_Form_Floating_Menu_ID
69414>>>    
69414>>>    Object oUndoMenuItem is a cCJUndoMenuItem
69416>>>    End_Object
69417>>>    
69417>>>    Object oCutMenuItem is a cCJCutMenuItem
69419>>>        Set pbControlBeginGroup to True
69420>>>    End_Object
69421>>>    
69421>>>    Object oCopyMenuItem is a cCJCopyMenuItem
69423>>>    End_Object
69424>>>
69424>>>    Object oPasteMenuItem is a cCJPasteMenuItem
69426>>>    End_Object
69427>>>
69427>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
69429>>>    End_Object
69430>>>
69430>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
69432>>>        Set pbControlBeginGroup to True
69433>>>    End_Object
69434>>>
69434>>>End_Object
69435>>>
69435>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\DataFlex 20.0\Pkg\oDEOEditContextMenu17.pkg)
69435>>>Use Windows.pkg
69435>>>Use cCJStandardMenuItemClasses.pkg
69435>>>Use cCJDeoMenuItemClasses.pkg
69435>>>
69435>>>
69435>>>Object oDEOEditContextMenu17 is a cCJContextMenu
69437>>>    
69437>>>    Move Self to Default_dbFloating_Menu_ID
69438>>>    
69438>>>    Object oUndoMenuItem is a cCJUndoMenuItem
69440>>>    End_Object
69441>>>    
69441>>>    Object oCutMenuItem is a cCJCutMenuItem
69443>>>        Set pbControlBeginGroup to True
69444>>>    End_Object
69445>>>    
69445>>>    Object oCopyMenuItem is a cCJCopyMenuItem
69447>>>    End_Object
69448>>>
69448>>>    Object oPasteMenuItem is a cCJPasteMenuItem
69450>>>    End_Object
69451>>>
69451>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
69453>>>    End_Object
69454>>>
69454>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
69456>>>        Set pbControlBeginGroup to True
69457>>>    End_Object
69458>>>
69458>>>    Object oPromptMenuItem is a cCJPromptMenuItem
69460>>>        Set pbControlBeginGroup to True
69461>>>    End_Object
69462>>>
69462>>>    Object oFindNextMenu is a cCJFindNextMenuItem
69464>>>        Set pbControlBeginGroup to True
69465>>>    End_Object
69466>>>
69466>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
69468>>>    End_Object
69469>>>
69469>>>    Object oClearMenuItem is a cCJClearMenuItem
69471>>>        Set pbControlBeginGroup to True
69472>>>    End_Object
69473>>>
69473>>>    Object oClearAllMenu is a cCJClearAllMenuItem
69475>>>    End_Object
69476>>>
69476>>>    Object oSaveMenu is a cCJSaveMenuItem
69478>>>    End_Object
69479>>>    
69479>>>    Object oDeleteMenu is a cCJDeleteMenuItem
69481>>>    End_Object
69482>>>
69482>>>    Object oRememberitem is a cCJRememberFieldMenuItem
69484>>>        Set pbControlBeginGroup to True
69485>>>    End_Object
69486>>>
69486>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
69488>>>    End_Object
69489>>>
69489>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
69491>>>    End_Object
69492>>>
69492>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
69494>>>    End_Object
69495>>>
69495>>>End_Object
69496>
69496>Object oMain is a Panel
69498>    Set Label To "My Project"
69499>    Set Location to 0 -1
69500>    Set Size to 300 450
69501>
69501>    Object oCommandBarSystem is a cCJCommandBarSystem
69503>        Set pbTimerUpdate to True
69504>        Set peVisualTheme to xtpThemeOffice2013Outlook
69505>        Set pbAutoResizeIcons to True
69506>
69506>        Procedure OnCreateCommandBars
69509>            Handle hoOptions
69509>            Get OptionsObject to hoOptions
69510>            Forward Send OnCreateCommandBars
69512>        End_Procedure
69513>
69513>        Object oMenuBar is a cCJMenuBar
69515>
69515>            Object oFileMenu is a cCJMenuItem
69517>                Set peControlType to xtpControlPopup          
69518>                Set psCaption   to "&File"
69519>                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
69520>                Set psCategory to "Menus"
69521>
69521>                Object oClearMenuItem is a cCJClearMenuItem
69523>                    Set pbAddToDesignerMenu to True
69524>                End_Object
69525>
69525>                Object oClearAllMenu is a cCJClearAllMenuItem
69527>                    Set pbAddToDesignerMenu to True
69528>                End_Object
69529>
69529>                Object oPromptMenuItem is a cCJPromptMenuItem
69531>                    Set pbAddToDesignerMenu to True
69532>                    Set pbControlBeginGroup to True
69533>                End_Object
69534>
69534>                Object oFindMenuItem is a cCJFindMenuItem
69536>                    Set pbAddToDesignerMenu to True
69537>                    Set pbControlBeginGroup to True
69538>                End_Object
69539>
69539>                Object oFindNextMenu is a cCJFindNextMenuItem
69541>                    Set pbAddToDesignerMenu to True
69542>                End_Object
69543>
69543>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
69545>                    Set pbAddToDesignerMenu to True
69546>                End_Object
69547>
69547>                Object oFindFirstMenu is a cCJFindFirstMenuItem
69549>                    Set pbAddToDesignerMenu to True
69550>                End_Object
69551>
69551>                Object oFindLastMenu is a cCJFindLastMenuItem
69553>                    Set pbAddToDesignerMenu to True
69554>                End_Object
69555>
69555>                Object oSaveMenuItem is a cCJSaveMenuItem
69557>                    Set pbAddToDesignerMenu to True
69558>                    Set pbControlBeginGroup to True
69559>                End_Object
69560>
69560>                Object oDeleteMenuItem is a cCJDeleteMenuItem
69562>                    Set pbAddToDesignerMenu to True
69563>                End_Object
69564>
69564>                Object oExitMenu is a cCJExitMenuItem
69566>                    Set pbControlBeginGroup to True
69567>                End_Object
69568>
69568>            End_Object
69569>
69569>            Object oViewMenu is a cCJMenuItem
69571>                Set peControlType to xtpControlPopup
69572>                Set psCaption to "&View"
69573>                Set psToolTip to "View"
69574>                Set psDescription to "Available Views"
69575>
69575>                Object oConsultaDiretorioMenuItem is a cCJMenuItem
69577>                    Set psCaption to "ConsultaDiretorio"
69578>                    Set psTooltip to "ConsultaDiretorio"
69579>                
69579>                    Procedure OnExecute Variant vCommandBarControl
69582>                        Handle hoClient
69582>                        Get Client_Id to hoClient
69583>                        Send Activate_oConsultaDiretorio of hoClient
69584>                    End_Procedure
69585>                End_Object
69586>
69586>                Object oConteudoDiretorioMenuItem is a cCJMenuItem
69588>                    Set psCaption to "ConteudoDiretorio"
69589>                    Set psTooltip to "ConteudoDiretorio"
69590>                
69590>                    Procedure OnExecute Variant vCommandBarControl
69593>                        Handle hoClient
69593>                        Get Client_Id to hoClient
69594>                        Send Activate_oConteudoDiretorio of hoClient
69595>                    End_Procedure
69596>                End_Object
69597>            End_Object
69598>            
69598>            Object oReportMenu is a cCJMenuItem
69600>                Set peControlType to xtpControlPopup          
69601>                Set psCaption to "&Report"
69602>                Set psToolTip to "Report"
69603>                Set psDescription to "Available Reports"
69604>            End_Object
69605>
69605>            Object oNavigateMenu is a cCJMenuItem
69607>                Set peControlType to xtpControlPopup      
69608>                Set psCaption to "&Navigate"    
69609>                Set psTooltip to "Navigate"    
69610>                Set psDescription to "Move to different areas of the application"
69611>
69611>                Object oNextAreaMenu is a cCJNextAreaMenu
69613>                End_Object
69614>
69614>                Object oPriorAreaMenu is a cCJPriorAreaMenu
69616>                End_Object
69617>
69617>                Object oNextViewMenu is a cCJNextViewMenu
69619>                End_Object
69620>
69620>                Object oPriorViewMenu is a cCJPriorViewMenu
69622>                End_Object
69623>
69623>                Object oPromptMenu is a cCJPromptMenuItem
69625>                    Set pbControlBeginGroup to True
69626>                End_Object
69627>
69627>                Object oZoomMenu is a cCJZoomMenuItem
69629>                End_Object
69630>
69630>            End_Object
69631>
69631>            Object oWindowMenu is a cCJMDIWindowsMenuItem
69633>                Set peControlType to xtpControlPopup
69634>                Set psCaption to "&Window"
69635>                Set psToolTip to "Window"
69636>                Set psDescription to "Display Current Views and set other display options."    
69637>
69637>                // These are the static windows items. More will be created in onInitPopup 
69637>                Object oDisplayOptionsMenu is a cCJMenuItem
69639>                    Set peControlType to xtpControlPopup          
69640>                    Set psCaption to "&Display Options"
69641>                    Set psToolTip to "Display Options"
69642>                    Set psDescription to "Set display options"
69643>
69643>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
69645>                    End_Object
69646>
69646>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
69648>                    End_Object
69649>
69649>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
69651>                        Set pbControlBeginGroup to True
69652>                    End_Object
69653>
69653>                End_Object
69654>
69654>                Object oCascadeMenu is a cCJCascadeMenuItem
69656>                    Set pbControlBeginGroup to True
69657>                End_Object
69658>
69658>                Object oHorizTile is a cCJTileHorizontally
69660>                End_Object
69661>
69661>                Object oVertTile is a cCJTileVertically
69663>                End_Object
69664>
69664>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
69666>                    Set pbControlBeginGroup to True
69667>                End_Object
69668>
69668>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
69670>                End_Object
69671>
69671>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
69673>                    Set pbControlBeginGroup to True
69674>                End_Object
69675>
69675>            End_Object
69676>
69676>            Object oHelpMenu is a cCJMenuItem
69678>                Set peControlType to xtpControlPopup    
69679>                Set psCaption to "&Help"
69680>                Set psDescription to "Access Information for learning and using this DataFlex application."
69681>                Set psToolTip to "Help"
69682>
69682>                Object oHelpMenuItem is a cCJHelpMenuItem 
69684>                End_Object
69685>
69685>                Object oAboutMenuItem is a cCJAboutMenuItem
69687>                End_Object
69688>
69688>            End_Object
69689>
69689>        End_Object
69690>
69690>        Object oFindToolBar is a cCJToolbar
69692>            Set psTitle to "Finding Toolbar"
69693>
69693>            Object oFindFirstTool is a cCJFindFirstMenuItem
69695>            End_Object
69696>
69696>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
69698>            End_Object
69699>
69699>            Object oFindMenuTool is a cCJFindMenuItem
69701>            End_Object
69702>
69702>            Object oFindNextTool is a cCJFindNextMenuItem
69704>            End_Object
69705>
69705>            Object oFindLastTool is a cCJFindLastMenuItem
69707>            End_Object
69708>
69708>            Object oPromptToolItem is a cCJPromptMenuItem
69710>                Set pbControlBeginGroup to True
69711>            End_Object
69712>
69712>        End_Object
69713>
69713>        Object oFileToolBar is a cCJToolbar
69715>            Set psTitle to "Data Entry Toolbar"
69716>
69716>            Object oClearToolItem is a cCJClearMenuItem
69718>                Set peControlStyle to xtpButtonIconAndCaption
69719>            End_Object
69720>
69720>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
69722>                Set peControlStyle to xtpButtonIconAndCaption
69723>            End_Object
69724>
69724>            Object oSaveToolItem is a cCJSaveMenuItem
69726>                Set peControlStyle to xtpButtonIconAndCaption
69727>                Set pbControlBeginGroup to True
69728>            End_Object
69729>
69729>            Object oDeleteToolItem is a cCJDeleteMenuItem
69731>                Set peControlStyle to xtpButtonIconAndCaption
69732>            End_Object
69733>
69733>        End_Object
69734>
69734>        Object oEditToolBar is a cCJToolbar
69736>            Set psTitle to "Edit Toolbar"
69737>
69737>            Object oCutToolbarItem is a cCJCutMenuItem
69739>            End_Object
69740>
69740>            Object oCopyToolbarItem is a cCJCopyMenuItem
69742>            End_Object
69743>
69743>            Object oPasteToolbarItem is a cCJPasteMenuItem
69745>            End_Object
69746>
69746>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
69748>                Set pbControlBeginGroup to True
69749>            End_Object
69750>
69750>        End_Object
69751>
69751>        Object oRememberToolbar is a cCJToolbar
69753>            Set psTitle to C_$Remember
69754>
69754>            Object oRememberItems is a cCJMenuItem
69756>
69756>                Set peControlType to xtpControlPopup
69757>                Set peControlStyle to xtpButtonCaption
69758>                Set psCaption to C_$Remember
69759>                
69759>                Object oMenuItem is a cCJRememberFieldMenuItem
69761>                    Set peControlStyle to xtpButtonIconAndCaption
69762>                End_Object
69763>                
69763>                Object oMenuItem is a cCJRememberLastFieldMenuItem
69765>                    Set peControlStyle to xtpButtonIconAndCaption
69766>                End_Object
69767>                
69767>                Object oMenuItem is a cCJUnRememberFieldMenuItem
69769>                    Set peControlStyle to xtpButtonIconAndCaption
69770>                End_Object
69771>                
69771>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
69773>                    Set peControlStyle to xtpButtonIconAndCaption
69774>                End_Object
69775>
69775>            End_Object
69776>            
69776>        End_Object
69777>        
69777>        Object oStatusBar is a cCJStatusBar
69779>
69779>            Object oStatusPane1 is a cCJStatusBarPane
69781>                Set piID to sbpIDIdlePane
69782>                Set pbStyleStretch to True
69783>            End_Object
69784>
69784>            Object oStatusPane2 is a cCJStatusBarPane
69786>                Set phoViewPane to Self
69787>                Set pbStyleStretch to True
69788>            End_Object
69789>
69789>        End_Object
69790>
69790>    End_Object
69791>
69791>    Object oClientArea is a ClientArea
69793>        Property String psReadDir ""
69795>        
69795>//        Get psReadDir of oClientArea to 
69795>        
69795>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\DataFlex 20.0\Pkg\StdAbout.pkg)
69795>>>// This provides a quick and simple way to create an about package for a program.
69795>>>// You need to create a message inside you client area called Activate_About.
69795>>>// Within this message you should send the message DoAbout passing needed
69795>>>// string information.
69795>>>//
69795>>>//       Procedure Activate_About
69795>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
69795>>>//       End_Procedure
69795>>>//    where: sTitle =     Name of application. If none provided, uses caption
69795>>>//                        bar title
69795>>>//           sVersion   = Version Line. If none provided, will be blank
69795>>>//           sCopyRight = Copyright Line. If none provided, will be blank
69795>>>//           sAuthor    = Author name, blank if none provided
69795>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
69795>>>//                        is used.
69795>>>// It is expected that you will place this in your own object package. For
69795>>>// example an order about package may look like this:
69795>>>//
69795>>>//   // OrderAbout.pkg
69795>>>//   Use StdAbout.pkg
69795>>>//   Procedure Activate_About
69795>>>//      String sTitle sCopyright sVersion sAuthor
69795>>>//      Move "My Order Entry System" to sTitle
69795>>>//      Move "Version 2.1" to sVersion
69795>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
69795>>>//      Move "John Smith"  to sAuthor
69795>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
69795>>>//   end_procedure
69795>>>//   // end of file.
69795>>>
69795>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\DataFlex 20.0\Pkg\Dfabout.pkg)
69795>>>>>Use LanguageText.pkg
69795>>>>>Use Windows.pkg
69795>>>>>Use DFbitmap.pkg
69795>>>>>Use GlobalFunctionsProcedures.pkg
69795>>>>>Use cTextEdit.pkg
69795>>>>>Use tWinStructs.pkg
69795>>>>>
69795>>>>>Use cli.pkg
69795>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 20.0\Pkg\DFBTRDRV.PKG)
69795>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
69795>>>>>>>// Notice      : This package contains constants and commands, used to call
69795>>>>>>>//               specific functions in the DFBTRDRV.
69795>>>>>>>Use Ui
69795>>>>>>>//
69795>>>>>>>// Driver Indentification
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>// Driver attributes
69795>>>>>>>//
69795>>>>>>>// Call_Driver functions ID's
69795>>>>>>>//
69795>>>>>>>//
69795>>>>>>>// DFBTRFN_CONVERT_FILE options
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// DFBTRFN_SET_OWNER options
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to create all vars which may be needed
69795>>>>>>>// in other commands.
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to set the owner of a Btrieve file.
69795>>>>>>>// File must have been opened.
69795>>>>>>>// Filenumber needs to be passed.
69795>>>>>>>// To clear set the owner to "".
69795>>>>>>>// Examples:
69795>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
69795>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
69795>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
69795>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
69795>>>>>>>// To clear:
69795>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to parse DFBTR_SET_OWNVER
69795>>>>>>>// options.
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to parse for Callback
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to clear the owner of a Btrieve file.
69795>>>>>>>// File must have been opened.
69795>>>>>>>// Filenumber needs to be passed.
69795>>>>>>>// Examples:
69795>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to add a owner name to the internal list of ownernames
69795>>>>>>>// which will be tries when opening files.
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to remove all owners from the internal list of ownernames
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to set the owner name to be used when opening the DDF files.
69795>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
69795>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
69795>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to change the transaction type.
69795>>>>>>>// Valid types are:
69795>>>>>>>//     DFBTRTT_NONE
69795>>>>>>>//     DFBTRTT_EXCLUSIVE
69795>>>>>>>//     DFBTRTT_CONCURRENT
69795>>>>>>>//
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to get the current transaction type.
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to set explicit_locking
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to get explicit locking
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>//
69795>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
69795>>>>>>>//
69795>>>>>>>
69795>>>>>>>// Purpose: An instance of this class can be used as a broker object to
69795>>>>>>>//          call several Dfbtrdrv releated methods.
69795>>>>>>>
69795>>>>>>>Class cDFBtrDrvHandler is an Array
69796>>>>>>>    
69796>>>>>>>    Procedure Construct_Object Integer iImage
69798>>>>>>>        Forward Send Construct_object iImage
69800>>>>>>>        
69800>>>>>>>        Property String  psDriverID "DFBTRDRV"
69801>>>>>>>    End_Procedure
69802>>>>>>>    
69802>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
69802>>>>>>>    //
69802>>>>>>>    
69802>>>>>>>    Function CKRevision Returns String
69804>>>>>>>        String  sDriverID
69804>>>>>>>        String  sRevision
69804>>>>>>>        String  sVoid
69804>>>>>>>        Integer iRetval
69804>>>>>>>        
69804>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69804>>>>>>>        // This error would otherwise be raised when we have an older
69804>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69804>>>>>>>        Send Ignore_error to Error_object_Id 20491
69805>>>>>>>        Get psDriverID to sDriverID
69806>>>>>>>        Move (Repeat(" ", 255)) to sRevision
69807>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
69812>>>>>>>        Send Trap_Error to Error_object_Id 20491
69813>>>>>>>        If (Trim(sRevision) = "") Begin
69815>>>>>>>            // Unable to get the revision. return all zeroes.
69815>>>>>>>            Move "0.0.0.0" to sRevision
69816>>>>>>>        End
69816>>>>>>>>
69816>>>>>>>        Function_Return sRevision
69817>>>>>>>    End_Function
69818>>>>>>>    
69818>>>>>>>    Function CkUsesUri Returns Integer
69820>>>>>>>        String  sDriverID
69820>>>>>>>        String  sVoid1
69820>>>>>>>        String  sVoid2
69820>>>>>>>        Integer iRetval
69820>>>>>>>        
69820>>>>>>>        Get psDriverID to sDriverID
69821>>>>>>>        
69821>>>>>>>        Move 0 to iRetval
69822>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69822>>>>>>>        // This error would otherwise be raised when we have an older
69822>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
69822>>>>>>>        Send Ignore_error to Error_object_Id 20491
69823>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
69828>>>>>>>        Send Trap_Error to Error_object_Id 20491
69829>>>>>>>        
69829>>>>>>>        Function_Return iRetval
69830>>>>>>>    End_Function
69831>>>>>>>    
69831>>>>>>>    
69831>>>>>>>    
69831>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
69831>>>>>>>    //
69831>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
69831>>>>>>>    //
69831>>>>>>>    
69831>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
69833>>>>>>>        Integer iPartRev
69833>>>>>>>        Integer iCurrentPart
69833>>>>>>>        Integer iSeparatorPos
69833>>>>>>>        
69833>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
69836>>>>>>>        
69836>>>>>>>        Move 0 to iCurrentPart
69837>>>>>>>        Repeat
69837>>>>>>>>
69837>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
69838>>>>>>>            If (iSeparatorPos > 0) Begin
69840>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
69841>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
69842>>>>>>>                Increment iCurrentPart
69843>>>>>>>            End
69843>>>>>>>>
69843>>>>>>>            Else If (sRevision <> "") Begin
69846>>>>>>>                Move sRevision to iPartRev
69847>>>>>>>                Move "" to sRevision
69848>>>>>>>                Increment iCurrentPart
69849>>>>>>>            End
69849>>>>>>>>
69849>>>>>>>            Else ;                Move -1 to iPartRev
69851>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
69853>>>>>>>        
69853>>>>>>>        Function_Return iPartRev
69854>>>>>>>    End_Function
69855>>>>>>>    
69855>>>>>>>    
69855>>>>>>>    
69855>>>>>>>    //
69855>>>>>>>    //  Returns the major revision of the CK
69855>>>>>>>    //
69855>>>>>>>    
69855>>>>>>>    Function CKMajorRevision Returns Integer
69857>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
69858>>>>>>>    End_Function
69859>>>>>>>    
69859>>>>>>>    
69859>>>>>>>    
69859>>>>>>>    //  Returns the minor revision of the CK
69859>>>>>>>    //
69859>>>>>>>    
69859>>>>>>>    Function CKMinorRevision Returns Integer
69861>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
69862>>>>>>>    End_Function
69863>>>>>>>    
69863>>>>>>>    
69863>>>>>>>    //  Returns the release revision of the CK
69863>>>>>>>    //
69863>>>>>>>    
69863>>>>>>>    Function CKReleaseRevision Returns Integer
69865>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
69866>>>>>>>    End_Function
69867>>>>>>>    
69867>>>>>>>    
69867>>>>>>>    //  Returns the major revision of the CK
69867>>>>>>>    //
69867>>>>>>>    
69867>>>>>>>    Function CKBuildRevision Returns Integer
69869>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
69870>>>>>>>    End_Function
69871>>>>>>>    
69871>>>>>>>    
69871>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
69871>>>>>>>    //
69871>>>>>>>    
69871>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
69873>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
69876>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
69879>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
69882>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
69885>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
69888>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
69892>>>>>>>            End
69892>>>>>>>>
69892>>>>>>>        End
69892>>>>>>>>
69892>>>>>>>        
69892>>>>>>>        Function_Return (False)
69893>>>>>>>    End_Function
69894>>>>>>>    
69894>>>>>>>    //   Functions to query the Pervasive.SQL version:
69894>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
69894>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
69894>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
69894>>>>>>>    //
69894>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
69894>>>>>>>    //   in the following format:
69894>>>>>>>    //       <version>.<revision>.<type>
69894>>>>>>>    //   possible values for <type>:
69894>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
69894>>>>>>>    //         server using Workgroup authentication mode
69894>>>>>>>    //       C for client cache engine
69894>>>>>>>    //       D for DOS workstation
69894>>>>>>>    //       N for client Requester
69894>>>>>>>    //       S for NetWare server
69894>>>>>>>    //       T for 32-bit Windows server engine
69894>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
69894>>>>>>>    //
69894>>>>>>>    //   example:
69894>>>>>>>    //       8.50.T
69894>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
69894>>>>>>>    //   32-bits Windows server.
69894>>>>>>>    //
69894>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
69894>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
69894>>>>>>>    //
69894>>>>>>>    //   If the version information is not available or can not be obtained
69894>>>>>>>    //   the functions will return "0.0.0"
69894>>>>>>>    
69894>>>>>>>    //  Returns the version information of the
69894>>>>>>>    //           Pervasive.SQL Client requester.
69894>>>>>>>    
69894>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
69896>>>>>>>        
69896>>>>>>>        String  sDriverID
69896>>>>>>>        String  sVersion
69896>>>>>>>        String  sVoid
69896>>>>>>>        Integer iRetval
69896>>>>>>>        
69896>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69896>>>>>>>        // This error would otherwise be raised when we have an older
69896>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69896>>>>>>>        Send Ignore_error to Error_object_Id 20491
69897>>>>>>>        Get psDriverID to sDriverID
69898>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69899>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69904>>>>>>>        Send Trap_Error to Error_object_Id 20491
69905>>>>>>>        If (Trim(sVersion) = "") Begin
69907>>>>>>>            // Unable to get the revision. return all zeroes.
69907>>>>>>>            Move "0.0.0" to sVersion
69908>>>>>>>        End
69908>>>>>>>>
69908>>>>>>>        Function_Return sVersion
69909>>>>>>>    End_Function
69910>>>>>>>    
69910>>>>>>>    //           Pervasive.SQL Engine
69910>>>>>>>    
69910>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
69912>>>>>>>        
69912>>>>>>>        String  sDriverID
69912>>>>>>>        String  sVersion
69912>>>>>>>        String  sVoid
69912>>>>>>>        Integer iRetval
69912>>>>>>>        
69912>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69912>>>>>>>        // This error would otherwise be raised when we have an older
69912>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69912>>>>>>>        Send Ignore_error to Error_object_Id 20491
69913>>>>>>>        Get psDriverID to sDriverID
69914>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69915>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69920>>>>>>>        Send Trap_Error to Error_object_Id 20491
69921>>>>>>>        If (Trim(sVersion) = "") Begin
69923>>>>>>>            // Unable to get the revision. return all zeroes.
69923>>>>>>>            Move "0.0.0" to sVersion
69924>>>>>>>        End
69924>>>>>>>>
69924>>>>>>>        Function_Return sVersion
69925>>>>>>>    End_Function
69926>>>>>>>    
69926>>>>>>>    //  Returns the version information of the
69926>>>>>>>    //           Pervasive.SQL Server Engine
69926>>>>>>>    
69926>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
69928>>>>>>>        
69928>>>>>>>        String  sDriverID
69928>>>>>>>        String  sVersion
69928>>>>>>>        String  sVoid
69928>>>>>>>        Integer iRetval
69928>>>>>>>        
69928>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69928>>>>>>>        // This error would otherwise be raised when we have an older
69928>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69928>>>>>>>        Send Ignore_error to Error_object_Id 20491
69929>>>>>>>        Get psDriverID to sDriverID
69930>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69931>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69936>>>>>>>        Send Trap_Error to Error_object_Id 20491
69937>>>>>>>        If (Trim(sVersion) = "") Begin
69939>>>>>>>            // Unable to get the revision. return all zeroes.
69939>>>>>>>            Move "0.0.0" to sVersion
69940>>>>>>>        End
69940>>>>>>>>
69940>>>>>>>        Function_Return sVersion
69941>>>>>>>    End_Function
69942>>>>>>>    
69942>>>>>>>End_Class
69943>>>>>>>
69943>>>>>>>
69943>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 20.0\Pkg\MSSqldrv.pkg)
69943>>>>>>>//     Package that declares MS SQL driver constants and functions.
69943>>>>>>>//     This package can be used by developers who want to add Data Access
69943>>>>>>>//     MS SQL Client specific code to a DataFlex application.
69943>>>>>>>
69943>>>>>>>Use Cli.pkg
69943>>>>>>>Use SQL.pkg
69943>>>>>>>
69943>>>>>>>//   Driver Indentification
69943>>>>>>>
69943>>>>>>>//   Error number constants
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>// SQL Server spcific types.
69943>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
69943>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
69943>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
69943>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
69943>>>>>>>
69943>>>>>>>// SQL Server spcific types.
69943>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
69943>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
69943>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
69943>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
69943>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
69943>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
69943>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
69943>>>>>>>//
69943>>>>>>>//     Setup a constraint for a file.
69943>>>>>>>
69943>>>>>>>
69943>>>>>>>Class cMSSQLHandler is a cCLIHandler
69944>>>>>>>    
69944>>>>>>>    Procedure Construct_Object
69946>>>>>>>        Forward Send Construct_Object
69948>>>>>>>        
69948>>>>>>>        Set psDriverID to MSSQLDRV_ID
69949>>>>>>>    End_Procedure
69950>>>>>>>    
69950>>>>>>>    
69950>>>>>>>    
69950>>>>>>>    //   Extract the list from the out connect string.
69950>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
69952>>>>>>>        String  sItem
69952>>>>>>>        Integer iStart
69952>>>>>>>        Integer iEnd
69952>>>>>>>        
69952>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
69955>>>>>>>        
69955>>>>>>>        Send Delete_Data to hoStore
69956>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
69957>>>>>>>        While (iStart > 0)
69961>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
69962>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
69965>>>>>>>            Else Begin
69966>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
69967>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
69968>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
69971>>>>>>>                
69971>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
69974>>>>>>>                
69974>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
69977>>>>>>>            End
69977>>>>>>>>
69977>>>>>>>        Loop
69978>>>>>>>>
69978>>>>>>>        
69978>>>>>>>        Function_Return (Item_Count(hoStore))
69979>>>>>>>    End_Procedure
69980>>>>>>>    
69980>>>>>>>    
69980>>>>>>>    
69980>>>>>>>    //   Call the driver's browse connect function
69980>>>>>>>    Function BrowseConnect String sInConnStr Returns String
69982>>>>>>>        String  sDriver
69982>>>>>>>        String  sOutConnStr
69982>>>>>>>        Integer iArg
69982>>>>>>>        Integer iRetval
69982>>>>>>>        
69982>>>>>>>        Get psDriverID to sDriver
69983>>>>>>>        If (sDriver <> "") Begin
69985>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
69986>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
69991>>>>>>>        End
69991>>>>>>>>
69991>>>>>>>        
69991>>>>>>>        Function_Return sOutConnStr
69992>>>>>>>    End_Function// BrowseConnect
69993>>>>>>>    
69993>>>>>>>    
69993>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
69995>>>>>>>        String  sDriver
69995>>>>>>>        String  sOutConnStr
69995>>>>>>>        Integer iArg
69995>>>>>>>        Integer iRetval
69995>>>>>>>        
69995>>>>>>>        Move 1 to iArg // Browses only local
69996>>>>>>>        
69996>>>>>>>        Get psDriverID to sDriver
69997>>>>>>>        If (sDriver <> "") Begin
69999>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
70000>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
70005>>>>>>>        End
70005>>>>>>>>
70005>>>>>>>        
70005>>>>>>>        Function_Return sOutConnStr
70006>>>>>>>    End_Function// BrowseConnect
70007>>>>>>>    
70007>>>>>>>    
70007>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
70009>>>>>>>        
70009>>>>>>>        String  sServerList
70009>>>>>>>        Integer iNumServers
70009>>>>>>>        Integer iDriver
70009>>>>>>>        Integer iClientVersion
70009>>>>>>>        String  sDriver
70009>>>>>>>        
70009>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
70010>>>>>>>        
70010>>>>>>>        If (iDriver) Begin
70012>>>>>>>            
70012>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
70015>>>>>>>            
70015>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
70016>>>>>>>            
70016>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
70017>>>>>>>            If (iNetworkLocal = 0) Begin
70019>>>>>>>                Get BrowseConnect sDriver to sServerList
70020>>>>>>>            End
70020>>>>>>>>
70020>>>>>>>            Else Begin
70021>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
70022>>>>>>>            End
70022>>>>>>>>
70022>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
70023>>>>>>>        End
70023>>>>>>>>
70023>>>>>>>        
70023>>>>>>>        Function_Return iNumServers
70024>>>>>>>        
70024>>>>>>>    End_Function
70025>>>>>>>    
70025>>>>>>>    //   Enumerate the available SQL Server database servers
70025>>>>>>>    //   This function will return all SQL Server instances on the network.
70025>>>>>>>    //   This may take a long time.
70025>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
70025>>>>>>>    Function EnumerateServers Returns Integer
70027>>>>>>>        
70027>>>>>>>        Integer iNumServers
70027>>>>>>>        Integer iNetworkLocal
70027>>>>>>>        
70027>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
70028>>>>>>>        
70028>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
70029>>>>>>>        
70029>>>>>>>        Function_Return iNumServers
70030>>>>>>>        
70030>>>>>>>    End_Function
70031>>>>>>>    
70031>>>>>>>    
70031>>>>>>>    //   Enumerate the available SQL Server database servers
70031>>>>>>>    //   This function will return only return SQL Server instance on the local machine
70031>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
70031>>>>>>>    Function EnumerateServersLocal Returns Integer
70033>>>>>>>        
70033>>>>>>>        Integer iNumServers
70033>>>>>>>        Integer iNetworkLocal
70033>>>>>>>        
70033>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
70034>>>>>>>        
70034>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
70035>>>>>>>        
70035>>>>>>>        Function_Return iNumServers
70036>>>>>>>        
70036>>>>>>>    End_Function
70037>>>>>>>    
70037>>>>>>>    
70037>>>>>>>    
70037>>>>>>>    //   Enumerate database in a given server.
70037>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
70039>>>>>>>        Integer hoSQL
70039>>>>>>>        String  sConnect
70039>>>>>>>        String  sDatabase
70039>>>>>>>        Integer hdbc
70039>>>>>>>        Integer hstmt
70039>>>>>>>        Integer iFetchResult
70039>>>>>>>        
70039>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
70042>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
70045>>>>>>>        
70045>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
70048>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
70050>>>>>>>        
70050>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
70052>>>>>>>            Move Current_Object to hoSQL
70053>>>>>>>        End_Object
70054>>>>>>>        
70054>>>>>>>        If (hoSQL <> 0) Begin
70056>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
70057>>>>>>>            If (hdbc <> 0) Begin
70059>>>>>>>                Get SQLOpen of hdbc to hstmt
70060>>>>>>>                If (hstmt <> 0) Begin
70062>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
70062>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
70062>>>>>>>                    //   approach in case meta data might change, the stored procedure will
70062>>>>>>>                    //   stay the same.
70062>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
70063>>>>>>>                    Send SQLCall to hstmt
70064>>>>>>>                    Repeat
70064>>>>>>>>
70064>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
70065>>>>>>>                        If (iFetchResult <> 0) Begin
70067>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
70068>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
70069>>>>>>>                        End
70069>>>>>>>>
70069>>>>>>>                    Until (iFetchResult = 0)
70071>>>>>>>                    
70071>>>>>>>                    Send SQLClose to hstmt
70072>>>>>>>                End
70072>>>>>>>>
70072>>>>>>>                Send SQLDisconnect to hdbc
70073>>>>>>>            End
70073>>>>>>>>
70073>>>>>>>        End
70073>>>>>>>>
70073>>>>>>>        Send Destroy_Object to hoSQL
70074>>>>>>>        
70074>>>>>>>        Function_Return (Item_Count(Current_Object))
70075>>>>>>>    End_Function
70076>>>>>>>    
70076>>>>>>>    
70076>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
70078>>>>>>>        
70078>>>>>>>        String  sSqlServerClientVersionName
70078>>>>>>>        
70078>>>>>>>        
70078>>>>>>>        Case Begin
70078>>>>>>>            
70078>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
70080>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
70081>>>>>>>                Case Break
70082>>>>>>>                
70082>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
70085>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
70086>>>>>>>                Case Break
70087>>>>>>>            
70087>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
70090>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
70091>>>>>>>                Case Break
70092>>>>>>>            
70092>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
70095>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
70096>>>>>>>                Case Break
70097>>>>>>>            
70097>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
70100>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
70101>>>>>>>                Case Break
70102>>>>>>>            
70102>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
70105>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
70106>>>>>>>                Case Break
70107>>>>>>>            
70107>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
70110>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
70111>>>>>>>                Case Break
70112>>>>>>>            
70112>>>>>>>            Case Else
70112>>>>>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
70113>>>>>>>                
70113>>>>>>>        Case End
70113>>>>>>>        
70113>>>>>>>        
70113>>>>>>>        Function_Return sSqlServerClientVersionName
70114>>>>>>>        
70114>>>>>>>    End_Function
70115>>>>>>>
70115>>>>>>>
70115>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
70117>>>>>>>        
70117>>>>>>>        String  sSqlServerClientDriverName
70117>>>>>>>        
70117>>>>>>>        Case Begin
70117>>>>>>>            
70117>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
70119>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
70120>>>>>>>                Case Break
70121>>>>>>>                
70121>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
70124>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
70125>>>>>>>                Case Break
70126>>>>>>>            
70126>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
70129>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
70130>>>>>>>                Case Break
70131>>>>>>>            
70131>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
70134>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
70135>>>>>>>                Case Break
70136>>>>>>>            
70136>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
70139>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
70140>>>>>>>                Case Break
70141>>>>>>>            
70141>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
70144>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
70145>>>>>>>                Case Break
70146>>>>>>>            
70146>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
70149>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
70150>>>>>>>                Case Break
70151>>>>>>>            
70151>>>>>>>            Case Else
70151>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
70152>>>>>>>                
70152>>>>>>>        Case End
70152>>>>>>>        
70152>>>>>>>        
70152>>>>>>>        Function_Return sSqlServerClientDriverName
70153>>>>>>>        
70153>>>>>>>    End_Function
70154>>>>>>>    
70154>>>>>>>    
70154>>>>>>>End_Class
70155>>>>>>>
70155>>>>>>>
70155>>>>>
70155>>>>>Register_Function phoWorkspace Returns Handle
70155>>>>>Register_Function Help_filename Returns String
70155>>>>>Register_Function GetHelpFile Returns String
70155>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
70155>>>>>
70155>>>>>// Do not call directly, use the wrapper function instead
70155>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
70156>>>>>
70156>>>>>// Wrapper Function WNetGetUser
70156>>>>>Function WNetGetUser Global ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
70158>>>>>    
70158>>>>>    DWord   dwResult     
70158>>>>>    UWide   uwName uwUserName
70158>>>>>    UWide   uwName uwUserName
70158>>>>>        
70158>>>>>    Send StringToWide lpName (&uwName)
70159>>>>>    
70159>>>>>    Send WideSetBuffer lpUser_Name lpLength (&uwUserName)    
70160>>>>>    
70160>>>>>    Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
70161>>>>>    
70161>>>>>    Send WideToString (&uwUserName) lpUser_Name
70162>>>>>    
70162>>>>>    Function_Return dwResult
70163>>>>>End_Function
70164>>>>>
70164>>>>>//    This function reads the current username Of windows and returns that
70164>>>>>//    name or an text unknown user
70164>>>>>Function Network_User_Name for cDesktop Returns String
70166>>>>>    WString wName
70166>>>>>    Integer iRetval iLength
70166>>>>>    
70166>>>>>    Move 0 to iLength
70167>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
70168>>>>>    Move (ZeroString(iLength)) to wName
70169>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
70170>>>>>    
70170>>>>>    If (iRetval = NO_ERROR) Begin
70172>>>>>        Function_Return (CString (wName))
70173>>>>>    End
70173>>>>>>
70173>>>>>    
70173>>>>>    Function_Return "User Unknown"
70174>>>>>End_Function
70175>>>>>
70175>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
70176>>>>>
70176>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
70177>>>>>
70177>>>>>Class SysinfoDisplay is a cTextEdit
70178>>>>>    Procedure Construct_Object
70180>>>>>        Forward Send Construct_Object
70182>>>>>        
70182>>>>>        Set Location to 6 6
70183>>>>>        Set Size to 110 255
70184>>>>>        Set Read_Only_State to True
70185>>>>>        Set pbWrap to False
70186>>>>>    End_Procedure
70187>>>>>    
70187>>>>>    //    This method will show the name Of the current directory in the system
70187>>>>>    //    information box
70187>>>>>    Procedure Show_Current_Directory
70189>>>>>        String sDir
70189>>>>>        
70189>>>>>        Get_Current_Directory to sDir
70190>>>>>        
70190>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
70191>>>>>    End_Procedure
70192>>>>>    
70192>>>>>    Procedure Show_Windows_Directory
70194>>>>>        String sWindir
70194>>>>>        
70194>>>>>        Get_Windows_Directory to sWindir
70195>>>>>        
70195>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
70196>>>>>    End_Procedure
70197>>>>>    
70197>>>>>    Procedure Show_Current_User
70199>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
70200>>>>>    End_Procedure
70201>>>>>    
70201>>>>>    Procedure Show_Number_Format
70203>>>>>        Integer iFormat
70203>>>>>        String sFormatText
70203>>>>>        
70203>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
70206>>>>>        Move (Character (iFormat)) to sFormatText
70207>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
70208>>>>>        
70208>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
70211>>>>>        Move (Character (iFormat)) to sFormatText
70212>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
70213>>>>>    End_Procedure
70214>>>>>    
70214>>>>>    Procedure Show_Filelist_Name
70216>>>>>        String sFilename
70216>>>>>        
70216>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
70219>>>>>        
70219>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
70220>>>>>        Send AppendTextLn ""
70221>>>>>    End_Procedure
70222>>>>>    
70222>>>>>    Procedure Show_Lock_Delay
70224>>>>>        Integer iLockdelay
70224>>>>>        
70224>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
70227>>>>>        
70227>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
70228>>>>>    End_Procedure
70229>>>>>    
70229>>>>>    Procedure Show_Lock_Timeout
70231>>>>>        Integer iLockTimeout
70231>>>>>        
70231>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
70234>>>>>        
70234>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
70235>>>>>    End_Procedure
70236>>>>>    
70236>>>>>    Procedure Show_Screen_Size
70238>>>>>        Integer iYscreensize iXscreensize
70238>>>>>        
70238>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
70239>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
70240>>>>>        
70240>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
70241>>>>>    End_Procedure
70242>>>>>    
70242>>>>>    Procedure Show_Page_Size
70244>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
70245>>>>>    End_Procedure
70246>>>>>    
70246>>>>>    Procedure Show_Date
70248>>>>>        Date dToday
70248>>>>>        
70248>>>>>        Move (CurrentDateTime()) to  dToday
70249>>>>>        
70249>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
70250>>>>>    End_Procedure
70251>>>>>    
70251>>>>>    Procedure Show_Date_Format
70253>>>>>        Integer iDateFormat
70253>>>>>        String sDateFormat
70253>>>>>        
70253>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
70256>>>>>        Case Begin
70256>>>>>            Case (iDateFormat = DF_DATE_USA)
70258>>>>>                Move C_$USA to sDateFormat
70259>>>>>                Case Break
70260>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
70263>>>>>                Move C_$European to sDateFormat
70264>>>>>                Case Break
70265>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
70268>>>>>                Move C_$Military to sDateFormat
70269>>>>>                Case Break
70270>>>>>            Case Else
70270>>>>>                Move C_$UnknownDateType to sDateFormat
70271>>>>>                Case Break
70272>>>>>        Case End
70272>>>>>        
70272>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
70273>>>>>    End_Procedure
70274>>>>>    
70274>>>>>    Procedure Show_Systemresources
70276>>>>>        tWinMemoryStatusEx MemoryStatusInfo
70276>>>>>        tWinMemoryStatusEx MemoryStatusInfo
70276>>>>>        Integer iRetval
70276>>>>>        
70276>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
70277>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
70278>>>>>        If (iRetval = 0) Begin
70280>>>>>            Move (ShowLastError ()) to iRetval
70281>>>>>        End
70281>>>>>>
70281>>>>>        
70281>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
70282>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
70283>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
70284>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
70285>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
70286>>>>>    End_Procedure
70287>>>>>    
70287>>>>>    Procedure Show_Registration
70289>>>>>        String sRegName
70289>>>>>        Integer iSN iMaxUsers
70289>>>>>        
70289>>>>>        Registration sRegName iSN
70290>>>>>>
70290>>>>>        
70290>>>>>        Get_Licensed_Max_Users to iMaxUsers
70291>>>>>        
70291>>>>>        Send AppendTextLn ""
70292>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
70293>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
70294>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
70295>>>>>    End_Procedure
70296>>>>>    
70296>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
70296>>>>>    // To the workspace object passing the an object and message To send back
70296>>>>>    // To this object. It is expected that the workspace object will send this
70296>>>>>    // message for every line Of information it wants displayed (passing the
70296>>>>>    // information To be displayed
70296>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
70296>>>>>    
70296>>>>>    Procedure Show_ServicePack
70298>>>>>        String sKey sVersionDescription sVersion
70298>>>>>        Handle hoRegistry
70298>>>>>        Boolean bExists bOpened
70298>>>>>        
70298>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
70299>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
70300>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
70301>>>>>        
70301>>>>>        Move C_DFVersionRegistryRoot to sKey
70302>>>>>        Get KeyExists of hoRegistry sKey to bExists
70303>>>>>        If (bExists) Begin
70305>>>>>            Get OpenKey of hoRegistry sKey to bOpened
70306>>>>>            If (bOpened) Begin
70308>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
70309>>>>>                If (bExists) Begin
70311>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
70312>>>>>                End
70312>>>>>>
70312>>>>>                
70312>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
70313>>>>>                If (bExists) Begin
70315>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
70316>>>>>                End
70316>>>>>>
70316>>>>>                Send CloseKey of hoRegistry
70317>>>>>            End
70317>>>>>>
70317>>>>>        End
70317>>>>>>
70317>>>>>        Send Destroy of hoRegistry
70318>>>>>        
70318>>>>>        If (sVersionDescription <> "") Begin
70320>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
70321>>>>>            Send AppendTextLn ""
70322>>>>>        End
70322>>>>>>
70322>>>>>    End_Procedure
70323>>>>>    
70323>>>>>    
70323>>>>>    Procedure Show_WorkspaceInformation
70325>>>>>        Integer hoWorkspace
70325>>>>>        
70325>>>>>        If (ghoApplication <> 0) Begin
70327>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
70328>>>>>            If (hoWorkspace <> 0) Begin
70330>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
70331>>>>>                Send AppendTextLn ""
70332>>>>>            End
70332>>>>>>
70332>>>>>        End
70332>>>>>>
70332>>>>>    End_Procedure
70333>>>>>    
70333>>>>>    // If connection ids are used, we will send the message EnumerateConnections
70333>>>>>    // to the connection manager object passing the an object and message to send
70333>>>>>    // back to this object. It is expected that the connection manager object will
70333>>>>>    // send this message for every line Of information it wants displayed (passing
70333>>>>>    // the information To be displayed
70333>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
70333>>>>>    
70333>>>>>    Procedure Show_ConnectionIdInformation
70335>>>>>        If (ghoConnection > 0) Begin
70337>>>>>            Send AppendTextLn ""
70338>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
70339>>>>>        End
70339>>>>>>
70339>>>>>    End_Procedure
70340>>>>>    
70340>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
70342>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
70343>>>>>    End_Function
70344>>>>>    
70344>>>>>    Procedure Show_Versions
70346>>>>>        Integer iVersion iRevision iBuild
70346>>>>>        
70346>>>>>        Version_Information iVersion iRevision iBuild
70348>>>>>        
70348>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
70349>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
70350>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
70351>>>>>    End_Procedure
70352>>>>>    
70352>>>>>    Procedure Show_Platform
70354>>>>>        Send AppendTextLn (SFormat (C_$Platform,"32-bit"))
70355>>>>>    End_Procedure
70356>>>>>    
70356>>>>>    Function CKRevisionNumber String sDriverID Returns String
70358>>>>>        Handle hoCLIHandler
70358>>>>>        Handle hoDFBtrDrvHandler
70358>>>>>        String sCKRevision
70358>>>>>        
70358>>>>>        
70358>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
70360>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
70361>>>>>            Set psDriverID of hoCLIHandler to sDriverID
70362>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
70363>>>>>            Send Destroy of hoCLIHandler
70364>>>>>        End
70364>>>>>>
70364>>>>>        Else Begin
70365>>>>>            If (sDriverID = "DFBTRDRV") Begin
70367>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
70368>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
70369>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
70370>>>>>                Send Destroy of hoDFBtrDrvHandler
70371>>>>>            End
70371>>>>>>
70371>>>>>        End
70371>>>>>>
70371>>>>>        
70371>>>>>        Function_Return sCKRevision
70372>>>>>    End_Function
70373>>>>>    
70373>>>>>    
70373>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
70375>>>>>        
70375>>>>>        If (sDriverID = "DATAFLEX") Begin
70377>>>>>            Function_Return False
70378>>>>>        End
70378>>>>>>
70378>>>>>        
70378>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
70379>>>>>    End_Function
70380>>>>>    
70380>>>>>    
70380>>>>>    Procedure Show_Drivers
70382>>>>>        String sCurrentDriver sRevNumber
70382>>>>>        String sLoadedDrivers sClientDriver
70382>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
70382>>>>>        Boolean bOK
70382>>>>>        Handle hoMsqlDrv
70382>>>>>        
70382>>>>>        Move "" to sLoadedDrivers
70383>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
70386>>>>>        For iCount from 1 to iNumberOfDrivers
70392>>>>>>
70392>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
70395>>>>>            If (sLoadedDrivers <> "") Begin
70397>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
70398>>>>>            End
70398>>>>>>
70398>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
70399>>>>>            If (bOK) Begin
70401>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
70403>>>>>                    Move iCount to iMSSQLIndex
70404>>>>>                End
70404>>>>>>
70404>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
70405>>>>>                // if mssqldrv, show the client number
70405>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
70406>>>>>            End
70406>>>>>>
70406>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
70407>>>>>        Loop
70408>>>>>>
70408>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
70409>>>>>        If (iMSSQLIndex>0) Begin
70411>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
70414>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
70415>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
70416>>>>>            Send Destroy of hoMsqlDrv
70417>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
70418>>>>>        End
70418>>>>>>
70418>>>>>    End_Procedure
70419>>>>>    
70419>>>>>    Procedure Show_HelpFile
70421>>>>>        String sHelpFile
70421>>>>>        Integer eHelpType
70421>>>>>        
70421>>>>>        If (ghoApplication <> 0) Begin
70423>>>>>            Get peHelpType of ghoApplication to eHelpType
70424>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
70426>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
70427>>>>>            End
70427>>>>>>
70427>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
70430>>>>>                Get Help_filename of Help_object_id to sHelpFile
70431>>>>>            End
70431>>>>>>
70431>>>>>            Else Begin
70432>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
70433>>>>>            End
70433>>>>>>
70433>>>>>            
70433>>>>>            Send AppendTextLn ""
70434>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
70435>>>>>        End
70435>>>>>>
70435>>>>>    End_Procedure
70436>>>>>    
70436>>>>>    Procedure Show_EnterAsTab
70438>>>>>        Boolean bEnterKeyAsTabKey
70438>>>>>        String sText
70438>>>>>        
70438>>>>>        If (ghoApplication <> 0) Begin
70440>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
70441>>>>>            If (bEnterKeyAsTabKey) Begin
70443>>>>>                Move "True" to sText
70444>>>>>            End
70444>>>>>>
70444>>>>>            Else Begin
70445>>>>>                Move "False" to sText
70446>>>>>            End
70446>>>>>>
70446>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
70447>>>>>        End
70447>>>>>>
70447>>>>>    End_Procedure
70448>>>>>    
70448>>>>>    //    During activation we will remove the old information and add the newly
70448>>>>>    //    found systeminformation
70448>>>>>    Procedure Add_Focus Integer hoRoot
70450>>>>>        Forward Send Add_Focus hoRoot
70452>>>>>        
70452>>>>>        Send Delete_Data
70453>>>>>        
70453>>>>>        Set Changed_State to False
70454>>>>>        Set Read_Only_State to True
70455>>>>>        
70455>>>>>        Send Show_ServicePack
70456>>>>>        Send Show_Versions
70457>>>>>        Send Show_Platform
70458>>>>>        Send Show_Drivers
70459>>>>>        If (ghoConnection <> 0) Begin
70461>>>>>            Send Show_ConnectionIdInformation
70462>>>>>        End
70462>>>>>>
70462>>>>>        Send Show_HelpFile
70463>>>>>        Send Show_Current_Directory
70464>>>>>        Send Show_Filelist_Name
70465>>>>>        If (ghoApplication <> 0) Begin
70467>>>>>            Send Show_WorkSpaceInformation // added To show WS info
70468>>>>>        End
70468>>>>>>
70468>>>>>        Send Show_Current_User
70469>>>>>        Send Show_Windows_Directory
70470>>>>>        Send Show_Screen_Size
70471>>>>>        Send Show_Page_Size
70472>>>>>        Send Show_EnterAsTab
70473>>>>>        Send Show_Number_Format
70474>>>>>        Send Show_Date_Format
70475>>>>>        Send Show_Lock_Delay
70476>>>>>        Send Show_Lock_Timeout
70477>>>>>        Send Show_Date
70478>>>>>        Send Show_Systemresources
70479>>>>>        Send Show_Registration
70480>>>>>        Send Beginning_of_Data
70481>>>>>        
70481>>>>>        Set Icon to 'default.ico'
70482>>>>>    End_Procedure
70483>>>>>End_Class
70484>>>>>
70484>>>>>Class SysInfoDialog is a ModalPanel
70485>>>>>    Procedure Construct_Object
70487>>>>>        Forward Send Construct_Object
70489>>>>>        
70489>>>>>        Set Label to C_$SystemInformation
70490>>>>>        Set Size to 140 267
70491>>>>>        Set piMinSize to 140 267
70492>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
70493>>>>>        Set Border_Style to Border_Thick
70494>>>>>        
70494>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
70496>>>>>            Set peAnchors to anAll
70497>>>>>        End_Object
70498>>>>>        
70498>>>>>        Object oCloseButton is a Button
70500>>>>>            Set Label to C_$Close
70501>>>>>            Set Location to 120 210
70502>>>>>            Set Message 0 to (Refproc (Close_Panel))
70503>>>>>            Set Default_State to True
70504>>>>>            Set peAnchors to anBottomRight
70505>>>>>        End_Object
70506>>>>>        
70506>>>>>        On_Key kCancel Send Close_Panel
70507>>>>>    End_Procedure
70508>>>>>End_Class
70509>>>>>
70509>>>>>Class AboutDialog is a ModalPanel
70510>>>>>    Procedure Construct_Object
70512>>>>>        String sVdfRootDir
70512>>>>>        
70512>>>>>        Forward Send Construct_Object
70514>>>>>        
70514>>>>>        Set Label to C_$About
70515>>>>>        Set Size to 89 212
70516>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
70517>>>>>        
70517>>>>>        Object oSysInfoDialog is a SysInfoDialog
70519>>>>>        End_Object
70520>>>>>        
70520>>>>>        Object oBox is a Container3d
70522>>>>>            Set Border_Style to Border_StaticEdge
70523>>>>>            Set Size to 63 202
70524>>>>>            Set Location to 4 5
70525>>>>>            
70525>>>>>            Object oAboutGraphic is a BitmapContainer
70527>>>>>                Set Border_Style to Border_None
70528>>>>>                Set Bitmap_Style to Bitmap_Center
70529>>>>>                Set Size to 48 48
70530>>>>>                Set Location to 7 2
70531>>>>>            End_Object
70532>>>>>            
70532>>>>>            Object oProductName is a TextBox
70534>>>>>                Set Label to C_$ProductName
70535>>>>>                Set Size to 10 45
70536>>>>>                Set Location to 8 53
70537>>>>>            End_Object
70538>>>>>            
70538>>>>>            Object oVersion is a TextBox
70540>>>>>                Set Label to C_$Version
70541>>>>>                Set Size to 10 25
70542>>>>>                Set Location to 21 53
70543>>>>>            End_Object
70544>>>>>            
70544>>>>>            Object oCopyright is a TextBox
70546>>>>>                Set Label to C_$Copyright
70547>>>>>                Set Size to 10 31
70548>>>>>                Set Location to 34 53
70549>>>>>            End_Object
70550>>>>>            
70550>>>>>            Object oAuthor is a TextBox
70552>>>>>                Set Label to C_$Author
70553>>>>>                Set Size to 10 22
70554>>>>>                Set Location to 46 53
70555>>>>>            End_Object
70556>>>>>        End_Object
70557>>>>>        
70557>>>>>        Object oOKButton is a Button
70559>>>>>            On_Item C_$OK Send Close_Panel
70560>>>>>            Set Size to 14 50
70561>>>>>            Set Location to 71 157
70562>>>>>        End_Object
70563>>>>>        
70563>>>>>        Object oSysInfoButton is a Button
70565>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
70566>>>>>            Set Size to 14 50
70567>>>>>            Set Location to 71 101
70568>>>>>        End_Object
70569>>>>>        
70569>>>>>        On_Key Kcancel Send KeyAction of oOKButton
70570>>>>>        
70570>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
70571>>>>>    End_Procedure
70572>>>>>    
70572>>>>>    Procedure Set ProductName String sProductName
70574>>>>>        Set Label of oProductName to sProductName
70575>>>>>    End_Procedure
70576>>>>>    
70576>>>>>    Procedure Set Version String sVersion
70578>>>>>        Set Label of oVersion to sVersion
70579>>>>>    End_Procedure
70580>>>>>    
70580>>>>>    Procedure Set Copyright String sCopyright
70582>>>>>        Set Label of oCopyright to sCopyright
70583>>>>>    End_Procedure
70584>>>>>    
70584>>>>>    Procedure Set Author String sAuthor
70586>>>>>        Set Label of oAuthor to sAuthor
70587>>>>>    End_Procedure
70588>>>>>    
70588>>>>>    Procedure Set Logo String sLogo
70590>>>>>        // square bitmaps Of 42x42 work best
70590>>>>>        Set Bitmap of oAboutGraphic to sLogo
70591>>>>>    End_Procedure
70592>>>>>    
70592>>>>>    Procedure Show_Sysinfo
70594>>>>>        Send Popup_Modal of oSysinfoDialog
70595>>>>>    End_Procedure
70596>>>>>    
70596>>>>>    Procedure End_Construct_Object
70598>>>>>        Handle hoVersionInfo
70598>>>>>        Boolean bIncluded
70598>>>>>        Integer iMajor iMinor iRelease iBuild
70598>>>>>        String sLabel
70598>>>>>        
70598>>>>>        Get Label of oVersion to sLabel
70599>>>>>        If (sLabel = C_$VERSION) Begin
70601>>>>>            // set it To the version info Of the program, if available
70601>>>>>            If (ghoApplication <> 0) Begin
70603>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
70604>>>>>                If (hoVersionInfo <> 0) Begin
70606>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
70607>>>>>                    If (bIncluded) Begin
70609>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
70610>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
70611>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
70612>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
70613>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
70614>>>>>                        Set Version to sLabel
70615>>>>>                    End
70615>>>>>>
70615>>>>>                End
70615>>>>>>
70615>>>>>            End
70615>>>>>>
70615>>>>>        End
70615>>>>>>
70615>>>>>        
70615>>>>>        Forward Send End_Construct_Object
70617>>>>>    End_Procedure
70618>>>>>End_Class
70619>>>
70619>>>//  This is the default message. It is expected that you will
70619>>>//  create your own message to override this
70619>>>Procedure Activate_About
70622>>>    Send DoAbout "" "" "" "" ""
70623>>>End_Procedure
70624>>>
70624>>>//  It is expected that you will send this message (most
70624>>>//  likely from Activate_About. This creates an about object, activates it
70624>>>//  and destroys it when done. It is not exepected that you will augment this.
70624>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
70627>>>    Integer hoObj hoMain
70627>>>    
70627>>>    // create object
70627>>>    Object About is an AboutDialog
70629>>>        // if no title passed use the label of the main panel
70629>>>        // (if a main panel exists).
70629>>>        If (sTitle = "") Begin
70631>>>            Get Main_Window of desktop to hoMain
70632>>>            If hoMain ;                Get Label of hoMain to sTitle
70635>>>        End
70635>>>>
70635>>>        Set productname to sTitle
70636>>>        Set version     to sVersion
70637>>>        Set copyright   to sCopyRight
70638>>>        Set author      to sAuthor
70639>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
70642>>>        Move Self to hoObj // object Id
70643>>>    End_Object
70644>>>    Send Popup   of hoObj    // popup the about object
70645>>>    Send Destroy of hoObj // when done, it will be destroyed
70646>>>End_Procedure
70647>>>
70647>        Use ConsultaDiretorio.vw
Including file: ConsultaDiretorio.vw    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\ConsultaDiretorio.vw)
70647>>>Use Windows.pkg
70647>>>Use DFClient.pkg
70647>>>Use DFTabDlg.pkg
70647>>>Use DfAllEnt.pkg
70647>>>Use File_dlg.pkg
70647>>>
70647>>>Activate_View Activate_oConsultaDiretorio for oConsultaDiretorio
70657>>>>
70657>>>Object oConsultaDiretorio is a dbView
70659>>>    Set Label to "Consulta"
70660>>>    Set Size to 73 470
70661>>>    Set Location to -1 4
70662>>>    
70662>>>    Object oOpenExplorer is a Form
70664>>>        Set Size to 14 326
70665>>>        Set Location to 14 68
70666>>>        Set Label to "Caminho arquivo:"
70667>>>        Property String psOpenExplorer
70669>>>
70669>>>        Procedure OnChange
70672>>>            String sDiretorio
70672>>>            
70672>>>            Get Value of oOpenExplorer to sDiretorio
70673>>>            Set psOpenExplorer to sDiretorio
70674>>>            
70674>>>            Forward Send OnChange
70676>>>        End_Procedure
70677>>>    End_Object
70678>>>        
70678>>>    Object oReadDir is a Form
70680>>>        Set Size to 14 326
70681>>>        Set Location to 44 68
70682>>>        Set Label to "Caminho arquivo:"
70683>>>    
70683>>>        Procedure OnChange
70686>>>            String sDiretorio
70686>>>            
70686>>>            Get Value of oReadDir to sDiretorio
70687>>>            Set psReadDir to sDiretorio
70688>>>            
70688>>>            Forward Send OnChange
70690>>>        End_Procedure
70691>>>    End_Object
70692>>>              
70692>>>    Object oButton1 is a Button
70694>>>        Set Size to 15 56
70695>>>        Set Location to 14 401
70696>>>        Set Label to "Abrir explorer"
70697>>>        
70697>>>        Procedure OnClick
70700>>>            String sDiretorio
70700>>>            Boolean bFileExists
70700>>>            
70700>>>            Get psOpenExplorer of oOpenExplorer to sDiretorio
70701>>>            File_Exist sDiretorio bFileExists
70702>>>                                               
70702>>>            If bFileExists Begin
70704>>>                Runprogram Background ('c:\windows\explorer.exe' *  '"' + ((sDiretorio)) + '"')
70705>>>            End
70705>>>>
70705>>>            Else Begin
70706>>>                Send Info_Box "Caminho não encontrado"
70707>>>            End
70707>>>>
70707>>>        End_Procedure  
70708>>>    End_Object
70709>>>    
70709>>>    Object oButton2 is a Button
70711>>>        Set Size to 14 56
70712>>>        Set Location to 44 401
70713>>>        Set Label to "Ver diretorio"
70714>>>        
70714>>>        Procedure OnClick
70717>>>            String sDiretorio
70717>>>            Boolean bFileExists
70717>>>            
70717>>>            Get psReadDir of oReadDir to sDiretorio
70718>>>            File_Exist sDiretorio bFileExists
70719>>>                                                 
70719>>>            If bFileExists Begin
70721>>>                Send Activate_oConteudoDiretorio 
70722>>>            End
70722>>>>
70722>>>            Else Begin
70723>>>                Send Info_Box "Caminho não encontrado"
70724>>>            End
70724>>>>
70724>>>        End_Procedure   
70725>>>    End_Object
70726>>>End_Object
70727>        Use ConteudoDiretorio.vw
Including file: ConteudoDiretorio.vw    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\ConteudoDiretorio.vw)
70727>>>Use Windows.pkg
70727>>>Use DFClient.pkg
70727>>>Use DFTabDlg.pkg
70727>>>Use DfAllEnt.pkg
70727>>>Use cCJGrid.pkg
70727>>>Use cCJGridColumn.pkg
70727>>>Use cFilesystem.pkg
Including file: cFilesystem.pkg    (C:\xampp\htdocs\dataflex_learning\DataFlexStudio v20.0\Policom\cFileSystem\AppSrc\cFilesystem.pkg)
70727>>>>>//************************************************************************
70727>>>>>//*** FileSystem - Binary file operations For VDF15+.
70727>>>>>//************************************************************************
70727>>>>>//*** Based on original package: akefs.pkg
70727>>>>>//*** Version: 4.0
70727>>>>>//*** (C) NordTeam Gruppen, NOVAX A/S
70727>>>>>//***
70727>>>>>//*** Author......: Allan Kim Eriksen
70727>>>>>//*** Created.....: 23/08 2001
70727>>>>>//***
70727>>>>>//*** Rev History.: 31/08 2018 Nils Svedmyr. Added Functions from Akefs.pkg
70727>>>>>//***               to get/set file date/time and procedure SetFileLastWriteTime.
70727>>>>>//***               Refactored functions FileSize & FileDate to only have one Function_Return,
70727>>>>>//***               and changed a couple of While loops to end with a "loop" word instead of "End".
70727>>>>>//***
70727>>>>>//************************************************************************
70727>>>>>// cFilesystem class with functions and procedures to access binary files.
70727>>>>>// Filenumbers are not limited to 10 but only to system resources.
70727>>>>>// Also windows API calls For file copy, file move ect.
70727>>>>>// This class is For vdf 15 and up.
70727>>>>>// This class is not limited to 2 GB but can handle filesizes up $7FFFFFFFFFFFFFFF (9 exabyte)
70727>>>>>
70727>>>>>//************************************************************************
70727>>>>>// Be aware that argument_size has to be larger
70727>>>>>// than the requested amount of bytes read in the buffer for
70727>>>>>// BytesFromBinaryFile.
70727>>>>>//************************************************************************
70727>>>>>
70727>>>>>//************************************************************************
70727>>>>>// Constants used For the external functions.
70727>>>>>//************************************************************************
70727>>>>>// fsCreatefile.
70727>>>>>    Define GENERIC_READ for            |CI$80000000
70727>>>>>    Define GENERIC_WRITE for           |CI$40000000
70727>>>>>    Define GENERIC_RANDOM for          (GENERIC_READ + GENERIC_WRITE)
70727>>>>>    Define CREATE_NEW for              |CI$00000001
70727>>>>>    Define CREATE_ALWAYS for           |CI$00000002
70727>>>>>    Define OPEN_EXISTING for           |CI$00000003
70727>>>>>    Define OPEN_ALWAYS for             |CI$00000004
70727>>>>>    Define TRUNCATE_EXISTING for       |CI$00000005
70727>>>>>
70727>>>>>
70727>>>>>    Define FILE_SHARE_READ for         |CI$1
70727>>>>>    Define FILE_SHARE_WRITE for        |CI$2
70727>>>>>    Define FILE_SHARE_RANDOM for       (FILE_SHARE_READ + FILE_SHARE_WRITE)
70727>>>>>
70727>>>>>// Generel.
70727>>>>>Define FNULL For                   |CI$0
70727>>>>>
70727>>>>>// FormatString.
70727>>>>>
70727>>>>>// SetFilePosition.
70727>>>>>Define FILE_BEGIN For     0
70727>>>>>Define FILE_CURRENT For  1
70727>>>>>Define FILE_END For      2
70727>>>>>Define INVALID_SET_FILE_POINTER For |CI$FFFFFFFF
70727>>>>>
70727>>>>>// FindFile.
70727>>>>>
70727>>>>>Define ERROR_NO_MORE_FILES    For |CI18
70727>>>>>Define ERROR_MOD_NOT_FOUND    For |CI126
70727>>>>>
70727>>>>>
70727>>>>>
70727>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileFlags.
70727>>>>>
70727>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileOS.
70727>>>>>Define VOS_DOS          For |CI$10000
70727>>>>>Define VOS_NT           For |CI$40000
70727>>>>>Define VOS_WINDOWS16    For |CI$00001
70727>>>>>Define VOS_WINDOWS32    For |CI$00004
70727>>>>>Define VOS_OS216        For |CI$20000
70727>>>>>Define VOS_OS232        For |CI$30000
70727>>>>>Define VOS_PM16         For |CI$00002
70727>>>>>Define VOS_PM32         For |CI$00003
70727>>>>>Define VOS_UNKNOWN      For |CI$00000
70727>>>>>
70727>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileType.
70727>>>>>Define VFT_APP          For |CI$01
70727>>>>>Define VFT_DLL          For |CI$02
70727>>>>>Define VFT_DRV          For |CI$03
70727>>>>>Define VFT_FONT         For |CI$04
70727>>>>>Define VFT_STATIC_LIB   For |CI$07
70727>>>>>Define VFT_UNKNOWN      For |CI$00
70727>>>>>Define VFT_VXD          For |CI$05
70727>>>>>
70727>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileSubtype if tsVS_FIXEDFILEINFO.dwFileType = VFT_DRV.
70727>>>>>Define VFT2_DRV_COMM                For |CI$0A
70727>>>>>Define VFT2_DRV_DISPLAY             For |CI$04
70727>>>>>Define VFT2_DRV_INSTALLABLE         For |CI$08
70727>>>>>Define VFT2_DRV_KEYBOARD            For |CI$02
70727>>>>>Define VFT2_DRV_LANGUAGE            For |CI$03
70727>>>>>Define VFT2_DRV_MOUSE               For |CI$05
70727>>>>>Define VFT2_DRV_NETWORK             For |CI$06
70727>>>>>Define VFT2_DRV_PRINTER             For |CI$01
70727>>>>>Define VFT2_DRV_SOUND               For |CI$09
70727>>>>>Define VFT2_DRV_SYSTEM              For |CI$07
70727>>>>>Define VFT2_DRV_VERSIONED_PRINTER   For |CI$0C
70727>>>>>
70727>>>>>// Flags For tsVS_FIXEDFILEINFO.dwFileSubtype if tsVS_FIXEDFILEINFO.dwFileType = VFT_FONT.
70727>>>>>Define VFT2_FONT_RASTER             For |CI$01
70727>>>>>Define VFT2_FONT_TRUETYPE           For |CI$03
70727>>>>>Define VFT2_FONT_VECTOR             For |CI$02
70727>>>>>
70727>>>>>Define VFT2_UNKNOWN                 For |CI$00
70727>>>>>
70727>>>>>Define FS_FILEHANDLEMISSING For "The filehandle does not exists For the current filenumber."
70727>>>>>
70727>>>>>// Filesearch
70727>>>>>Enum_List
70727>>>>>    Define DIRMODE_FILES_ONLY For 1
70727>>>>>    Define DIRMODE_DIRECTORIES_ONLY
70727>>>>>    Define DIRMODE_FILES_AND_DIRECTORIES
70727>>>>>End_Enum_List
70727>>>>>
70727>>>>>//************************************************************************
70727>>>>>// Declarations of external functions.
70727>>>>>// Functions that needs variables For output are made global stings or
70727>>>>>// integers, and can be found on top of the declaration.
70727>>>>>//************************************************************************
70727>>>>>External_Function fsCreatefile "CreateFileW" kernel32.dll ;WString wFile ;       //filenameDWord dwDesAccess ;   // access modeDWord dwShare ;       // share modePointer lpSecAtt ;    // SDDWord dwCrDisp ;      // how to createDWord dwFlags ;       // file attributesHandle hTempFile ;    // handle to template filReturns Integer       //Returns handle that can be used to access the object
70728>>>>>
70728>>>>>External_Function fsGetLastError "GetLastError" kernel32.dll Returns Integer
70729>>>>>
70729>>>>>External_Function fsFormatMessage "FormatMessageW" kernel32.dll ;DWord dwFlags ;         // source and processing optionsPointer lpSrc ;         // message sourceDWord dwMsgId ;         // message identifierDWord dwLngId ;         // language identifierPointer lpBuf ;         // message bufferDWord nSize ;           // maximum size of message bufferPointer Arg ;           // array of message insertsReturns Integer
70730>>>>>
70730>>>>>External_Function fsLocalFree "LocalFree" kernel32.dll ;Handle hMem ;   // A handle to the local memory object.Returns Integer
70731>>>>>
70731>>>>>External_Function fsCloseHandle "CloseHandle" kernel32.dll ;Handle hObject ;        // handle to objectReturns Integer
70732>>>>>
70732>>>>>External_Function fsReadFile "ReadFile" kernel32.dll ;Handle hFile ;          // handle to filePointer lpBuffer ;      // data bufferDWord nBytesToRead ;    // number of bytes to readPointer lpBytesRead ;   // number of bytes readPointer lpOverlapped ;  // overlapped bufferReturns Integer
70733>>>>>
70733>>>>>External_Function fsWriteFile "WriteFile" kernel32.dll ;Handle hFile ;              // handle to filePointer lpBuf ;             // data bufferDWord nNumBytesWrt ;        // number of bytes to writePointer lpNumBytesWritten ; // number of bytes writtenPointer lpOverlapped ;      // overlapped bufferReturns Integer
70734>>>>>
70734>>>>>External_Function fsGetFileSizeEx "GetFileSizeEx" kernel32.dll ;Handle hFile ;           // handle to filePointer lpFileSizeHigh ; // A pointer to a LARGE_INTEGER structure that receives the file size, in bytes.Returns Integer
70735>>>>>
70735>>>>>External_Function fsSetFilePointer "SetFilePointer" kernel32.dll ;Handle hFile ;              // handle to fileUInteger lDistanceToMove ;    // The low order 32-bits of a signed value that specifies the number of bytes to move the file pointer.Pointer lpDistanceToMoveHigh ;  // A pointer to the high order 32-bits of the signed 64-bit distance to move.DWord dwMoveMethod ;        // The starting point For the file pointer move.Returns UInteger
70736>>>>>
70736>>>>>External_Function fsSetEndOfFile "SetEndOfFile" kernel32.dll ;Handle hFile ;              // handle to the file to have its EOF position moved.Returns Integer             // nonzero if success
70737>>>>>
70737>>>>>External_Function fsDeleteFile "DeleteFileW" Kernel32.Dll ;WString wFileName ;             // Pointer to a null-terminated string that specifies the file to be deleted.Returns Integer
70738>>>>>
70738>>>>>External_Function fsMoveFile "MoveFileW" Kernel32.Dll ;WString sExistingFileName ;     // Pointer to a null-terminated string that names an existing file or directory.WString sNewFileName ;          // Pointer to a null-terminated string that specifies the new name of a file or directory.Returns Integer                 // The new name must Not already exist. A new File may be on A different File system Or drive. A new directory must be on the same drive.
70739>>>>>
70739>>>>>External_Function fsCopyFile "CopyFileW" Kernel32.Dll ;WString sExistingFileName ;     // Pointer to a null-terminated string that specifies the name of an existing file.WString sNewFileName ;          // Pointer to a null-terminated string that specifies the name of the new file.Boolean bFailIfExists ;         // If bFailIfExists is TRUE and the new file specified by lpNewFileName already exists, the function fails.Returns Integer                 // If bFailIfExists is FALSE and the new file already exists, the function overwrites the existing file and succeeds.
70740>>>>>
70740>>>>>External_Function fsFindFirstFile "FindFirstFileW" Kernel32.Dll ;WString wFileName ;             // Pointer to a null-terminated string that specifies a valid directory or path and file name, which can contain wildcard characters (* and ?).Pointer lpWin32_Find_Data ;     // Pointer to the WIN32_FIND_DATA structure that receives information about the found file or subdirectory.Returns Integer
70741>>>>>
70741>>>>>External_Function fsFindNextFile "FindNextFileW" Kernel32.Dll ;Handle hFindFile ;              // handle returned by a previous call to the FindFirstFile function.Pointer lpWin32_Find_Data ;     // Pointer to the WIN32_FIND_DATA structure that receives information about the found file or subdirectory.Returns Integer
70742>>>>>
70742>>>>>External_Function fsFindClose "FindClose" Kernel32.dll ;Handle hFindFile ;              // File search handle. This handle must have been previously opened by the FindFirstFile function.Returns Integer
70743>>>>>
70743>>>>>External_Function fsGetFileTime "GetFileTime" Kernel32.dll ;Handle  hFile  ;                // Handle For a file from createfile with read accessPointer lpCreationtime ;        // Pointer to a FILETIME structure containing the file creation timePointer lpLastAccesstime ;      // Pointer to a FILETIME structure containing the file last access timePointer lpLastWritetime ;       // Pointer to a FILETIME structure containing the file last write timeReturns Integer
70744>>>>>
70744>>>>>External_Function fsSetFileTime "SetFileTime" Kernel32.dll ;Handle  hFile  ;                // Handle For a file from createfile with write accessPointer lpCreationtime ;        // Pointer to a FILETIME structure containing the file creation timePointer lpLastAccesstime ;      // Pointer to a FILETIME structure containing the file last access timePointer lpLastWritetime ;       // Pointer to a FILETIME structure containing the file last write timeReturns Integer
70745>>>>>
70745>>>>>External_function fsGetSystemTimeAsFileTime "GetSystemTimeAsFileTime" Kernel32.dll ;Pointer lpSystemTimeAsFileTime ;   // Pointer to a FILETIME structure containing the current system time in filetimme formatReturns Integer
70746>>>>>
70746>>>>>External_Function fsFileTimeToSystemTime "FileTimeToSystemTime" Kernel32.dll ;Pointer lpFiletime ;            // Pointer to a FILETIME structure containing the file time to convert to system date and time format.Pointer lpSystemtime ;          // Pointer to a SYSTEMTIME structure to receive the converted file time.Returns Integer
70747>>>>>
70747>>>>>External_Function fsSystemTimeToTzSpecificLocalTime "SystemTimeToTzSpecificLocalTime" Kernel32.dll ;Pointer lpTimeZone ;            // A pointer to a TIME_ZONE_INFORMATION structure that specifies the time zone of interest.Pointer lpUniversalTime ;       // A pointer to a SYSTEMTIME structure that specifies a time, in UTC.Pointer lpLocalTime ;           // A pointer to a SYSTEMTIME structure that receives the local time.Returns Integer
70748>>>>>
70748>>>>>External_Function fsGetTempFileName "GetTempFileNameW" kernel32.dll ;WString sPathname ;WString sPrefixString ;Integer iUnique ;Pointer sTempFileName ;Returns Integer
70749>>>>>
70749>>>>>External_Function fsGetTempPath "GetTempPathW" Kernel32.Dll ;Integer nBufferLength ;Pointer lpBuffer ;Returns Integer
70750>>>>>
70750>>>>>External_Function fsCreateDirectory "CreateDirectoryW" Kernel32.dll ;WString sDirName ;              // Pointer to a null-terminated string that specifies the path of the directory to be created.Pointer lpSecAttributes ;       // Pointer to a SECURITY_ATTRIBUTES structure.Returns Integer
70751>>>>>
70751>>>>>External_Function fsRemoveDirectory "RemoveDirectoryW" Kernel32.dll ;WString sDirName ;             // Pointer to a null-terminated string that specifies the path of the directory to be removed.Returns Integer
70752>>>>>
70752>>>>>External_Function fsExtractAssociatedIcon "ExtractAssociatedIconW" shell32.dll ;Handle hInst ;Pointer lpIconPath ;Integer lpiIcon ;Returns Handle
70753>>>>>
70753>>>>>External_Function fsDestroyIcon "DestroyIcon" User32.dll ;Handle hIcon ;Returns Integer
70754>>>>>
70754>>>>>External_Function fsGetFileVersionInfoSize "GetFileVersionInfoSizeW" Version.dll ;WString sFilename ;             // The name of the file of interest. The function uses the search sequence specified by the LoadLibrary function.Pointer lpHandle ;              // A pointer to a variable that the function sets to zero.Returns UInteger
70755>>>>>
70755>>>>>External_Function fsGetFileVersionInfo "GetFileVersionInfoW" Version.dll ;WString sFilename ;             // The name of the file. If a full path is not specified, the function uses the search sequence specified by the LoadLibrary function.DWord   dwHandle ;              // This parameter is ignored.DWord   dwLen ;                 // The size, in bytes, of the buffer pointed to by the lpData parameter.Pointer lpData ;                // Pointer to a buffer that receives the file-version information.Returns Boolean
70756>>>>>
70756>>>>>External_Function fsVerQueryValue "VerQueryValueW" Version.dll ;Pointer lpBlock ;               // The version-information resource returned by the GetFileVersionInfo function.WString sSubBlock ;             // The version-information value to be retrieved.Pointer lplpBuffer ;            // When this method returns, contains the address of a pointer to the requested version information in the buffer pointed to by lpBlock.Pointer lpLen ;                 // When this method returns, contains a pointer to the size of the requested data pointed to by lpBuffer.Returns Boolean
70757>>>>>
70757>>>>>//************************************************************************
70757>>>>>// Structures
70757>>>>>//************************************************************************
70757>>>>>
70757>>>>>// Nils 2018-08-30 Added For the SourceCodeTools project
70757>>>>>// so we don't need to use both Akefs.pkg and this package.
70757>>>>>// A 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).
70757>>>>>Struct tFileTime
70757>>>>>    DWord dwLowDateTime    // Low-order part of the file time.
70757>>>>>    DWord dwHighDateTime   // High-order part of the file time.
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct structWFD  // Used by FindFirstFile
70757>>>>>    DWord    dwFileAttributes
70757>>>>>    UBigInt  ftCreationDateTime
70757>>>>>    UBigInt  ftLastAccessDateTime
70757>>>>>    UBigInt  ftLastWriteDateTime
70757>>>>>    UInteger nFileSizeHigh
70757>>>>>    UInteger nFileSizeLow
70757>>>>>    DWord    dares
70757>>>>>    DWord    dbres
70757>>>>>    Short[MAX_PATH] cFileName
70757>>>>>    Short[14]       cAlternateFileName
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct structSystemTime
70757>>>>>    UShort wYear
70757>>>>>    UShort wMonth
70757>>>>>    UShort wDayOfWeek
70757>>>>>    UShort wDay
70757>>>>>    UShort wHour
70757>>>>>    UShort wMinute
70757>>>>>    UShort wSecond
70757>>>>>    UShort wMillieseconds
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct structFile
70757>>>>>    Handle hFilehandle
70757>>>>>    String sFilename    // Assigned filename in OEM format.
70757>>>>>    Boolean bEndOfFile  // True then the end of the binary file had been read.
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct structFileBufferPointer
70757>>>>>    Integer iBufferPointer
70757>>>>>    Integer iBufferSize
70757>>>>>    BigInt biFromFilePosition
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct tsSearchResult
70757>>>>>    String sFilename
70757>>>>>    String sAlternateFileName   // 8.3 format
70757>>>>>    DateTime dtCreationDateTime
70757>>>>>    DateTime dtLastAccessDateTime
70757>>>>>    DateTime dtLastWriteDateTime
70757>>>>>    BigInt biFileSize
70757>>>>>    Integer iFileAttributes
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct tsVS_FIXEDFILEINFO
70757>>>>>    DWord dwSignature
70757>>>>>    DWord dwStrucVersion
70757>>>>>    DWord dwFileVersionMS
70757>>>>>    DWord dwFileVersionLS
70757>>>>>    DWord dwProductVersionMS
70757>>>>>    DWord dwProductVersionLS
70757>>>>>    DWord dwFileFlagsMask
70757>>>>>    DWord dwFileFlags
70757>>>>>    DWord dwFileOS
70757>>>>>    DWord dwFileType
70757>>>>>    DWord dwFileSubtype
70757>>>>>    //    DWord dwFileDateMS
70757>>>>>    //    DWord dwFileDateLS
70757>>>>>    UBigInt ubiFileDate
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct tsFileVersionInfo
70757>>>>>    tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
70757>>>>>    tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
70757>>>>>    Short[] siFileVersion
70757>>>>>    Short[] siProductVersion
70757>>>>>    DateTime dtCreationDateTime
70757>>>>>    String sComments
70757>>>>>    String sCompanyName
70757>>>>>    String sFileDescription
70757>>>>>    String sFileVersion
70757>>>>>    String sInternalName
70757>>>>>    String sLegalCopyright
70757>>>>>    String sLegalTrademarks
70757>>>>>    String sOriginalFilename
70757>>>>>    String sProductName
70757>>>>>    String sProductVersion
70757>>>>>    String sPrivateBuild
70757>>>>>    String sSpecialBuild
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Struct tsLandAndCodePage
70757>>>>>    UShort wLanguage
70757>>>>>    UShort wCodePage
70757>>>>>End_Struct
70757>>>>>
70757>>>>>Register_Function FileErrorText Integer iFilenumber Returns String
70757>>>>>
70757>>>>>//************************************************************************
70757>>>>>// The filesystem class
70757>>>>>//************************************************************************
70757>>>>>Class cFilesystem is a cObject
70758>>>>>
70758>>>>>    Procedure Construct_Object
70760>>>>>        Forward Send Construct_Object
70762>>>>>
70762>>>>>        // True then the end of the binary file had been read - not when $1A (EOF) is met.
70762>>>>>        // Legacy property. Use the BinaryFileEndOfFile function instead.
70762>>>>>        Property Boolean pbEOF False
70763>>>>>
70763>>>>>        // True if any error has occured during fileoprerations.
70763>>>>>        Property Boolean pbError False
70764>>>>>
70764>>>>>        // If errormessages should be called with dataflex error command set this to true
70764>>>>>        Property Boolean pbErrorAsVDFError False
70765>>>>>
70765>>>>>        // Keeps assigned handles and filenames For each filenumber.
70765>>>>>        // private
70765>>>>>        Property structFile[] plsFile
70766>>>>>
70766>>>>>        // Keeps read cached buffers For each filenumer. Used For BinaryReadChcheu
70766>>>>>        // private
70766>>>>>        Property String[] psaCachedBuffer
70767>>>>>
70767>>>>>        // Pointers For cached buffers.
70767>>>>>        // private
70767>>>>>        Property structFileBufferPointer[] plsCachedPointer
70768>>>>>    End_Procedure
70769>>>>>
70769>>>>>    // Returns the next available filenumber For a binary file.
70769>>>>>    Function BinaryFileNextFilenumber Returns Integer
70771>>>>>        structFile[] lsFile
70771>>>>>        structFile[] lsFile
70772>>>>>        Integer iMaxFiles iCurrentFile iNextFileNumber
70772>>>>>        Get plsFile to lsFile
70773>>>>>        Move (SizeOfArray(lsFile)) to iMaxFiles
70774>>>>>        Move -1 to iNextFileNumber
70775>>>>>        Move 0 to iCurrentFile
70776>>>>>        While (iCurrentFile < iMaxFiles and iNextFileNumber = -1)
70780>>>>>            If (lsFile[iCurrentFile].hFilehandle = 0) Begin
70782>>>>>                Move iCurrentFile to iNextFileNumber
70783>>>>>            End
70783>>>>>>
70783>>>>>            Else Begin
70784>>>>>                Increment iCurrentFile
70785>>>>>            End
70785>>>>>>
70785>>>>>        Loop
70786>>>>>>
70786>>>>>        If (iNextFileNumber = -1) Begin
70788>>>>>            Move iMaxFiles to iNextFileNumber
70789>>>>>        End
70789>>>>>>
70789>>>>>        Function_Return iNextFileNumber
70790>>>>>    End_Function
70791>>>>>
70791>>>>>    // Opens a binary file.
70791>>>>>    // If bShared is false or not pharsed the file is opened in exclusive.
70791>>>>>    // If bShared is True the file is opened with both read and write shared mode
70791>>>>>    // If bCreate is True the file is created if it does not exist already.
70791>>>>>    // If bReadOnly is True the file is opened with only read access (and only read shared mode if bShared is also true).
70791>>>>>    // Returns true if the file was opened or created without error.
70791>>>>>    Function BinaryFileOpen Integer iFilenumber String sFilename Boolean bShared Boolean bCreate Boolean bReadOnly Returns Boolean
70793>>>>>        Integer iReturnValue iErrornumber
70793>>>>>        DWord dwSharedMode dwCreateMode dwAccessMode
70793>>>>>        structFile[] lsFile
70793>>>>>        structFile[] lsFile
70794>>>>>        String sFilenameANSI
70794>>>>>        Boolean bOk bFilehandleOK
70794>>>>>        Get plsFile to lsFile
70795>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
70797>>>>>            If (lsFile[iFilenumber].hFilehandle = 0) Begin
70799>>>>>                Move True to bFilehandleOK
70800>>>>>            End
70800>>>>>>
70800>>>>>        End
70800>>>>>>
70800>>>>>        Else Begin
70801>>>>>            Move True to bFilehandleOK
70802>>>>>        End
70802>>>>>>
70802>>>>>        If bFilehandleOK Begin
70804>>>>>            Move sFilename to lsFile[iFilenumber].sFilename
70805>>>>>            Move sFilename to sFilenameANSI
70806>>>>>            Set pbError to False
70807>>>>>            Move False to bOk
70808>>>>>            Move GENERIC_RANDOM to dwAccessMode
70809>>>>>            Move FNULL to dwSharedMode
70810>>>>>            If (num_arguments > 2) Begin
70812>>>>>                If (bShared = True) Begin
70814>>>>>                    Move FILE_SHARE_RANDOM to dwSharedMode
70815>>>>>                End
70815>>>>>>
70815>>>>>            End
70815>>>>>>
70815>>>>>            Move OPEN_EXISTING to dwCreateMode
70816>>>>>            If (num_arguments > 3) Begin
70818>>>>>                If (bCreate = True) Begin
70820>>>>>                    Move OPEN_ALWAYS to dwCreateMode
70821>>>>>                End
70821>>>>>>
70821>>>>>            End
70821>>>>>>
70821>>>>>            If (num_arguments > 4) Begin
70823>>>>>                If (bReadOnly = True) Begin
70825>>>>>                    Move GENERIC_READ to dwAccessMode
70826>>>>>                    If (bShared = True) Begin
70828>>>>>                        Move FILE_SHARE_READ to dwSharedMode
70829>>>>>                    End
70829>>>>>>
70829>>>>>                End
70829>>>>>>
70829>>>>>            End
70829>>>>>>
70829>>>>>            Append sFilenameANSI (Character(0)) (Character(0))
70831>>>>>            Move (fsCreatefile(sFilenameANSI, dwAccessMode, dwSharedMode, FNULL, dwCreateMode, FILE_ATTRIBUTE_NORMAL, FNULL)) to iReturnValue
70832>>>>>            If (iReturnValue = INVALID_HANDLE_VALUE) Begin
70834>>>>>                Move (fsGetLastError()) to iErrornumber
70835>>>>>                If iErrornumber Begin
70837>>>>>                    Send DoShowError iErrornumber ("File: "+ sFilename)
70838>>>>>                End
70838>>>>>>
70838>>>>>            End
70838>>>>>>
70838>>>>>            Else Begin
70839>>>>>                Move iReturnValue to lsFile[iFilenumber].hFilehandle
70840>>>>>                Move False to lsFile[iFilenumber].bEndOfFile
70841>>>>>                Set plsFile to lsFile
70842>>>>>                Set pbEOF to False
70843>>>>>                Move True to bOk
70844>>>>>            End
70844>>>>>>
70844>>>>>        End
70844>>>>>>
70844>>>>>        Else Begin
70845>>>>>            Send warning_box "The filenumber is already used."
70846>>>>>        End
70846>>>>>>
70846>>>>>        Function_Return bOk
70847>>>>>    End_Function
70848>>>>>
70848>>>>>    // Closing a binary file
70848>>>>>    // Returns true if the file could be closed.
70848>>>>>    Function BinaryFileClose Integer iFilenumber Returns Boolean
70850>>>>>        Integer iRetVal iErrorNumber
70850>>>>>        Handle hHandle
70850>>>>>        structFile[] lsFile
70850>>>>>        structFile[] lsFile
70851>>>>>        structFileBufferPointer[] lsFileBufferPointer
70851>>>>>        structFileBufferPointer[] lsFileBufferPointer
70852>>>>>        String[] saCachedBuffer
70853>>>>>        Boolean bOk
70853>>>>>        Get BinaryFileHandle iFilenumber to hHandle
70854>>>>>        Set pbError to False
70855>>>>>        Move False to bOk
70856>>>>>        If hHandle Begin
70858>>>>>            Move (fsCloseHandle(hHandle)) to iRetVal
70859>>>>>            If (iRetVal = 0) Begin           // Could not close
70861>>>>>                Move (fsGetLastError()) to iErrorNumber
70862>>>>>                If iErrorNumber Begin
70864>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
70865>>>>>                End
70865>>>>>>
70865>>>>>            End
70865>>>>>>
70865>>>>>            Else Begin
70866>>>>>                Get plsFile to lsFile
70867>>>>>                Get plsCachedPointer to lsFileBufferPointer
70868>>>>>                Get psaCachedBuffer to saCachedBuffer
70869>>>>>                Move 0 to lsFile[iFilenumber].hFilehandle
70870>>>>>                Move "" to saCachedBuffer[iFilenumber]
70871>>>>>                Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70872>>>>>                Move 0 to lsFileBufferPointer[iFilenumber].iBufferSize
70873>>>>>                Move 0 to lsFileBufferPointer[iFilenumber].biFromFilePosition
70874>>>>>                Set plsFile to lsFile
70875>>>>>                Set plsCachedPointer to lsFileBufferPointer
70876>>>>>                Set psaCachedBuffer to saCachedBuffer
70877>>>>>                Move True to bOk
70878>>>>>            End
70878>>>>>>
70878>>>>>        End
70878>>>>>>
70878>>>>>        Function_Return bOk
70879>>>>>    End_Function
70880>>>>>
70880>>>>>    // Reading from a binary file.
70880>>>>>    // The data read from the file is placed in sReadBuffer and the function returns the number of bytes read.
70880>>>>>    // Then the function returns 0 the end of file has been reached (pbEOF will then be true) or an error has occured (pbError will then be true).
70880>>>>>    // No errors occures if you try to read past end of file.
70880>>>>>    // To speed up reading process you should read in a block of data at a time (i.e. iNumberOfBytes = 2000) instead of
70880>>>>>    // reading one byte at a time. No errors occures if you try to read past end
70880>>>>>    // of file. Note that iNumberOfBytes must not exceed the argument size.
70880>>>>>    Function BinaryFileRead Integer iFilenumber Integer iNumberOfBytes String ByRef sReadBuffer Returns Integer
70882>>>>>        Handle hFileHandle
70882>>>>>        Integer iBytesRead iMaxBuffer iErrorNumber
70882>>>>>        Boolean bOk
70882>>>>>        structFile[] lsFile
70882>>>>>        structFile[] lsFile
70883>>>>>        Set pbError to False
70884>>>>>        Move 0 to iBytesRead
70885>>>>>        Get_Argument_Size to iMaxBuffer
70886>>>>>        If (iNumberOfBytes > iMaxBuffer) Begin
70888>>>>>            Send warning_box "Blocksize to read exceeds argument size!"
70889>>>>>            Function_Return iBytesRead
70890>>>>>        End
70890>>>>>>
70890>>>>>        If (iNumberOfBytes < 1) Begin
70892>>>>>            Send warning_box "Number of bytes to read can not be less than one."
70893>>>>>            Function_Return iBytesRead
70894>>>>>        End
70894>>>>>>
70894>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
70895>>>>>        If hFileHandle Begin
70897>>>>>            Move (ZeroString(iNumberOfBytes)) to sReadBuffer
70898>>>>>            Move (fsReadFile(hFileHandle, AddressOf(sReadBuffer), iNumberOfBytes, (AddressOf(iBytesRead)), FNULL)) to bOk
70899>>>>>            If (bOk = False) Begin
70901>>>>>                Move (fsGetLastError()) to iErrorNumber
70902>>>>>                If iErrorNumber Begin
70904>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
70905>>>>>                End
70905>>>>>>
70905>>>>>            End
70905>>>>>>
70905>>>>>            Else Begin
70906>>>>>                If (iBytesRead = 0 or iBytesRead <> iNumberOfBytes) Begin
70908>>>>>                    Get plsFile to lsFile
70909>>>>>                    Move True to lsFile[iFilenumber].bEndOfFile
70910>>>>>                    Set plsFile to lsFile
70911>>>>>                    Set pbEOF to True
70912>>>>>                    Move (Left(sReadBuffer, iBytesRead)) to sReadBuffer
70913>>>>>                End
70913>>>>>>
70913>>>>>            End
70913>>>>>>
70913>>>>>        End
70913>>>>>>
70913>>>>>        Else Begin
70914>>>>>            Send warning_box FS_FILEHANDLEMISSING
70915>>>>>        End
70915>>>>>>
70915>>>>>        Function_Return iBytesRead
70916>>>>>    End_Function
70917>>>>>
70917>>>>>    // Reading from a binary file until a string of bytes are matched.
70917>>>>>    // The data read from the file is placed in the sReturnBuffer and the function returns the number of bytes read until the match is read including the match.
70917>>>>>    // Then the function returns 0 the end of file has been reached (pbEOF will then be true) or an error has occured (pbError will then be true).
70917>>>>>    // The return string buffer would also be empty.
70917>>>>>    // No errors occures if you try to read past end of file.
70917>>>>>    // To speed up reading process the buffer will be read in sizes of the current argument_size.
70917>>>>>    Function BinaryFileReadCachedUntilMatch Integer iFilenumber String sMatchString String ByRef sReturnBuffer Boolean ByRef bEndOfFile Returns Integer
70919>>>>>        Handle hFileHandle
70919>>>>>        Integer iBuffersize iMatchPos iLengthMatch
70919>>>>>        String sByte
70919>>>>>        structFile[] lsFile
70919>>>>>        structFile[] lsFile
70920>>>>>        structFileBufferPointer[] lsFileBufferPointer
70920>>>>>        structFileBufferPointer[] lsFileBufferPointer
70921>>>>>        String[] saCachedBuffer
70922>>>>>        Get plsFile to lsFile
70923>>>>>        Move "" to sReturnBuffer
70924>>>>>        Move 1 to iMatchPos
70925>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
70927>>>>>            Move lsFile[iFilenumber].hFilehandle to hFileHandle
70928>>>>>            If (hFileHandle <> 0) Begin
70930>>>>>                Move (Length(sMatchString)) to iLengthMatch
70931>>>>>                Get plsCachedPointer to lsFileBufferPointer
70932>>>>>                Get psaCachedBuffer to saCachedBuffer
70933>>>>>                If (iFilenumber >= SizeOfArray(lsFileBufferPointer)) Begin
70935>>>>>                    Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70936>>>>>                    Move "" to saCachedBuffer[iFilenumber]
70937>>>>>                End
70937>>>>>>
70937>>>>>                Repeat
70937>>>>>>
70937>>>>>                    If (lsFileBufferPointer[iFilenumber].iBufferPointer > lsFileBufferPointer[iFilenumber].iBufferSize) Begin
70939>>>>>                        Get_Argument_Size to iBuffersize
70940>>>>>                        Get BinaryFilePosition iFilenumber to lsFileBufferPointer[iFilenumber].biFromFilePosition
70941>>>>>                        Get BinaryFileRead iFilenumber iBuffersize (&saCachedBuffer[iFilenumber]) to lsFileBufferPointer[iFilenumber].iBufferSize
70942>>>>>                        Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70943>>>>>                        Set psaCachedBuffer to saCachedBuffer
70944>>>>>                    End
70944>>>>>>
70944>>>>>                    If (lsFileBufferPointer[iFilenumber].iBufferPointer =< lsFileBufferPointer[iFilenumber].iBufferSize) Begin
70946>>>>>                        Move (Mid(saCachedBuffer[iFilenumber], 1, lsFileBufferPointer[iFilenumber].iBufferPointer)) to sByte
70947>>>>>                        Increment lsFileBufferPointer[iFilenumber].iBufferPointer
70948>>>>>                        Move (sReturnBuffer + sByte) to sReturnBuffer
70949>>>>>                        If (sByte = Mid(sMatchString, 1, iMatchPos)) Begin
70951>>>>>                            Increment iMatchPos
70952>>>>>                        End
70952>>>>>>
70952>>>>>                        Else Begin
70953>>>>>                            Move 1 to iMatchPos
70954>>>>>                        End
70954>>>>>>
70954>>>>>                    End
70954>>>>>>
70954>>>>>                Until (iMatchPos > iLengthMatch or lsFileBufferPointer[iFilenumber].iBufferSize = 0)
70956>>>>>                Set plsCachedPointer to lsFileBufferPointer
70957>>>>>                If (lsFileBufferPointer[iFilenumber].iBufferSize = 0) Begin
70959>>>>>                    Move lsFile[iFilenumber].bEndOfFile to bEndOfFile
70960>>>>>                End
70960>>>>>>
70960>>>>>            End
70960>>>>>>
70960>>>>>            Else Begin
70961>>>>>                Send warning_box FS_FILEHANDLEMISSING
70962>>>>>            End
70962>>>>>>
70962>>>>>        End
70962>>>>>>
70962>>>>>        Function_Return (Length(sReturnBuffer))
70963>>>>>    End_Function
70964>>>>>
70964>>>>>    // Reading from a binary file as CSV file For next text field.
70964>>>>>    // The data read from the file is placed in the sReturnBuffer excluding the separator and the function returns true.
70964>>>>>    // Then the function returns false the end of file has been reached (pbEOF will then be true) or an error has occured (pbError will then be true).
70964>>>>>    // When the end of row data has been read the bEndOfRow is set true.
70964>>>>>    // The end of row is indicated with sCharEOL. If that is not applied the charactersequence character(13) + character(10) is used.
70964>>>>>    // The return string buffer would also be empty.
70964>>>>>    // No errors occures if you try to read past end of file.
70964>>>>>    // To speed up reading process the buffer will be read in sizes of the current argument_size.
70964>>>>>    Function BinaryFileReadCachedCSV Integer iFilenumber String sFieldseparator String sTextQualification String ByRef sReturnBuffer Boolean ByRef bEndOfRow Boolean ByRef bEndOfFile String sCharEOL Returns Integer
70966>>>>>        Handle hFileHandle
70966>>>>>        Integer iLengthSeparator iLengthTextQualification iEOLLength iTestLength
70966>>>>>        String sByte sEOL sTestBuffer
70966>>>>>        structFile[] lsFile
70966>>>>>        structFile[] lsFile
70967>>>>>        structFileBufferPointer[] lsFileBufferPointer
70967>>>>>        structFileBufferPointer[] lsFileBufferPointer
70968>>>>>        String[] saCachedBuffer
70969>>>>>        Boolean bInTextFieldMode bTextFieldReady bFieldSeparator bTextQualificator bEscapeTextQualificatorTest bByteOk
70969>>>>>        BigInt biAfterTextQualificator
70969>>>>>        Get plsFile to lsFile
70970>>>>>        If (num_arguments > 6) Begin
70972>>>>>            Move sCharEOL to sEOL
70973>>>>>        End
70973>>>>>>
70973>>>>>        Else Begin
70974>>>>>            Move ((Character(13))+(Character(10))) to sEOL
70975>>>>>        End
70975>>>>>>
70975>>>>>        Move (Length(sEOL)) to iEOLLength
70976>>>>>        Move "" to sReturnBuffer
70977>>>>>        Move "" to sByte
70978>>>>>        Move False to bInTextFieldMode
70979>>>>>        Move False to bTextFieldReady
70980>>>>>        Move False to bEndOfRow
70981>>>>>        Move False to bTextQualificator
70982>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
70984>>>>>            Move lsFile[iFilenumber].hFilehandle to hFileHandle
70985>>>>>            If (hFileHandle <> 0) Begin
70987>>>>>                Move (Length(sFieldseparator)) to iLengthSeparator
70988>>>>>                Move (Length(sTextQualification)) to iLengthTextQualification
70989>>>>>                Get plsCachedPointer to lsFileBufferPointer
70990>>>>>                Get psaCachedBuffer to saCachedBuffer
70991>>>>>
70991>>>>>                If (iFilenumber >= SizeOfArray(lsFileBufferPointer)) Begin
70993>>>>>                    Move 1 to lsFileBufferPointer[iFilenumber].iBufferPointer
70994>>>>>                    Move "" to saCachedBuffer[iFilenumber]
70995>>>>>                End
70995>>>>>>
70995>>>>>                Repeat
70995>>>>>>
70995>>>>>                    Get NextByteCSV (&iFilenumber) (&lsFileBufferPointer[iFilenumber]) (&saCachedBuffer) (&sByte) to bByteOk
70996>>>>>                    If bByteOk Begin
70998>>>>>                        Move (sReturnBuffer + sByte) to sReturnBuffer
70999>>>>>                        Move (Right(sReturnBuffer, iLengthSeparator) = sFieldseparator) to bFieldSeparator
71000>>>>>                        If bFieldSeparator Begin
71002>>>>>                            Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iLengthSeparator))) to sReturnBuffer
71003>>>>>                            Move True to bTextFieldReady
71004>>>>>                            Move False to bEscapeTextQualificatorTest
71005>>>>>                        End
71005>>>>>>
71005>>>>>                        If (not(bTextFieldReady)) Begin
71007>>>>>                            Move (Right(sReturnBuffer, iEOLLength) = sEOL) to bEndOfRow
71008>>>>>                            If bEndOfRow Begin
71010>>>>>                                Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iEOLLength))) to sReturnBuffer
71011>>>>>                                Move True to bTextFieldReady
71012>>>>>                            End
71012>>>>>>
71012>>>>>                        End
71012>>>>>>
71012>>>>>                        If (not(bTextFieldReady)) Begin
71014>>>>>                            Move (Right(sReturnBuffer, iLengthTextQualification) = sTextQualification) to bTextQualificator
71015>>>>>                            If bTextQualificator Begin
71017>>>>>                            // Read until end of text field. Place filepointer after text field.
71017>>>>>                                Move True to bInTextFieldMode
71018>>>>>                                Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iLengthTextQualification))) to sReturnBuffer
71019>>>>>                                Repeat
71019>>>>>>
71019>>>>>                                    Get NextByteCSV (&iFilenumber) (&lsFileBufferPointer[iFilenumber]) (&saCachedBuffer) (&sByte) to bByteOk
71020>>>>>                                    If bByteOk Begin
71022>>>>>                                        Move (sReturnBuffer + sByte) to sReturnBuffer
71023>>>>>                                        Move (Right(sReturnBuffer, iLengthTextQualification) = sTextQualification) to bTextQualificator
71024>>>>>                                        If bTextQualificator Begin
71026>>>>>                                        // Either it is the end of the text field or the escape text qualificator has been read.
71026>>>>>                                        // Read ahead to a new buffer to see if the next bytes are the text qualificator.
71026>>>>>                                        // If it is, add the new buffer to the return buffer.
71026>>>>>                                        // If not, restore the filebuffer to this position and mark the text field ended.
71026>>>>>                                            Move (Left(sReturnBuffer, (Length(sReturnBuffer) - iLengthTextQualification))) to sReturnBuffer
71027>>>>>                                            Set plsCachedPointer to lsFileBufferPointer
71028>>>>>                                            Get BinaryFileCachedPosition iFilenumber to biAfterTextQualificator
71029>>>>>                                            Move "" to sTestBuffer
71030>>>>>                                            Move 0 to iTestLength
71031>>>>>                                            Move True to bEscapeTextQualificatorTest
71032>>>>>                                            Repeat
71032>>>>>>
71032>>>>>                                                Get NextByteCSV (&iFilenumber) (&lsFileBufferPointer[iFilenumber]) (&saCachedBuffer) (&sByte) to bByteOk
71033>>>>>                                                If bByteOk Begin
71035>>>>>                                                    Move (sTestBuffer + sByte) to sTestBuffer
71036>>>>>                                                    Increment iTestLength
71037>>>>>                                                    If (Left(sTextQualification, iTestLength) = sTestBuffer) Begin
71039>>>>>                                                        If (iTestLength = iLengthTextQualification) Begin
71041>>>>>                                                            Move (sReturnBuffer + sTestBuffer) to sReturnBuffer
71042>>>>>                                                            Move False to bEscapeTextQualificatorTest
71043>>>>>                                                        End
71043>>>>>>
71043>>>>>                                                    End
71043>>>>>>
71043>>>>>                                                    Else Begin
71044>>>>>                                                        Set BinaryFileChachedPosition iFilenumber to biAfterTextQualificator
71045>>>>>                                                        Get plsCachedPointer to lsFileBufferPointer
71046>>>>>                                                        Move False to bEscapeTextQualificatorTest
71047>>>>>                                                        Move False to bInTextFieldMode
71048>>>>>                                                    End
71048>>>>>>
71048>>>>>                                                End
71048>>>>>>
71048>>>>>                                            Until (bEscapeTextQualificatorTest = False or lsFileBufferPointer[iFilenumber].iBufferSize = 0 or bByteOk = False)
71050>>>>>                                        End
71050>>>>>>
71050>>>>>                                    End
71050>>>>>>
71050>>>>>                                Until (bInTextFieldMode = False or lsFileBufferPointer[iFilenumber].iBufferSize = 0 or bByteOk = False)
71052>>>>>                            End
71052>>>>>>
71052>>>>>                        End
71052>>>>>>
71052>>>>>                    End
71052>>>>>>
71052>>>>>                Until (bTextFieldReady = True or lsFileBufferPointer[iFilenumber].iBufferSize = 0 or bByteOk = False)
71054>>>>>                Set plsCachedPointer to lsFileBufferPointer
71055>>>>>                If (lsFileBufferPointer[iFilenumber].iBufferSize = 0) Begin
71057>>>>>                    Move lsFile[iFilenumber].bEndOfFile to bEndOfFile
71058>>>>>                    If (bEndOfFile = True) Begin
71060>>>>>                        Move True to bTextFieldReady
71061>>>>>                        Move True to bEndOfRow
71062>>>>>                    End
71062>>>>>>
71062>>>>>                End
71062>>>>>>
71062>>>>>            End
71062>>>>>>
71062>>>>>            Else Begin
71063>>>>>                Send warning_box FS_FILEHANDLEMISSING
71064>>>>>            End
71064>>>>>>
71064>>>>>        End
71064>>>>>>
71064>>>>>        Function_Return bTextFieldReady
71065>>>>>    End_Function
71066>>>>>
71066>>>>>    Function NextByteCSV Integer ByRef iFilenumber structFileBufferPointer ByRef lsFileBufferPointer String[] ByRef saCachedBuffer String ByRef sByte Returns String
71068>>>>>        Integer iBufferSize
71068>>>>>        Boolean bOk
71068>>>>>        If (lsFileBufferPointer.iBufferPointer > lsFileBufferPointer.iBufferSize) Begin
71070>>>>>            Get_Argument_Size to iBufferSize
71071>>>>>            Get BinaryFilePosition iFilenumber to lsFileBufferPointer.biFromFilePosition
71072>>>>>            Get BinaryFileRead iFilenumber iBufferSize (&saCachedBuffer[iFilenumber]) to lsFileBufferPointer.iBufferSize
71073>>>>>            Move 1 to lsFileBufferPointer.iBufferPointer
71074>>>>>            Set psaCachedBuffer to saCachedBuffer
71075>>>>>        End
71075>>>>>>
71075>>>>>        If (lsFileBufferPointer.iBufferPointer <= lsFileBufferPointer.iBufferSize) Begin
71077>>>>>            Move (Mid(saCachedBuffer[iFilenumber], 1, lsFileBufferPointer.iBufferPointer)) to sByte
71078>>>>>            Increment lsFileBufferPointer.iBufferPointer
71079>>>>>            Move True to bOk
71080>>>>>        End
71080>>>>>>
71080>>>>>        Function_Return bOk
71081>>>>>    End_Function
71082>>>>>
71082>>>>>    // Shortcut to read a binary file as lines from a textfile.
71082>>>>>    // Reads from cached file until sCharEOL are recieved.
71082>>>>>    // Data is returned without the ending sCharEOL
71082>>>>>    // If sCharEOL is not applied the charactersequence character(13) + character(10) is used.
71082>>>>>    // Returns True when the line has been read.
71082>>>>>    Function BinaryFileReadCachedLN Integer iFilenumber String ByRef sLine Boolean ByRef bEndOfFile String sCharEOL Returns Boolean
71084>>>>>        Boolean bEndOfRow
71084>>>>>        Integer iBytesRead iEOLLength
71084>>>>>        String sEOL
71084>>>>>        If (num_arguments > 3) Begin
71086>>>>>            Move sCharEOL to sEOL
71087>>>>>        End
71087>>>>>>
71087>>>>>        Else Begin
71088>>>>>            Move ((Character(13))+(Character(10))) to sEOL
71089>>>>>        End
71089>>>>>>
71089>>>>>        Move (Length(sEOL)) to iEOLLength
71090>>>>>        Get BinaryFileReadCachedUntilMatch iFilenumber sEOL (&sLine) (&bEndOfFile) to iBytesRead
71091>>>>>        If (iBytesRead > 0) Begin
71093>>>>>            If (Right(sLine, iEOLLength) = sEOL) Begin
71095>>>>>                Move (Left(sLine, (Length(sLine) - iEOLLength))) to sLine
71096>>>>>                Move True to bEndOfRow
71097>>>>>            End
71097>>>>>>
71097>>>>>        End
71097>>>>>>
71097>>>>>        Function_Return bEndOfRow
71098>>>>>    End_Function
71099>>>>>
71099>>>>>    // Writing to a binary file.
71099>>>>>    // Returns true if the data was written to the file without error.
71099>>>>>    Function BinaryFileWrite Integer iFilenumber String ByRef sWriteData Returns Boolean
71101>>>>>        Integer iBytesWritten iBytesToWrite iErrorNumber
71101>>>>>        Handle hFileHandle
71101>>>>>        Boolean bOk
71101>>>>>        Set pbError to False
71102>>>>>        Move False to bOk
71103>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71104>>>>>        If hFileHandle Begin
71106>>>>>            Move 0 to iBytesWritten
71107>>>>>            Move (Length(sWriteData)) to iBytesToWrite
71108>>>>>            Move (fsWriteFile(hFileHandle, AddressOf(sWriteData), iBytesToWrite, AddressOf(iBytesWritten), FNULL)) to bOk
71109>>>>>            If (bOk = False) Begin
71111>>>>>                Move (fsGetLastError()) to iErrorNumber
71112>>>>>                If iErrorNumber Begin
71114>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71115>>>>>                End
71115>>>>>>
71115>>>>>            End
71115>>>>>>
71115>>>>>            If (iBytesToWrite <> iBytesWritten) Begin
71117>>>>>                Send Warning_box "Not all data could be written!"
71118>>>>>                Move False to bOk
71119>>>>>            End
71119>>>>>>
71119>>>>>        End
71119>>>>>>
71119>>>>>        Else Begin
71120>>>>>            Send Warning_Box FS_FILEHANDLEMISSING
71121>>>>>        End
71121>>>>>>
71121>>>>>        Function_Return bOk
71122>>>>>    End_Function
71123>>>>>
71123>>>>>    // Write HEX values to a binary file as bytes.
71123>>>>>    // HEX values in sWriteHEX are first coverted to bytes and then written
71123>>>>>    // to the binary file.
71123>>>>>    // Returns true if the HEX data was written to the file without error.
71123>>>>>    Function BinaryFileWriteHex Integer iFilenumer String ByRef sWriteHex Returns Boolean
71125>>>>>        String sData
71125>>>>>        Integer iLength iCount iByte
71125>>>>>        Boolean bOk
71125>>>>>        Move (Length(sWritehex)) to iLength
71126>>>>>        Move 1 to iCount
71127>>>>>        While (iCount < iLength)
71131>>>>>            Move ("$"+Mid(sWriteHex, 2, iCount)) to iByte
71132>>>>>            Move (iCount + 2) to iCount
71133>>>>>            Move (sData + Character(iByte)) to sData
71134>>>>>        Loop
71135>>>>>>
71135>>>>>        Get BinaryFileWrite iFilenumer (&sData) to bOk
71136>>>>>        Function_Return bOk
71137>>>>>    End_Function
71138>>>>>
71138>>>>>    // Retrives the file size from a binary file.
71138>>>>>    Function BinaryFileSize Integer iFilenumber Returns BigInt
71140>>>>>        BigInt biFilesize
71140>>>>>        Handle hFileHandle
71140>>>>>        Boolean bOk
71140>>>>>        Integer iErrorNumber
71140>>>>>        Set pbError to False
71141>>>>>        Move -1 to biFilesize
71142>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71143>>>>>        If hFileHandle Begin
71145>>>>>        // The LARGE_INTEGER structure has the same structure as a BigInt.
71145>>>>>            Move (fsGetFileSizeEx(hFileHandle, AddressOf(biFilesize))) to bOk
71146>>>>>            If (bOk = -False) Begin
71148>>>>>                Move (fsGetLastError()) to iErrorNumber
71149>>>>>                If iErrorNumber Begin
71151>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71152>>>>>                End
71152>>>>>>
71152>>>>>            End
71152>>>>>>
71152>>>>>        End
71152>>>>>>
71152>>>>>        Else Begin
71153>>>>>            Send warning_box FS_FILEHANDLEMISSING
71154>>>>>        End
71154>>>>>>
71154>>>>>        Function_Return biFilesize
71155>>>>>    End_Function
71156>>>>>
71156>>>>>    // Retrives the file position from a binary file.
71156>>>>>    // Returns -1 if an error occured.
71156>>>>>    Function BinaryFilePosition Integer iFilenumber Returns BigInt
71158>>>>>        BigInt biFilePosition biBigHi
71158>>>>>        Handle hFileHandle
71158>>>>>        Boolean bOk
71158>>>>>        Integer iErrorNumber iLo iHi
71158>>>>>        UInteger iNewPos
71158>>>>>
71158>>>>>        Set pbError to False
71159>>>>>        Move -1 to biFilePosition
71160>>>>>        Move 0 to iHi
71161>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71162>>>>>        If hFileHandle Begin
71164>>>>>            Move (2^32) to biBigHi
71165>>>>>            Move (fsSetFilePointer(hFileHandle, ilo, AddressOf(iHi), FILE_CURRENT)) to iNewPos
71166>>>>>            If (iNewPos = (biBigHi - 1)) Begin
71168>>>>>                Move (fsGetLastError()) to iErrorNumber
71169>>>>>                If iErrorNumber Begin
71171>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71172>>>>>                End
71172>>>>>>
71172>>>>>                Else Begin
71173>>>>>                    Move True to bOk
71174>>>>>                End
71174>>>>>>
71174>>>>>            End
71174>>>>>>
71174>>>>>            Else Begin
71175>>>>>                Move True to bOk
71176>>>>>            End
71176>>>>>>
71176>>>>>            If bOk Begin
71178>>>>>                Move ((iHi * biBigHi) + iNewPos) to biFilePosition
71179>>>>>            End
71179>>>>>>
71179>>>>>        End
71179>>>>>>
71179>>>>>        Else Begin
71180>>>>>            Send warning_box FS_FILEHANDLEMISSING
71181>>>>>        End
71181>>>>>>
71181>>>>>        Function_Return biFilePosition
71182>>>>>    End_Function
71183>>>>>
71183>>>>>    // Sets the file position from a binary file to a new position.
71183>>>>>    Procedure Set BinaryFilePosition Integer iFilenumber BigInt biPosition
71185>>>>>        Handle hFileHandle
71185>>>>>        Integer iHi iErrorNumber
71185>>>>>        UInteger iLo iNewPos
71185>>>>>        Boolean bOk
71185>>>>>        BigInt biFileSize biBigHi
71185>>>>>        structFile[] lsFile
71185>>>>>        structFile[] lsFile
71186>>>>>
71186>>>>>        Set pbError to False
71187>>>>>        Move False to bOk
71188>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71189>>>>>        If hFileHandle Begin
71191>>>>>            Move (2^32) to biBigHi
71192>>>>>            Move (biPosition / biBigHi) to iHi
71193>>>>>            Move (biPosition - (iHi * biBigHi)) to iLo
71194>>>>>            Move (fsSetFilePointer(hFileHandle, iLo, AddressOf(iHi), FILE_BEGIN)) to iNewPos
71195>>>>>            If (iNewPos = (biBigHi - 1)) Begin
71197>>>>>                Move (fsGetLastError()) to iErrorNumber
71198>>>>>                If iErrorNumber Begin
71200>>>>>                    Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71201>>>>>                End
71201>>>>>>
71201>>>>>                Else Begin
71202>>>>>                    Move True to bOk
71203>>>>>                End
71203>>>>>>
71203>>>>>            End
71203>>>>>>
71203>>>>>            Else Begin
71204>>>>>                Move True to bOk
71205>>>>>            End
71205>>>>>>
71205>>>>>            If bOk Begin
71207>>>>>                Get BinaryFileSize iFilenumber to biFileSize
71208>>>>>                Get plsFile to lsFile
71209>>>>>                If (biFileSize > biPosition) Begin
71211>>>>>                    Move False to lsFile[iFilenumber].bEndOfFile
71212>>>>>                    Set pbEOF to False
71213>>>>>                End
71213>>>>>>
71213>>>>>                Else Begin
71214>>>>>                    Move True to lsFile[iFilenumber].bEndOfFile
71215>>>>>                    Set pbEOF to True
71216>>>>>                End
71216>>>>>>
71216>>>>>                Set plsFile to lsFile
71217>>>>>            End
71217>>>>>>
71217>>>>>        End
71217>>>>>>
71217>>>>>        Else Begin
71218>>>>>            Send warning_box FS_FILEHANDLEMISSING
71219>>>>>        End
71219>>>>>>
71219>>>>>        Set pbError to (not(bOk))
71220>>>>>    End_Procedure
71221>>>>>
71221>>>>>    // Returns -1 if an error occured.
71221>>>>>    Function BinaryFileCachedPosition Integer iFileNumber Returns BigInt
71223>>>>>        BigInt biPosition
71223>>>>>        structFileBufferPointer[] lsFileBufferPointer
71223>>>>>        structFileBufferPointer[] lsFileBufferPointer
71224>>>>>        Handle hFileHandle
71224>>>>>        Move -1 to biPosition
71225>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71226>>>>>        If hFileHandle Begin
71228>>>>>            Get plsCachedPointer to lsFileBufferPointer
71229>>>>>            If (iFilenumber < SizeOfArray(lsFileBufferPointer)) Begin
71231>>>>>                If (lsFileBufferPointer[iFileNumber].iBufferSize > 0) Begin
71233>>>>>                    Move (lsFileBufferPointer[iFileNumber].biFromFilePosition + lsFileBufferPointer[iFileNumber].iBufferPointer - 1) to biPosition
71234>>>>>                End
71234>>>>>>
71234>>>>>                Else Begin
71235>>>>>                    Get BinaryFilePosition iFileNumber to biPosition
71236>>>>>                End
71236>>>>>>
71236>>>>>            End
71236>>>>>>
71236>>>>>            Else Begin
71237>>>>>                Get BinaryFilePosition iFileNumber to biPosition
71238>>>>>            End
71238>>>>>>
71238>>>>>        End
71238>>>>>>
71238>>>>>        Else Begin
71239>>>>>            Send Warning_Box FS_FILEHANDLEMISSING
71240>>>>>        End
71240>>>>>>
71240>>>>>        Function_Return biPosition
71241>>>>>    End_Function
71242>>>>>
71242>>>>>    // Sets the pointer For the current file cache.
71242>>>>>    Procedure Set BinaryFileChachedPosition Integer iFileNumber BigInt biNewPosition
71244>>>>>        Handle hFileHandle
71244>>>>>        structFileBufferPointer[] lsFileBufferPointer
71244>>>>>        structFileBufferPointer[] lsFileBufferPointer
71245>>>>>        String[] saCachedBuffer
71246>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71247>>>>>        If hFileHandle Begin
71249>>>>>            Get plsCachedPointer to lsFileBufferPointer
71250>>>>>            If (lsFileBufferPointer[iFileNumber].biFromFilePosition > biNewPosition) Begin
71252>>>>>                Move 1 to lsFileBufferPointer[iFileNumber].iBufferPointer
71253>>>>>                Move 0 to lsFileBufferPointer[iFileNumber].iBufferSize
71254>>>>>                Set plsCachedPointer to lsFileBufferPointer
71255>>>>>                Set BinaryFilePosition iFileNumber to biNewPosition
71256>>>>>                Get psaCachedBuffer to saCachedBuffer
71257>>>>>                Move "" to saCachedBuffer[iFileNumber]
71258>>>>>                Set psaCachedBuffer to saCachedBuffer
71259>>>>>            End
71259>>>>>>
71259>>>>>            Else If ((lsFileBufferPointer[iFileNumber].biFromFilePosition + lsFileBufferPointer[iFileNumber].iBufferSize) < biNewPosition) Begin
71262>>>>>                Move 1 to lsFileBufferPointer[iFileNumber].iBufferPointer
71263>>>>>                Move 0 to lsFileBufferPointer[iFileNumber].iBufferSize
71264>>>>>                Set plsCachedPointer to lsFileBufferPointer
71265>>>>>                Set BinaryFilePosition iFileNumber to biNewPosition
71266>>>>>                Get psaCachedBuffer to saCachedBuffer
71267>>>>>                Move "" to saCachedBuffer[iFileNumber]
71268>>>>>                Set psaCachedBuffer to saCachedBuffer
71269>>>>>            End
71269>>>>>>
71269>>>>>            Else Begin
71270>>>>>                Move (biNewPosition - lsFileBufferPointer[iFileNumber].biFromFilePosition + 1) to lsFileBufferPointer[iFileNumber].iBufferPointer
71271>>>>>                Set plsCachedPointer to lsFileBufferPointer
71272>>>>>            End
71272>>>>>>
71272>>>>>        End
71272>>>>>>
71272>>>>>        Else Begin
71273>>>>>            Send warning_box FS_FILEHANDLEMISSING
71274>>>>>        End
71274>>>>>>
71274>>>>>    End_Procedure
71275>>>>>
71275>>>>>    // Truncate or extend a binary file to the specified file position
71275>>>>>    // by setting the binary file End Of File position.
71275>>>>>    // If biPosition is -1 the current file position is used as EOF position.
71275>>>>>    Procedure Set BinaryFileEndOfFile Integer iFilenumber BigInt biPosition
71277>>>>>        Handle hFileHandle
71277>>>>>        Boolean bError bOk
71277>>>>>        Integer iErrorNumber
71277>>>>>        structFile[] lsFile
71277>>>>>        structFile[] lsFile
71278>>>>>        Set pbError to False
71279>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71280>>>>>        If hFileHandle Begin
71282>>>>>            If (biPosition > -1) Begin
71284>>>>>                Set BinaryFilePosition iFilenumber to biPosition
71285>>>>>            End
71285>>>>>>
71285>>>>>            Get pbError to bError
71286>>>>>            If (bError = False) Begin
71288>>>>>                Move (fsSetEndOfFile(hFileHandle)) to bOk
71289>>>>>                If (bOk = False) Begin
71291>>>>>                    Move (fsGetLastError()) to iErrorNumber
71292>>>>>                    If iErrorNumber Begin
71294>>>>>                        Send DoShowError iErrorNumber (FileErrorText(Self, iFilenumber))
71295>>>>>                    End
71295>>>>>>
71295>>>>>                End
71295>>>>>>
71295>>>>>                Else Begin
71296>>>>>                    Get plsFile to lsFile
71297>>>>>                    Move True to lsFile[iFilenumber].bEndOfFile
71298>>>>>                    Set plsFile to lsFile
71299>>>>>                    Set pbEOF to True
71300>>>>>                End
71300>>>>>>
71300>>>>>            End
71300>>>>>>
71300>>>>>        End
71300>>>>>>
71300>>>>>        Else Begin
71301>>>>>            Send warning_box FS_FILEHANDLEMISSING
71302>>>>>        End
71302>>>>>>
71302>>>>>        Set pbError to (not(bOk))
71303>>>>>    End_Procedure
71304>>>>>
71304>>>>>    // Returns true if the last read from the binary file had reached the end.
71304>>>>>    Function BinaryFileEndOfFile Integer iFilenumber Returns Boolean
71306>>>>>        structFile[] lsFile
71306>>>>>        structFile[] lsFile
71307>>>>>        Handle hFileHandle
71307>>>>>        Boolean bEndOfFile
71307>>>>>        Move True to bEndOfFile
71308>>>>>        Set pbError to False
71309>>>>>        Get BinaryFileHandle iFilenumber to hFileHandle
71310>>>>>        If hFileHandle Begin
71312>>>>>            Get plsFile to lsFile
71313>>>>>            Move lsFile[iFilenumber].bEndOfFile to bEndOfFile
71314>>>>>        End
71314>>>>>>
71314>>>>>        Else Begin
71315>>>>>            Send warning_box FS_FILEHANDLEMISSING
71316>>>>>        End
71316>>>>>>
71316>>>>>        Function_Return bEndOfFile
71317>>>>>    End_Function
71318>>>>>
71318>>>>>    // Returns the filehandle from the filenumber.
71318>>>>>    // Returns 0 if the filenumber is not used.
71318>>>>>    Function BinaryFileHandle Integer iFilenumber Returns Handle
71320>>>>>        Handle hFileHandle
71320>>>>>        structFile[] lsFile
71320>>>>>        structFile[] lsFile
71321>>>>>        Get plsFile to lsFile
71322>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
71324>>>>>            Move lsFile[iFilenumber].hFilehandle to hFileHandle
71325>>>>>        End
71325>>>>>>
71325>>>>>        Function_Return hFileHandle
71326>>>>>    End_Function
71327>>>>>
71327>>>>>    // Searches For a file
71327>>>>>    // iMode = DIRMODE_FILES_ONLY (default)
71327>>>>>    // iMode = DIRMODE_DIRECTORIES_ONLY
71327>>>>>    // iMode = DIRMODE_FILES_AND_DIRECTORIES
71327>>>>>    // Returns True if found
71327>>>>>    Function FileExists String sFilePathMask Integer iFileDirMode Returns Boolean
71329>>>>>        Integer iMode
71329>>>>>        Boolean bFound
71329>>>>>        tsSearchResult[] lsResult
71329>>>>>        tsSearchResult[] lsResult
71330>>>>>        Move False to bFound
71331>>>>>        Set pbError to False
71332>>>>>        If (num_arguments < 2) Begin
71334>>>>>            Move DIRMODE_FILES_ONLY to iMode
71335>>>>>        End
71335>>>>>>
71335>>>>>        Else Begin
71336>>>>>            Move iFileDirMode to iMode
71337>>>>>        End
71337>>>>>>
71337>>>>>        Get FileSearch sFilePathMask iMode True to lsResult
71338>>>>>        If (SizeOfArray(lsResult) > 0) Begin
71340>>>>>            Move True to bFound
71341>>>>>        End
71341>>>>>>
71341>>>>>        Function_Return bFound
71342>>>>>    End_Function
71343>>>>>
71343>>>>>    // Deletes a file.
71343>>>>>    // Returns True if succeeds.
71343>>>>>    Function FileDelete String sFilename Integer iRetryAttempts Returns Boolean
71345>>>>>        Boolean bFound bDeleted
71345>>>>>        Integer iErrorNumber iRetryLeft
71345>>>>>
71345>>>>>        Set pbError to False
71346>>>>>        If (num_arguments > 1) Begin
71348>>>>>            Move iRetryAttempts to iRetryLeft
71349>>>>>        End
71349>>>>>>
71349>>>>>        Else Begin
71350>>>>>            Move 0 to iRetryLeft
71351>>>>>        End
71351>>>>>>
71351>>>>>        Get FileExists sFilename to bFound
71352>>>>>        If bFound Begin
71354>>>>>            Repeat
71354>>>>>>
71354>>>>>                Move (sFilename+(Character(0))) to sFilename
71355>>>>>                Move (fsDeleteFile(sFilename)) to bDeleted
71356>>>>>                If (bDeleted = False) Begin
71358>>>>>                    Decrement iRetryLeft
71359>>>>>                    If (iRetryLeft <= 0) Begin
71361>>>>>                        Move (fsGetLastError()) to iErrorNumber
71362>>>>>                        If iErrorNumber Begin
71364>>>>>                            Send DoShowError iErrorNumber ("Tried to delete file: "+sFilename)
71365>>>>>                        End
71365>>>>>>
71365>>>>>                    End
71365>>>>>>
71365>>>>>                    Else Begin
71366>>>>>                        Sleep 1
71367>>>>>                    End
71367>>>>>>
71367>>>>>                End
71367>>>>>>
71367>>>>>            Until (bDeleted = True or iRetryLeft <= 0)
71369>>>>>        End
71369>>>>>>
71369>>>>>        Function_Return bDeleted
71370>>>>>    End_Function
71371>>>>>
71371>>>>>    // Moves a file or directory.
71371>>>>>    // Returns True if succeeds.
71371>>>>>    Function FileMove String sExistingFileName String sNewFileName Integer iRetryAttempts Returns Boolean
71373>>>>>        Boolean bMoved
71373>>>>>        Integer iErrorNumber iRetryLeft
71373>>>>>
71373>>>>>        Set pbError to False
71374>>>>>        If (num_arguments > 2) Begin
71376>>>>>            Move iRetryAttempts to iRetryLeft
71377>>>>>        End
71377>>>>>>
71377>>>>>        Else Begin
71378>>>>>            Move 0 to iRetryLeft
71379>>>>>        End
71379>>>>>>
71379>>>>>        Move (sExistingFilename+(Character(0))) to sExistingFilename
71380>>>>>        Move (sNewFileName+(Character(0)))      to sNewFileName
71381>>>>>        Repeat
71381>>>>>>
71381>>>>>            Move (fsMoveFile(sExistingFilename, sNewFileName)) to bMoved
71382>>>>>            If (bMoved = False) Begin
71384>>>>>                Decrement iRetryLeft
71385>>>>>                If (iRetryLeft <= 0) Begin
71387>>>>>                    Move (fsGetLastError()) to iErrorNumber
71388>>>>>                    If iErrorNumber Begin
71390>>>>>                        Send DoShowError iErrorNumber ("Tried to move/rename file: "+sExistingFileName+" to "+sNewFileName)
71391>>>>>                    End
71391>>>>>>
71391>>>>>                End
71391>>>>>>
71391>>>>>                Else Begin
71392>>>>>                    Sleep 1
71393>>>>>                End
71393>>>>>>
71393>>>>>            End
71393>>>>>>
71393>>>>>        Until (bMoved = True or iRetryLeft <= 0)
71395>>>>>        Function_Return bMoved
71396>>>>>    End_Function
71397>>>>>
71397>>>>>    // Copies a file. Overwriting an existing file by default.
71397>>>>>    // Returns True if succeeds.
71397>>>>>    Function FileCopy String sExistingFileName String sNewFileName Boolean bFailIfExists Integer iRetryAttempts Returns Boolean
71399>>>>>        Boolean bCopied
71399>>>>>        Boolean bDoNotOverwrite
71399>>>>>        Integer iErrorNumber iRetryLeft
71399>>>>>        Set pbError to False
71400>>>>>        Move (sExistingFileName+(Character(0))) to sExistingFileName
71401>>>>>        Move (sNewFileName+(Character(0)))      to sNewFileName
71402>>>>>        If (Num_Arguments > 2) Begin
71404>>>>>            Move bFailIfExists to bDoNotOverwrite
71405>>>>>        End
71405>>>>>>
71405>>>>>        Else Begin
71406>>>>>            Move False to bDoNotOverwrite
71407>>>>>        End
71407>>>>>>
71407>>>>>        If (num_arguments > 3) Begin
71409>>>>>            Move iRetryAttempts to iRetryLeft
71410>>>>>        End
71410>>>>>>
71410>>>>>        Else Begin
71411>>>>>            Move 0 to iRetryLeft
71412>>>>>        End
71412>>>>>>
71412>>>>>        Repeat
71412>>>>>>
71412>>>>>            Move (fsCopyFile(sExistingFileName, sNewFileName, bDoNotOverwrite)) to bCopied
71413>>>>>            If (bCopied = False) Begin
71415>>>>>                Decrement iRetryLeft
71416>>>>>                If (iRetryLeft <= 0) Begin
71418>>>>>                    Move (fsGetLastError()) to iErrorNumber
71419>>>>>                    If iErrorNumber Begin
71421>>>>>                        Send DoShowError iErrorNumber ("Tried to copy file: "+sExistingFileName+" to "+sNewFileName)
71422>>>>>                    End
71422>>>>>>
71422>>>>>                End
71422>>>>>>
71422>>>>>                Else Begin
71423>>>>>                    Sleep 1
71424>>>>>                End
71424>>>>>>
71424>>>>>            End
71424>>>>>>
71424>>>>>        Until (bCopied = True or iRetryLeft <= 0)
71426>>>>>        Function_Return bCopied
71427>>>>>    End_Function
71428>>>>>
71428>>>>>    // Renames a file or directory.
71428>>>>>    // Returns True if succeeds.
71428>>>>>    Function FileRename String sExistingFileName String sNewFileName Integer iRetryAttempts Returns Boolean
71430>>>>>        Boolean bRenamed
71430>>>>>        If (num_arguments > 2) Begin
71432>>>>>            Get FileMove sExistingFileName sNewFileName iRetryAttempts to bRenamed
71433>>>>>        End
71433>>>>>>
71433>>>>>        Else Begin
71434>>>>>            Get FileMove sExistingFileName sNewFileName to bRenamed
71435>>>>>        End
71435>>>>>>
71435>>>>>        Function_Return bRenamed
71436>>>>>    End_Function
71437>>>>>
71437>>>>>    // Returns the file size of a file.
71437>>>>>    // Returns -1 if an error occured.
71437>>>>>    // Use *this* instead of FileSize as it works for both 32 bit as well as 64 bit and can
71437>>>>>    // always return filesizes over 2GB.
71437>>>>>    Function FileSizeEx String sFilename Returns Bigint
71439>>>>>        tsSearchResult[] lsSearchResult
71439>>>>>        tsSearchResult[] lsSearchResult
71440>>>>>        BigInt iRetval
71440>>>>>        Get FileSearch sFilename DIRMODE_FILES_ONLY to lsSearchResult
71441>>>>>        If (SizeOfArray(lsSearchResult) > 0) Begin
71443>>>>>            Move lsSearchResult[0].biFileSize to iRetval
71444>>>>>        End
71444>>>>>>
71444>>>>>        Else Begin
71445>>>>>            Move -1 to iRetval
71446>>>>>        End
71446>>>>>>
71446>>>>>        Function_Return iRetval
71447>>>>>    End_Function
71448>>>>>
71448>>>>>//
71448>>>>>// Check your source code to see if it uses the filesize function and if it does, change it to FileSizeEx
71448>>>>>// Once you verified that you are no longer using filesize, then add the following line to your code.
71448>>>>>//
71448>>>>>// // Source is not using obsolete filesize function
71448>>>>>// Define no_cFileSystem_filesize_here
71448>>>>>//
71448>>>>>// and the warning is resolved.
71448>>>>>    // Returns the file size of a file.
71448>>>>>    // Returns -1 if an error occured.
71448>>>>>    // ** Don't USE THIS, but FileSizeEx above as this only works correctly for 64 bit.
71448>>>>>    Function FileSize String sFilename Returns Longptr
71450>>>>>      BigInt biSize
71450>>>>>//      #Warning 12234 "FileSize is now obsolete, check your code and set no_cFileSystem_filesize_here compiler directive to remove"
71450>>>>>      Get FileSizeEx sFilename to biSize
71451>>>>>      Function_Return biSize
71452>>>>>    End_Function
71453>>>>>
71453>>>>>    // Returns the last write date of a file.
71453>>>>>    // Returns 0 if an error occured.
71453>>>>>    Function FileDate String sFilename Returns Date
71455>>>>>        tsSearchResult[] lsSearchResult
71455>>>>>        tsSearchResult[] lsSearchResult
71456>>>>>        Date dDate
71456>>>>>        Move 0 to dDate
71457>>>>>        Get FileSearch sFilename DIRMODE_FILES_ONLY to lsSearchResult
71458>>>>>        If (SizeOfArray(lsSearchResult) > 0) Begin
71460>>>>>            Move lsSearchResult[0].dtLastWriteDateTime to dDate
71461>>>>>        End
71461>>>>>>
71461>>>>>        Function_Return dDate
71462>>>>>    End_Function
71463>>>>>
71463>>>>>    // Returns the fileversion info.
71463>>>>>    // Returns false if an error occured.
71463>>>>>    Function FileVersion String sFilename tsFileVersionInfo ByRef lsFileVersionInfo Returns Boolean
71465>>>>>        Boolean bOk
71465>>>>>        Integer iErrorNumber iStatus
71465>>>>>        Get _FileVersion sFilename (&lsFileVersionInfo) to iStatus
71466>>>>>        If (iStatus = -1) Begin
71468>>>>>            Move (fsGetLastError()) to iErrorNumber
71469>>>>>            If iErrorNumber Begin
71471>>>>>                Send DoShowError iErrorNumber ("Tried to get fileversion info from file: "+sFilename)
71472>>>>>            End
71472>>>>>>
71472>>>>>        End
71472>>>>>>
71472>>>>>        Move (iStatus = 0) to bOk
71473>>>>>        Function_Return bOk
71474>>>>>    End_Function
71475>>>>>
71475>>>>>    Function _FileVersion String sFilename tsFileVersionInfo ByRef lsFileVersionInfo Returns Integer
71477>>>>>        tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
71477>>>>>        tsVS_FIXEDFILEINFO lsFIXEDFILEINFO
71477>>>>>        UInteger iBytesNeeded
71477>>>>>        Address aBuffer
71477>>>>>        Boolean bOk
71477>>>>>        String sSubBlock
71477>>>>>        DWord dwBufferLen dwBufferPointer
71477>>>>>        tsLandAndCodePage lsLandAndCodePage
71477>>>>>        tsLandAndCodePage lsLandAndCodePage
71477>>>>>        Move (sFilename + (Character(0))) to sFilename
71478>>>>>        Move 0 to iBytesNeeded
71479>>>>>        Move 0 to aBuffer
71480>>>>>        Move 0 to lsFIXEDFILEINFO.dwStrucVersion    // Initialize the variable.
71481>>>>>        Move 0 to lsLandAndCodePage.wCodePage
71482>>>>>        Move (fsGetFileVersionInfoSize(sFilename, 0)) to iBytesNeeded
71483>>>>>        If (iBytesNeeded = 0) Begin
71485>>>>>            Function_Return False
71486>>>>>        End
71486>>>>>>
71486>>>>>        Move False to bOk
71487>>>>>        Move (Alloc(iBytesNeeded)) to aBuffer
71488>>>>>        Move (MemSet(aBuffer, 0, iBytesNeeded)) to bOk
71489>>>>>        Move (fsGetFileVersionInfo(sFilename, 0, iBytesNeeded, aBuffer)) to bOk
71490>>>>>        If (not(bOk)) Begin
71492>>>>>            Move (Free(aBuffer)) to bOk
71493>>>>>            Function_Return -1
71494>>>>>        End
71494>>>>>>
71494>>>>>        Move "\" to sSubBlock
71495>>>>>        Move (sSubBlock + (Character(0))) to sSubBlock
71496>>>>>        Move 0 to dwBufferLen
71497>>>>>        Move 0 to dwBufferPointer
71498>>>>>        Move (fsVerQueryValue(aBuffer, sSubBlock, AddressOf(dwBufferPointer), AddressOf(dwBufferLen))) to bOk
71499>>>>>        If (not(bOk)) Begin
71501>>>>>            Move (Free(aBuffer)) to bOk
71502>>>>>            Function_Return -1
71503>>>>>        End
71503>>>>>>
71503>>>>>        If (dwBufferLen <> 52) Begin
71505>>>>>            Send warning_box (SFormat("Length of bufferdata For VS_FIXEDFILEINFO struct are not in the expected size.\nLength is %1 and should have been 52.", dwBufferLen))
71506>>>>>            Move (Free(aBuffer)) to bOk
71507>>>>>            Function_Return -2
71508>>>>>        End
71508>>>>>>
71508>>>>>        Move (MemCopy(AddressOf(lsFIXEDFILEINFO), dwBufferPointer, dwBufferLen)) to bOk
71509>>>>>        If (not(bOk)) Begin
71511>>>>>            Move (Free(aBuffer)) to bOk
71512>>>>>            Function_Return -1
71513>>>>>        End
71513>>>>>>
71513>>>>>        Move lsFIXEDFILEINFO to lsFileVersionInfo.lsFIXEDFILEINFO
71514>>>>>        Get ConvertFileTimeToLocalDateTime lsFIXEDFILEINFO.ubiFileDate to lsFileVersionInfo.dtCreationDateTime
71515>>>>>        Move (Hi(lsFIXEDFILEINFO.dwFileVersionMS)) to lsFileVersionInfo.siFileVersion[0]
71516>>>>>        Move (Low(lsFIXEDFILEINFO.dwFileVersionMS)) to lsFileVersionInfo.siFileVersion[1]
71517>>>>>        Move (Hi(lsFIXEDFILEINFO.dwFileVersionLS)) to lsFileVersionInfo.siFileVersion[2]
71518>>>>>        Move (Low(lsFIXEDFILEINFO.dwFileVersionLS)) to lsFileVersionInfo.siFileVersion[3]
71519>>>>>        Move (Hi(lsFIXEDFILEINFO.dwProductVersionMS)) to lsFileVersionInfo.siProductVersion[0]
71520>>>>>        Move (Low(lsFIXEDFILEINFO.dwProductVersionMS)) to lsFileVersionInfo.siProductVersion[1]
71521>>>>>        Move (Hi(lsFIXEDFILEINFO.dwProductVersionLS)) to lsFileVersionInfo.siProductVersion[2]
71522>>>>>        Move (Low(lsFIXEDFILEINFO.dwProductVersionLS)) to lsFileVersionInfo.siProductVersion[3]
71523>>>>>        Move "\VarFileInfo\Translation" to sSubBlock
71524>>>>>        Move (sSubBlock + (Character(0))) to sSubBlock
71525>>>>>        Move 0 to dwBufferLen
71526>>>>>        Move 0 to dwBufferPointer
71527>>>>>        Move (fsVerQueryValue(aBuffer, sSubBlock, AddressOf(dwBufferPointer), AddressOf(dwBufferLen))) to bOk
71528>>>>>        If (not(bOk)) Begin
71530>>>>>            Move (Free(aBuffer)) to bOk
71531>>>>>            Function_Return -1
71532>>>>>        End
71532>>>>>>
71532>>>>>        If (dwBufferLen <> 4) Begin
71534>>>>>            Send warning_box (SFormat("Length of bufferdata For land and codepage numbers are not in the expected size.\nLength is %1 and should have been 4.", dwBufferLen))
71535>>>>>            Move (Free(aBuffer)) to bOk
71536>>>>>            Function_Return -2
71537>>>>>        End
71537>>>>>>
71537>>>>>        Move (MemCopy(AddressOf(lsLandAndCodePage), dwBufferPointer, dwBufferLen)) to bOk
71538>>>>>        Get VerQueryValueStringFileInfo aBuffer "Comments" lsLandAndCodePage to lsFileVersionInfo.sComments
71539>>>>>        Get VerQueryValueStringFileInfo aBuffer "CompanyName" lsLandAndCodePage to lsFileVersionInfo.sCompanyName
71540>>>>>        Get VerQueryValueStringFileInfo aBuffer "FileDescription" lsLandAndCodePage to lsFileVersionInfo.sFileDescription
71541>>>>>        Get VerQueryValueStringFileInfo aBuffer "FileVersion" lsLandAndCodePage to lsFileVersionInfo.sFileVersion
71542>>>>>        Get VerQueryValueStringFileInfo aBuffer "InternalName" lsLandAndCodePage to lsFileVersionInfo.sInternalName
71543>>>>>        Get VerQueryValueStringFileInfo aBuffer "LegalCopyright" lsLandAndCodePage to lsFileVersionInfo.sLegalCopyright
71544>>>>>        Get VerQueryValueStringFileInfo aBuffer "LegalTrademarks" lsLandAndCodePage to lsFileVersionInfo.sLegalTrademarks
71545>>>>>        Get VerQueryValueStringFileInfo aBuffer "OriginalFilename" lsLandAndCodePage to lsFileVersionInfo.sOriginalFilename
71546>>>>>        Get VerQueryValueStringFileInfo aBuffer "ProductName" lsLandAndCodePage to lsFileVersionInfo.sProductName
71547>>>>>        Get VerQueryValueStringFileInfo aBuffer "ProductVersion" lsLandAndCodePage to lsFileVersionInfo.sProductVersion
71548>>>>>        Get VerQueryValueStringFileInfo aBuffer "PrivateBuild" lsLandAndCodePage to lsFileVersionInfo.sPrivateBuild
71549>>>>>        Get VerQueryValueStringFileInfo aBuffer "SpecialBuild" lsLandAndCodePage to lsFileVersionInfo.sSpecialBuild
71550>>>>>        Move (Free(aBuffer)) to bOk
71551>>>>>        Function_Return 0
71552>>>>>    End_Function
71553>>>>>
71553>>>>>    // Convert an short integer to a 4-character hex string.
71553>>>>>    Function ShortToHex Short siValue Returns String
71555>>>>>        String sHex
71555>>>>>        Move "" to sHex
71556>>>>>        Repeat
71556>>>>>>
71556>>>>>            Move (Mid ("0123456789ABCDEF", 1, ((siValue iand |CI$0F) + 1)) + sHex) to sHex
71557>>>>>            Move (siValue / |CI$10) to siValue
71558>>>>>        Until (siValue = 0)
71560>>>>>        Move (Right("0000" + sHex, 4)) to sHex
71561>>>>>        Function_Return sHex
71562>>>>>    End_Function
71563>>>>>
71563>>>>>    Function VerQueryValueStringFileInfo Address aBuffer String sInfoName tsLandAndCodePage lsLandAndCodePage Returns String
71565>>>>>        String sSubBlock
71565>>>>>        String sValue
71565>>>>>        DWord dwBufferLen dwBufferPointer
71565>>>>>        Boolean bOk
71565>>>>>        WString wValue
71565>>>>>        Move (SFormat("\StringFileInfo\%1%2\%3", ShortToHex(Self, lsLandAndCodePage.wLanguage), ShortToHex(Self, lsLandAndCodePage.wCodePage), sInfoName)) to sSubBlock
71566>>>>>        Move (sSubBlock + (Character(0))) to sSubBlock
71567>>>>>        Move 0 to dwBufferLen
71568>>>>>        Move 0 to dwBufferPointer
71569>>>>>        Move (fsVerQueryValue(aBuffer, sSubBlock, AddressOf(dwBufferPointer), AddressOf(dwBufferLen))) to bOk
71570>>>>>        If (not(bOk)) Begin
71572>>>>>            Function_Return ""
71573>>>>>        End
71573>>>>>>
71573>>>>>        Move (ZeroString(dwBufferLen)) to wValue  // size is in bytes, so we are reserving too much space
71574>>>>>        Move (MemCopy(AddressOf(wValue), dwBufferPointer, dwBufferLen)) to bOk  // memcopy copies the correct amount though
71575>>>>>        Move (CString(wValue)) To sValue
71576>>>>>        Function_Return sValue
71577>>>>>    End_Function
71578>>>>>
71578>>>>>    // Returns the file extention without the leading "."
71578>>>>>    // Example sFile = "x:\text.txt". The function returns "txt".
71578>>>>>    Function FileExtention String sFilename Returns String
71580>>>>>        String sExtention
71580>>>>>        Integer iPos
71580>>>>>        Move (RightPos(".", sFilename)) to iPos
71581>>>>>        If (iPos > 0) Begin
71583>>>>>            Move (Right(sFilename, (Length(sFilename) - iPos))) to sExtention
71584>>>>>            If (sExtention contains "\" or sExtention contains " ") Begin
71586>>>>>                Move "" to sExtention
71587>>>>>            End
71587>>>>>>
71587>>>>>        End
71587>>>>>>
71587>>>>>        Function_Return sExtention
71588>>>>>    End_Function
71589>>>>>
71589>>>>>    // Gets a handle to an icon stored as a resource in a file or an icon
71589>>>>>    // stored in a file's associated executable file.
71589>>>>>    // When the icon handle is no longer needed, close it by using the DestroyFileIcon procedure.
71589>>>>>    Function FileIcon String sFilename Returns Handle
71591>>>>>        Handle hIcon
71591>>>>>        Integer iIcon
71591>>>>>        Address aFilename
71591>>>>>        WString wFileName
71591>>>>>        Move (Pad(sFilename, MAX_PATH)) to wFilename
71592>>>>>        Move (AddressOf(wFileName)) To aFileName
71593>>>>>        Move 0 to iIcon
71594>>>>>        Move (fsExtractAssociatedIcon(0, aFilename, AddressOf(iIcon))) to hIcon
71595>>>>>        Function_Return hIcon
71596>>>>>    End_Function
71597>>>>>
71597>>>>>    // Destroy hIcon, created from FileIcon.
71597>>>>>    Procedure DestroyFileIcon Handle hIcon
71599>>>>>        Integer iResult
71599>>>>>        If (hIcon <> 0) Begin
71601>>>>>            Move (fsDestroyIcon(hIcon)) to iResult
71602>>>>>        End
71602>>>>>>
71602>>>>>    End_Procedure
71603>>>>>
71603>>>>>    // Search a directory For the files with normal windows mask-signs
71603>>>>>    // Returns an array of matching files and directories
71603>>>>>    // iMode = DIRMODE_FILES_ONLY
71603>>>>>    // iMode = DIRMODE_DIRECTORIES_ONLY
71603>>>>>    // iMode = DIRMODE_FILES_AND_DIRECTORIES (default)
71603>>>>>    // If bReturnOnlyOne is true only one search result item is returned.
71603>>>>>    // If bReturnOnlyOne is true and no items where found no error is shown.
71603>>>>>    Function FileSearch String sFilePathMask Integer iFileDirMode Boolean bReturnOnlyOne Returns tsSearchResult[]
71605>>>>>        tsSearchResult[] lsSearchResult
71605>>>>>        tsSearchResult[] lsSearchResult
71606>>>>>        Integer iSearchResultCount iMode iErrorNumber
71606>>>>>        structWFD lsFindData
71606>>>>>        structWFD lsFindData
71606>>>>>        Handle hFindFile
71606>>>>>        Boolean bError bStop bFound bOk bOnlyOne
71606>>>>>        BigInt biBigHi
71606>>>>>        Address aFileName
71606>>>>>
71606>>>>>        If (num_arguments < 2) Begin
71608>>>>>            Move DIRMODE_FILES_AND_DIRECTORIES to iMode
71609>>>>>        End
71609>>>>>>
71609>>>>>        Else Begin
71610>>>>>            Move iFileDirMode to iMode
71611>>>>>        End
71611>>>>>>
71611>>>>>        If (num_arguments < 3) Begin
71613>>>>>            Move False to bOnlyOne
71614>>>>>        End
71614>>>>>>
71614>>>>>        Else Begin
71615>>>>>            Move bReturnOnlyOne to bOnlyOne
71616>>>>>        End
71616>>>>>>
71616>>>>>        Move (sFilePathMask+Character(0)) To sFilePathMask
71617>>>>>        Move 0 To lsFindData.dwFileAttributes   // Initialize lsFindData
71618>>>>>        Move (fsFindFirstFile(sFilePathMask, AddressOf(lsFindData))) to hFindFile
71619>>>>>        If (hFindFile <> INVALID_HANDLE_VALUE) Begin
71621>>>>>            Move False to bError
71622>>>>>            Move False to bStop
71623>>>>>            Move (2^32) to biBigHi
71624>>>>>            Set pbError to bError
71625>>>>>            While (bError = False and bStop = False)
71629>>>>>                Move False to bFound
71630>>>>>                Case Begin
71630>>>>>                    Case (iMode = DIRMODE_FILES_ONLY)
71632>>>>>                        If (lsFindData.dwFileAttributes iand FILE_ATTRIBUTE_DIRECTORY = 0) Begin
71634>>>>>                            Move True to bFound
71635>>>>>                        End
71635>>>>>>
71635>>>>>                        Case Break
71636>>>>>                    Case (iMode = DIRMODE_DIRECTORIES_ONLY)
71639>>>>>                        If (lsFindData.dwFileAttributes iand FILE_ATTRIBUTE_DIRECTORY = FILE_ATTRIBUTE_DIRECTORY) Begin
71641>>>>>                            Move True to bFound
71642>>>>>                        End
71642>>>>>>
71642>>>>>                        Case Break
71643>>>>>                    Case Else
71643>>>>>                        Move True to bFound
71644>>>>>                        Case Break
71645>>>>>                Case End
71645>>>>>                If bFound Begin
71647>>>>>                    Move (AddressOf(lsFindData.cFileName)) to aFilename
71648>>>>>                    Move (PointerToWString(aFilename)) to lsSearchResult[iSearchResultCount].sFilename
71649>>>>>                    Move (AddressOf(lsFindData.cAlternateFileName)) to aFilename
71650>>>>>                    Move (PointerToWString(aFilename)) to lsSearchResult[iSearchResultCount].sAlternateFileName
71651>>>>>                    Move lsFindData.dwFileAttributes to lsSearchResult[iSearchResultCount].iFileAttributes
71652>>>>>                    Get ConvertFileTimeToLocalDateTime lsFindData.ftCreationDateTime to lsSearchResult[iSearchResultCount].dtCreationDateTime
71653>>>>>                    Get ConvertFileTimeToLocalDateTime lsFindData.ftLastAccessDateTime to lsSearchResult[iSearchResultCount].dtLastAccessDateTime
71654>>>>>                    Get ConvertFileTimeToLocalDateTime lsFindData.ftLastWriteDateTime to lsSearchResult[iSearchResultCount].dtLastWriteDateTime
71655>>>>>                    Move ((lsFindData.nFileSizeHigh * biBigHi) + lsFindData.nFileSizeLow) to lsSearchResult[iSearchResultCount].biFileSize
71656>>>>>                    Increment iSearchResultCount
71657>>>>>                    If bOnlyOne Begin
71659>>>>>                        Move True to bStop
71660>>>>>                    End
71660>>>>>>
71660>>>>>                End
71660>>>>>>
71660>>>>>                If (bStop = False) Begin
71662>>>>>                    Move (fsFindNextFile(hFindFile, AddressOf(lsFindData))) to bOk
71663>>>>>                End
71663>>>>>>
71663>>>>>                If (bOk = False) Begin
71665>>>>>                    Move True to bStop
71666>>>>>                    If (bOnlyOne = False) Begin
71668>>>>>                        Move (fsGetLastError()) to iErrorNumber
71669>>>>>                        If (iErrorNumber <> ERROR_NO_MORE_FILES and iErrorNumber <> ERROR_MOD_NOT_FOUND and iErrorNumber <> 0) Begin
71671>>>>>                            Send DoShowError iErrorNumber ("Search path: "+sFilePathMask)
71672>>>>>                        End
71672>>>>>>
71672>>>>>                    End
71672>>>>>>
71672>>>>>                End
71672>>>>>>
71672>>>>>                Get pbError to bError
71673>>>>>            Loop
71674>>>>>>
71674>>>>>            Move (fsFindClose(hFindFile)) to bOk
71675>>>>>        End
71675>>>>>>
71675>>>>>        Function_Return lsSearchResult
71676>>>>>    End_Function
71677>>>>>
71677>>>>>    // Search a directory and all subdirectories For the files with normal windows mask-signs.
71677>>>>>    // lsResult[?].sFileName contains full path and filename.
71677>>>>>    // iMode = DIRMODE_FILES_ONLY
71677>>>>>    // iMode = DIRMODE_DIRECTORIES_ONLY
71677>>>>>    // iMode = DIRMODE_FILES_AND_DIRECTORIES (default)
71677>>>>>    Function FileSearchRecursive String sFilePathMask Integer iFileDirMode Boolean bReturnOnlyOne Returns tsSearchResult[]
71679>>>>>        Integer iMode
71679>>>>>        Boolean bOnlyOne
71679>>>>>        tsSearchResult[] lsFinalResult lsSearchResult
71679>>>>>        tsSearchResult[] lsFinalResult lsSearchResult
71681>>>>>        If (num_arguments < 2) Begin
71683>>>>>            Move DIRMODE_FILES_AND_DIRECTORIES to iMode
71684>>>>>        End
71684>>>>>>
71684>>>>>        Else Begin
71685>>>>>            Move iFileDirMode to iMode
71686>>>>>        End
71686>>>>>>
71686>>>>>        If (num_arguments < 3) Begin
71688>>>>>            Move False to bOnlyOne
71689>>>>>        End
71689>>>>>>
71689>>>>>        Else Begin
71690>>>>>            Move bReturnOnlyOne to bOnlyOne
71691>>>>>        End
71691>>>>>>
71691>>>>>        Get FileSearchRecursivePriv sFilePathMask iMode bOnlyOne (&lsFinalResult) to lsSearchResult
71692>>>>>        Function_Return lsFinalResult
71693>>>>>    End_Function
71694>>>>>
71694>>>>>    // Private
71694>>>>>    Function FileSearchRecursivePriv String sFilePathMask Integer iFileDirMode Boolean bReturnOnlyOne tsSearchResult[] ByRef lsFinalResult Returns tsSearchResult[]
71696>>>>>        tsSearchResult[] lsSearchResultDir lsSearchResult
71696>>>>>        tsSearchResult[] lsSearchResultDir lsSearchResult
71698>>>>>        Integer iMax iCnt iLast iFinalMax
71698>>>>>        String sSearchInDir sFileMask
71698>>>>>        Boolean bStop
71698>>>>>        
71698>>>>>        Move False to bStop
71699>>>>>        Move (RightPos("\", sFilePathMask)) to iLast
71700>>>>>        If (iLast > 0) Begin
71702>>>>>            Move (Left(sFilePathMask, iLast - 1)) to sSearchInDir
71703>>>>>            Move (Mid(sFilePathMask, Length(sFilePathMask), iLast + 1)) to sFileMask
71704>>>>>        End
71704>>>>>>
71704>>>>>        Get FileSearch (sSearchInDir + "\*.*") DIRMODE_DIRECTORIES_ONLY to lsSearchResultDir
71705>>>>>        Move (SizeOfArray(lsSearchResultDir)) to iMax
71706>>>>>        Move 0 to iCnt
71707>>>>>        While (iCnt < iMax and bStop = False)
71711>>>>>            If (lsSearchResultDir[iCnt].sFilename <> "." and lsSearchResultDir[iCnt].sFilename <> "..") Begin
71713>>>>>                Get FileSearchRecursivePriv (sSearchInDir + "\" + lsSearchResultDir[iCnt].sFilename + "\" + sFileMask) iFileDirMode bReturnOnlyOne (&lsFinalResult) to lsSearchResult
71714>>>>>            End
71714>>>>>>
71714>>>>>            Increment iCnt
71715>>>>>            If (bReturnOnlyOne = True) Begin
71717>>>>>                If (SizeOfArray(lsFinalResult) > 0) Begin
71719>>>>>                    Move True to bStop
71720>>>>>                End
71720>>>>>>
71720>>>>>            End
71720>>>>>>
71720>>>>>        Loop
71721>>>>>>
71721>>>>>        If (bStop = False) Begin
71723>>>>>            Get FileSearch sFilePathMask iFileDirMode to lsSearchResult
71724>>>>>            Move (SizeOfArray(lsSearchResult)) to iMax
71725>>>>>            Move (SizeOfArray(lsFinalResult)) to iFinalMax
71726>>>>>            Move 0 to iCnt
71727>>>>>            While (iCnt < iMax and bStop = False)
71731>>>>>                Move lsSearchResult[iCnt] to lsFinalResult[iFinalMax]
71732>>>>>                Move (sSearchInDir + "\" + lsSearchResult[iCnt].sFilename) to lsFinalResult[iFinalMax].sFilename
71733>>>>>                Increment iFinalMax
71734>>>>>                Increment iCnt
71735>>>>>                If (bReturnOnlyOne = True) Begin
71737>>>>>                    If (SizeOfArray(lsFinalResult) > 0) Begin
71739>>>>>                        Move True to bStop
71740>>>>>                    End
71740>>>>>>
71740>>>>>                End
71740>>>>>>
71740>>>>>            Loop
71741>>>>>>
71741>>>>>        End
71741>>>>>>
71741>>>>>        Function_Return lsSearchResult
71742>>>>>    End_Function
71743>>>>>
71743>>>>>    // Finds a list of files.
71743>>>>>    // sSearchFiles is a list of files to search For separated by semicolon (;).
71743>>>>>    // sSearchFiles may not contain paths but may contain wildcards.
71743>>>>>    // sSearchPaths may only contain paths.
71743>>>>>    // Returns a string array with the files
71743>>>>>    // Returns only files with full path.
71743>>>>>    // Use:
71743>>>>>    // Get ListOfFiles "path1;path2" "*.txt;*.asc"
71743>>>>>    // This will return all the .txt and .asc files with full path that exists in path1 and path2.
71743>>>>>    Function ListOfFiles String sSearchPaths String sSearchFiles Returns String[]
71745>>>>>        String[] saFileList
71746>>>>>        Integer iFilelistCount iSearchFilesCount iCurSearchFile
71746>>>>>        Integer iSearchPathsCount iCurSearchPath iFilesFound iCurFileFound
71746>>>>>        String sCurSearchFile sCurSearchPath
71746>>>>>        tsSearchResult[] lsSearchResult
71746>>>>>        tsSearchResult[] lsSearchResult
71747>>>>>        Get CountOfFields sSearchPaths to iSearchPathsCount
71748>>>>>        Get CountOfFields sSearchFiles to iSearchFilesCount
71749>>>>>        If (iSearchFilesCount > 0 and iSearchPathsCount > 0) Begin
71751>>>>>            For iCurSearchFile from 1 to iSearchFilesCount
71757>>>>>>
71757>>>>>                Get FieldAtIndex sSearchFiles iCurSearchFile to sCurSearchFile
71758>>>>>                Move (Trim(sCurSearchFile)) to sCurSearchFile
71759>>>>>                If (sCurSearchFile <> "") Begin
71761>>>>>                    For iCurSearchPath from 1 to iSearchPathsCount
71767>>>>>>
71767>>>>>                        Get FieldAtIndex sSearchPaths iCurSearchPath to sCurSearchPath
71768>>>>>                        If (Right(sCurSearchPath, 1) <> "\") Begin
71770>>>>>                            Move (sCurSearchPath + "\") to sCurSearchPath
71771>>>>>                        End
71771>>>>>>
71771>>>>>                        Get FileSearch (sCurSearchPath + sCurSearchFile) DIRMODE_FILES_ONLY to lsSearchResult
71772>>>>>                        Move (SizeOfArray(lsSearchResult)) to iFilesFound
71773>>>>>                        Decrement iFilesFound
71774>>>>>                        For iCurFileFound from 0 to iFilesFound
71780>>>>>>
71780>>>>>                            Move (sCurSearchPath + lsSearchResult[iCurFileFound].sFilename) to saFileList[iFilelistCount]
71781>>>>>                            Increment iFilelistCount
71782>>>>>                        Loop
71783>>>>>>
71783>>>>>                    Loop
71784>>>>>>
71784>>>>>                End
71784>>>>>>
71784>>>>>            Loop
71785>>>>>>
71785>>>>>        End
71785>>>>>>
71785>>>>>        Function_Return saFileList
71786>>>>>    End_Function
71787>>>>>
71787>>>>>    // Get Windows Temp path
71787>>>>>    Function FileTempPath Returns String
71789>>>>>        Integer iRetVal
71789>>>>>        String  sTempPath
71789>>>>>        WString wTempPath
71789>>>>>        Move (ZeroString(MAX_PATH)) to wTempPath
71790>>>>>        Move (fsGetTempPath(MAX_PATH, AddressOf(wTempPath))) to iRetVal
71791>>>>>        If (iRetVal > MAX_PATH) Begin
71793>>>>>            Move (ZeroString(iRetval)) to wTempPath
71794>>>>>            Move (fsGetTempPath(iRetVal, AddressOf(wTempPath))) to iRetVal
71795>>>>>        End
71795>>>>>>
71795>>>>>        Move wTempPath To sTempPath
71796>>>>>        Move (CString(sTempPath)) to sTempPath
71797>>>>>        Function_Return sTempPath
71798>>>>>    End_Function
71799>>>>>
71799>>>>>    // Generates a temporary file.
71799>>>>>    // Returns full path and filename or blank if no file could be created.
71799>>>>>    // sPathName is the place where the temporary file is generated. If it is
71799>>>>>    // not argumented the TEMP enviroment variable is used. If that is also not
71799>>>>>    // available the current directory is used.
71799>>>>>    // You can prefix the first 3 letters of the filename with sPrefix.
71799>>>>>    Function FileTempFileName String sPathName String sPrefix Returns String
71801>>>>>        Address aTempFileName
71801>>>>>        String sPathNameTmp sPrefixTmp sTempFileName
71801>>>>>        Boolean bOk
71801>>>>>        WString wTempFileName
71801>>>>>        Set pbError to False
71802>>>>>        If (num_arguments > 0) Begin
71804>>>>>            Move sPathName to sPathNameTmp
71805>>>>>        End
71805>>>>>>
71805>>>>>        Else Begin
71806>>>>>            Move "" to sPathNameTmp
71807>>>>>        End
71807>>>>>>
71807>>>>>        If (num_arguments > 1) Begin
71809>>>>>            Move sPrefix to sPrefixTmp
71810>>>>>        End
71810>>>>>>
71810>>>>>        Else Begin
71811>>>>>            Move "" to sPrefixTmp
71812>>>>>        End
71812>>>>>>
71812>>>>>        Move (Trim(sPathNameTmp)) to sPathNameTmp
71813>>>>>        If (sPathNameTmp = "") Begin
71815>>>>>            Get FileTempPath to sPathNameTmp
71816>>>>>            If (sPathNameTmp = "") Begin
71818>>>>>                Move "." to sPathNameTmp
71819>>>>>            End
71819>>>>>>
71819>>>>>        End
71819>>>>>>
71819>>>>>        Move (ZeroString(MAX_PATH))     To wTempFilename
71820>>>>>        Move (AddressOf(wTempFileName)) To aTempFileName
71821>>>>>        Move (fsGetTempFileName(sPathNameTmp, sPrefixTmp, 0, aTempFileName)) to bOk
71822>>>>>        If bOk Begin
71824>>>>>            Move wTempFileName          To sTempFileName
71825>>>>>            Move (CString(sTempFileName)) to sTempFileName
71826>>>>>        End
71826>>>>>>
71826>>>>>        Function_Return sTempFileName
71827>>>>>    End_Function
71828>>>>>
71828>>>>>    // Creates a new directory.
71828>>>>>    // Returns True if succeeds.
71828>>>>>    Function DirectoryCreate String sDirectoryName Returns Boolean
71830>>>>>        Boolean bFound bOk
71830>>>>>        Integer iErrorNumber
71830>>>>>        Move False to bOk
71831>>>>>        Set pbError to False
71832>>>>>        Get FileExists sDirectoryName DIRMODE_DIRECTORIES_ONLY to bFound
71833>>>>>        If (not(bFound)) Begin
71835>>>>>            Move (sDirectoryname+(Character(0))) to sDirectoryname
71836>>>>>            Move (fsCreateDirectory(sDirectoryname, FNULL)) to bOk
71837>>>>>            If (bOk = False) Begin           // Could not create
71839>>>>>                Move (fsGetLastError()) to iErrorNumber
71840>>>>>                If iErrorNumber Begin
71842>>>>>                    Send DoShowError iErrorNumber ("Tried to create directory: "+sDirectoryname)
71843>>>>>                End
71843>>>>>>
71843>>>>>            End
71843>>>>>>
71843>>>>>        End
71843>>>>>>
71843>>>>>        Function_Return bOk
71844>>>>>    End_Function
71845>>>>>
71845>>>>>    // Removes an existing empty directory.
71845>>>>>    // Returns True if succeeds.
71845>>>>>    Function DirectoryRemove String sDirectoryName Returns Boolean
71847>>>>>        Boolean bFound bOk
71847>>>>>        Integer iErrorNumber
71847>>>>>        Move False to bOk
71848>>>>>        Set pbError to False
71849>>>>>        Get FileExists sDirectoryName DIRMODE_DIRECTORIES_ONLY to bFound
71850>>>>>        If bFound Begin
71852>>>>>            Move (sDirectoryname+(Character(0))) to sDirectoryname
71853>>>>>            Move (fsRemoveDirectory(sDirectoryname)) to bOk
71854>>>>>            If (bOk = False) Begin           // Could not delete
71856>>>>>                Move (fsGetLastError()) to iErrorNumber
71857>>>>>                If iErrorNumber Begin
71859>>>>>                    Send DoShowError iErrorNumber ("Tried to remove directory: "+sDirectoryName)
71860>>>>>                End
71860>>>>>>
71860>>>>>            End
71860>>>>>>
71860>>>>>        End
71860>>>>>>
71860>>>>>        Function_Return bOk
71861>>>>>    End_Function
71862>>>>>
71862>>>>>    // Removes a directory and all its contents.
71862>>>>>    // Returns true on succes.
71862>>>>>    Function DirectoryRemoveRecursive String sDirectoryName Returns Boolean
71864>>>>>        tsSearchResult[] alsSearchResults
71864>>>>>        tsSearchResult[] alsSearchResults
71865>>>>>        Integer iIndex
71865>>>>>        Boolean bOk
71865>>>>>
71865>>>>>        If (Right(sDirectoryName, 1) = "\") Begin
71867>>>>>            Move (Left(sDirectoryName, Length(sDirectoryName) - 1)) to sDirectoryName
71868>>>>>        End
71868>>>>>>
71868>>>>>        Get FileSearch (sDirectoryName + "\*") DIRMODE_DIRECTORIES_ONLY to alsSearchResults
71869>>>>>        For iIndex from 2 to (SizeOfArray(alsSearchResults) - 1)
71875>>>>>>
71875>>>>>            Get DirectoryRemoveRecursive (sDirectoryName + "\" + alsSearchResults[iIndex].sFilename) to bOk
71876>>>>>            If (not(bOk)) Begin
71878>>>>>                Function_Return False
71879>>>>>            End
71879>>>>>>
71879>>>>>        Loop
71880>>>>>>
71880>>>>>        Get FileSearch (sDirectoryName + "\*") DIRMODE_FILES_ONLY to alsSearchResults
71881>>>>>        For iIndex from 0 to (SizeOfArray(alsSearchResults) - 1)
71887>>>>>>
71887>>>>>            Get FileDelete (sDirectoryName + "\" + alsSearchResults[iIndex].sFilename) to bOk
71888>>>>>            If (not(bOk)) Begin
71890>>>>>                Function_Return False
71891>>>>>            End
71891>>>>>>
71891>>>>>        Loop
71892>>>>>>
71892>>>>>        Get DirectoryRemove sDirectoryName to bOk
71893>>>>>        Function_Return bOk
71894>>>>>    End_Function
71895>>>>>
71895>>>>>    // Converts the filetime in UTC and returns a datetime in local time.
71895>>>>>    // private
71895>>>>>    Function ConvertFileTimeToLocalDateTime UBigInt ubiFileTime Returns DateTime
71897>>>>>        Boolean bOk
71897>>>>>        UBigInt ubiZero
71897>>>>>        structSystemTime lsSystemTime lsLocalTime
71897>>>>>        structSystemTime lsSystemTime lsLocalTime
71897>>>>>        DateTime dtLocalTime
71897>>>>>        Move 0 to lsSystemTime.wDay
71898>>>>>        Move 0 to lsLocalTime.wDay
71899>>>>>        Move 0 to ubiZero
71900>>>>>        If (ubiFileTime <> ubiZero) Begin
71902>>>>>            Move (fsFileTimeToSystemTime(AddressOf(ubiFileTime), AddressOf(lsSystemTime))) to bOk
71903>>>>>            If bOk Begin
71905>>>>>                Move (fsSystemTimeToTzSpecificLocalTime(FNULL, AddressOf(lsSystemTime), AddressOf(lsLocalTime))) to bOk
71906>>>>>                If bOk Begin
71908>>>>>                    Move (DateSetYear(dtLocalTime, lsLocalTime.wYear)) to dtLocalTime
71909>>>>>                    Move (DateSetMonth(dtLocalTime, lsLocalTime.wMonth)) to dtLocalTime
71910>>>>>                    Move (DateSetDay(dtLocalTime, lsLocalTime.wDay)) to dtLocalTime
71911>>>>>                    Move (DateSetHour(dtLocalTime, lsLocalTime.wHour)) to dtLocalTime
71912>>>>>                    Move (DateSetMinute(dtLocalTime, lsLocalTime.wMinute)) to dtLocalTime
71913>>>>>                    Move (DateSetSecond(dtLocalTime, lsLocalTime.wSecond)) to dtLocalTime
71914>>>>>                    Move (DateSetMillisecond(dtLocalTime, lsLocalTime.wMillieseconds)) to dtLocalTime
71915>>>>>                End
71915>>>>>>
71915>>>>>            End
71915>>>>>>
71915>>>>>        End
71915>>>>>>
71915>>>>>        Function_Return dtLocalTime
71916>>>>>    End_Function
71917>>>>>
71917>>>>>    // Returns the filename with full path where the casing is preserved from windows.
71917>>>>>    Function FilePreservedFilename String sFilename Returns String
71919>>>>>        Integer iNumOfDirectories iCurrentDirectory
71919>>>>>        String sPreservedFilename sCurDir sSearchName
71919>>>>>        tsSearchResult[] lsSearchResult
71919>>>>>        tsSearchResult[] lsSearchResult
71920>>>>>
71920>>>>>        Get CountOfFields sFilename "\" to iNumOfDirectories
71921>>>>>        For iCurrentDirectory from 1 to (iNumOfDirectories - 1)
71927>>>>>>
71927>>>>>            Get FieldAtIndex sFilename iCurrentDirectory "\" to sCurDir
71928>>>>>            If (sCurDir <> "") Begin
71930>>>>>                If (Right(sCurDir, 1) <> ":") Begin
71932>>>>>                    Move (sPreservedFilename + sCurDir) to sSearchName
71933>>>>>                    Get FileSearch sSearchName DIRMODE_DIRECTORIES_ONLY to lsSearchResult
71934>>>>>                    If (SizeOfArray(lsSearchResult) > 0) Begin
71936>>>>>                        Move (sPreservedFilename + lsSearchResult[0].sFilename + "\") to sPreservedFilename
71937>>>>>                    End
71937>>>>>>
71937>>>>>                    Else Begin
71938>>>>>                        Move (sPreservedFilename + sCurDir + "\") to sPreservedFilename
71939>>>>>                    End
71939>>>>>>
71939>>>>>                End
71939>>>>>>
71939>>>>>                Else Begin
71940>>>>>                    Move (sPreservedFilename + sCurDir + "\") to sPreservedFilename
71941>>>>>                End
71941>>>>>>
71941>>>>>            End
71941>>>>>>
71941>>>>>            Else Begin
71942>>>>>                Move (sPreservedFilename + "\") to sPreservedFilename
71943>>>>>            End
71943>>>>>>
71943>>>>>        Loop
71944>>>>>>
71944>>>>>        Get FileSearch sFilename DIRMODE_FILES_AND_DIRECTORIES to lsSearchResult
71945>>>>>        If (SizeOfArray(lsSearchResult) > 0) Begin
71947>>>>>            Move (sPreservedFilename + lsSearchResult[0].sFilename) to sPreservedFilename
71948>>>>>        End
71948>>>>>>
71948>>>>>        Else Begin
71949>>>>>            Function_Return ""
71950>>>>>        End
71950>>>>>>
71950>>>>>        Function_Return sPreservedFilename
71951>>>>>    End_Function
71952>>>>>
71952>>>>>    // Returns the number of fields present in a string of fields seperated by a delimiter.
71952>>>>>    // If sDelimiter is not applied the ";" will be used.
71952>>>>>    Function CountOfFields String sFields String sDelimiter Returns Integer
71954>>>>>        Integer iChar icChar iField
71954>>>>>        String sDlm
71954>>>>>        If (sFields ="") Begin
71956>>>>>            Function_Return 0
71957>>>>>        End
71957>>>>>>
71957>>>>>        If (num_arguments > 1) Begin
71959>>>>>            Move sDelimiter to sDlm
71960>>>>>        End
71960>>>>>>
71960>>>>>        Else Begin
71961>>>>>            Move ";" to sDlm
71962>>>>>        End
71962>>>>>>
71962>>>>>        Move (Length(sFields) -1) to icChar
71963>>>>>        For iChar from 1 to icChar
71969>>>>>>
71969>>>>>            If (Mid(sFields, 1, iChar) = sDlm) Begin
71971>>>>>                Increment iField
71972>>>>>            End
71972>>>>>>
71972>>>>>        Loop
71973>>>>>>
71973>>>>>        Function_Return (iField +1)
71974>>>>>    End_Function
71975>>>>>
71975>>>>>    // Returns a field from a string containing multiple delimited fields.
71975>>>>>    // Index is 1-based.
71975>>>>>    Function FieldAtIndex String sFields Integer iIndex String sDelimiter Returns String
71977>>>>>        Integer iField iPos
71977>>>>>        String sField sDlm
71977>>>>>        If (num_arguments > 2) Begin
71979>>>>>            Move sDelimiter to sDlm
71980>>>>>        End
71980>>>>>>
71980>>>>>        Else Begin
71981>>>>>            Move ";" to sDlm
71982>>>>>        End
71982>>>>>>
71982>>>>>        Move (sFields + sDlm) to sFields
71983>>>>>        For iField from 1 to iIndex
71989>>>>>>
71989>>>>>            Move (Pos(sDlm, sFields)) to iPos
71990>>>>>            If iPos Begin
71992>>>>>                Move (Left(sFields, iPos -1)) to sField
71993>>>>>                Move (Right(sFields, Length(sFields) -iPos)) to sFields
71994>>>>>            End
71994>>>>>>
71994>>>>>            Else Begin
71995>>>>>                Function_Return ""
71996>>>>>            End
71996>>>>>>
71996>>>>>        Loop
71997>>>>>>
71997>>>>>        Function_Return sField
71998>>>>>    End_Function
71999>>>>>
71999>>>>>    // Removes the file extention from the sFile string and returns the extention including "."
71999>>>>>    // Example sFile = "x:\text.txt". The function returns ".txt" and sFile = "x:\text".
71999>>>>>    Function RemoveExtention String ByRef sFilename Returns String
72001>>>>>        String sExtention
72001>>>>>        Integer iLengthExtention
72001>>>>>        Get FileExtention sFilename to sExtention
72002>>>>>        Move (Length(sExtention)) to iLengthExtention
72003>>>>>        If (iLengthExtention > 0) Begin
72005>>>>>            Move (Left(sFilename, (Length(sFilename) - iLengthExtention - 1))) to sFilename
72006>>>>>        End
72006>>>>>>
72006>>>>>        Function_Return sExtention
72007>>>>>    End_Function
72008>>>>>
72008>>>>>    // Add a directory separator if it is not present.
72008>>>>>    // Example sFoldername = "x:\FolderA". The function returns "x:\FolderA\"
72008>>>>>    Function AddFolderSeperator String sFolderName Returns String
72010>>>>>        String sDirSep
72010>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
72011>>>>>        Move (Trim(sFolderName)) to sFolderName
72012>>>>>        If (Right(sFolderName, 1) <> sDirSep) Begin
72014>>>>>            Move (sFolderName + sDirSep) to sFolderName
72015>>>>>        End
72015>>>>>>
72015>>>>>        Function_Return sFolderName
72016>>>>>    End_Function
72017>>>>>
72017>>>>>    // Removes a directory separator if it is present.
72017>>>>>    // Example sFoldername = "x:\FolderA\". The function returns "x:\FolderA"
72017>>>>>    Function RemoveFolderSeperator String sFolderName Returns String
72019>>>>>        String sDirSep
72019>>>>>        Move (SysConf(SYSCONF_DIR_SEPARATOR)) to sDirSep
72020>>>>>        Move (Trim(sFolderName)) to sFolderName
72021>>>>>        If (Right(sFolderName, 1) = sDirSep) Begin
72023>>>>>            Move (Left(sFolderName, Length(sFolderName) - 1)) to sFolderName
72024>>>>>        End
72024>>>>>>
72024>>>>>        Function_Return sFolderName
72025>>>>>    End_Function
72026>>>>>
72026>>>>>    Function FileLastWriteTime String sFileName Returns tFileTime
72028>>>>>        DWord dwAccess
72028>>>>>        DWord dwShared
72028>>>>>        DWord dwCreate
72028>>>>>        Handle hFile
72028>>>>>        Integer iRetval iErrorNumber
72028>>>>>        tFileTime ftLastWrite
72028>>>>>        tFileTime ftLastWrite
72028>>>>>        //
72028>>>>>        Append sFilename (Character(0)) (Character(0))
72030>>>>>        Move (GENERIC_READ iOr GENERIC_WRITE) To dwAccess
72031>>>>>        Move FILE_SHARE_RANDOM   To dwShared
72032>>>>>        Move OPEN_EXISTING       To dwCreate
72033>>>>>
72033>>>>>        Move (fsCreatefile(sFilename, dwAccess, dwShared, FNULL, dwCreate, FILE_ATTRIBUTE_NORMAL, FNULL)) To hFile
72034>>>>>        If (hFile = INVALID_HANDLE_VALUE) Begin
72036>>>>>            Move (fsGetLastError()) To iErrorNumber
72037>>>>>            If iErrorNumber Begin
72039>>>>>                Send DoShowError iErrorNumber sFileName
72040>>>>>            End
72040>>>>>>
72040>>>>>            Procedure_Return
72041>>>>>        End
72041>>>>>>
72041>>>>>        Else Begin
72042>>>>>            Move 0 To ftLastWrite.dwLowDateTime
72043>>>>>            Move (fsGetFileTime(hFile,FNULL,FNULL,AddressOf(ftLastWrite))) To iRetval
72044>>>>>            If (iRetVal = 0) Begin           //Could not close
72046>>>>>                Move (fsGetLastError()) To iErrorNumber
72047>>>>>                If iErrorNumber Begin
72049>>>>>                    Send DoShowError iErrorNumber sFileName
72050>>>>>                End
72050>>>>>>
72050>>>>>            End
72050>>>>>>
72050>>>>>            Move (fsCloseHandle(hFile)) To iRetVal
72051>>>>>            If (iRetVal = 0) Begin           //Could not close
72053>>>>>                Move (fsGetLastError()) To iErrorNumber
72054>>>>>                If iErrorNumber Begin
72056>>>>>                    Send DoShowError iErrorNumber sFileName
72057>>>>>                End
72057>>>>>>
72057>>>>>            End
72057>>>>>>
72057>>>>>        End
72057>>>>>>
72057>>>>>        Function_Return ftLastWrite
72058>>>>>    End_Function
72059>>>>>
72059>>>>>    Function CurrentSystemTimeAsFileTime Returns tFileTime
72061>>>>>        Integer iRetVal
72061>>>>>        Integer iErrorNumber
72061>>>>>        String  sFileName
72061>>>>>        tFileTime ftCurrentTime
72061>>>>>        tFileTime ftCurrentTime
72061>>>>>
72061>>>>>        Move 0 to ftCurrentTime.dwLowDateTime
72062>>>>>        Move (fsGetSystemTimeAsFileTime(AddressOf(ftCurrentTime))) to iRetVal
72063>>>>>        If (iRetVal = 0) Begin
72065>>>>>            Move (fsGetLastError()) to iErrorNumber
72066>>>>>            If iErrorNumber Begin
72068>>>>>                Send DoShowError iErrorNumber sFileName
72069>>>>>            End
72069>>>>>>
72069>>>>>        End
72069>>>>>>
72069>>>>>        Function_Return ftCurrentTime
72070>>>>>    End_Function
72071>>>>>
72071>>>>>    // Nils 2018-08-30 Added this message from Akefs.pkg as we need it For the
72071>>>>>    // SourceCodeTools project
72071>>>>>    Procedure Set FileLastWriteTime String sFileName tFileTime ftLastWrite
72073>>>>>        DWord dwAccess dwShared dwCreate
72073>>>>>        Handle hFile
72073>>>>>        Integer iRetval iErrorNumber
72073>>>>>
72073>>>>>        Append sFilename (Character(0)) (Character(0))
72075>>>>>        Move (GENERIC_READ ior GENERIC_WRITE) to dwAccess
72076>>>>>        Move FILE_SHARE_RANDOM   to dwShared
72077>>>>>        Move OPEN_EXISTING       to dwCreate
72078>>>>>
72078>>>>>        Move (fsCreatefile(sFilename, dwAccess, dwShared, FNULL, dwCreate, FILE_ATTRIBUTE_NORMAL, FNULL)) to hFile
72079>>>>>        If (hFile = INVALID_HANDLE_VALUE) Begin
72081>>>>>            Move (fsGetLastError()) to iErrorNumber
72082>>>>>            If (iErrorNumber <> 0) Begin
72084>>>>>                Send DoShowError iErrorNumber sFileName
72085>>>>>            End
72085>>>>>>
72085>>>>>            Procedure_Return
72086>>>>>        End
72086>>>>>>
72086>>>>>        Else Begin
72087>>>>>            Move (fsSetFileTime(hFile,FNULL,FNULL,AddressOf(ftLastWrite))) to iRetval
72088>>>>>            If (iRetVal = 0) Begin           //Could not close
72090>>>>>                Move (fsGetLastError()) to iErrorNumber
72091>>>>>                If (iErrorNumber <> 0) Begin
72093>>>>>                    Send DoShowError iErrorNumber sFileName
72094>>>>>                End
72094>>>>>>
72094>>>>>            End
72094>>>>>>
72094>>>>>            Move (fsCloseHandle(hFile)) to iRetVal
72095>>>>>            If (iRetVal = 0) Begin           //Could not close
72097>>>>>                Move (fsGetLastError()) to iErrorNumber
72098>>>>>                If (iErrorNumber <> 0) Begin
72100>>>>>                    Send DoShowError iErrorNumber sFileName
72101>>>>>                End
72101>>>>>>
72101>>>>>            End
72101>>>>>>
72101>>>>>        End
72101>>>>>>
72101>>>>>    End_Procedure
72102>>>>>
72102>>>>>    // Fetch the error message from the system message table using the default language.
72102>>>>>    // If not in unicode then the variable sAppendErrorText is in ANSI
72102>>>>>    Procedure DoShowError Integer iErrorNumber String sAppendErrorText
72104>>>>>        Pointer lpOut
72104>>>>>        Integer iRetChars iRetVal
72104>>>>>        String sMsg
72104>>>>>        Boolean bOk
72104>>>>>        WString wMsg
72104>>>>>
72104>>>>>        Move 0 to lpOut
72105>>>>>        Move (fsFormatMessage((FORMAT_MESSAGE_FROM_SYSTEM+FORMAT_MESSAGE_IGNORE_INSERTS+FORMAT_MESSAGE_ALLOCATE_BUFFER), FNULL, iErrorNumber, FNULL, AddressOf(lpOut), 0, FNULL)) to iRetChars
72106>>>>>        If (iRetChars > 0) Begin
72108>>>>>            Move (ZeroString(iRetChars*2)) to wMsg
72109>>>>>            Move (MemCopy(AddressOf(wMsg), lpOut, iRetChars*2)) to bOk
72110>>>>>            Move (fsLocalFree(lpOut)) to iRetVal
72111>>>>>            Move wMsg To sMsg
72112>>>>>            If (num_arguments > 0) Begin
72114>>>>>                Move (Trim(sAppendErrorText)) to sAppendErrorText
72115>>>>>                If (sAppendErrorText <> "") Begin
72117>>>>>                    Append sMsg "\n" sAppendErrorText
72119>>>>>                End
72119>>>>>>
72119>>>>>            End
72119>>>>>>
72119>>>>>            Send warning_box sMsg
72120>>>>>        End
72120>>>>>>
72120>>>>>    End_Procedure
72121>>>>>
72121>>>>>    // Shows a warning message to user with OK button and a exclamation icon.
72121>>>>>    // private
72121>>>>>    Procedure Warning_Box String sWngMsg
72123>>>>>        Integer iVoid
72123>>>>>        Boolean bSendVdfError
72123>>>>>        Set pbError to True
72124>>>>>        Get pbErrorAsVDFError to bSendVdfError
72125>>>>>        If (bSendVdfError = False) Begin
72127>>>>>            Get Message_Box sWngMsg "Filesystem Error" MB_OK MB_ICONEXCLAMATION to iVoid
72128>>>>>        End
72128>>>>>>
72128>>>>>        Else Begin
72129>>>>>            Error DFERR_PROGRAM sWngMsg
72130>>>>>>
72130>>>>>        End
72130>>>>>>
72130>>>>>    End_Procedure
72131>>>>>
72131>>>>>    // Fetch the filename from the list of filenames associated with a filenumber.
72131>>>>>    // This function is used For reporting filenames during an error.
72131>>>>>    // private
72131>>>>>    Function FileErrorText Integer iFilenumber Returns String
72133>>>>>        String sErrorText
72133>>>>>        structFile[] lsFile
72133>>>>>        structFile[] lsFile
72134>>>>>        Get plsFile to lsFile
72135>>>>>        If (iFilenumber < SizeOfArray(lsFile)) Begin
72137>>>>>            Move ("File: "+lsFile[iFilenumber].sFilename) to sErrorText
72138>>>>>        End
72138>>>>>>
72138>>>>>        Function_Return sErrorText
72139>>>>>    End_Function
72140>>>>>
72140>>>>>End_Class
72141>>>
72141>>>Activate_View Activate_oConteudoDiretorio for oConteudoDiretorio
72151>>>>
72151>>>Object oConteudoDiretorio is a dbView
72153>>>    Set Location to 2 4
72154>>>    Set Border_Style to Border_Thick
72155>>>    Set Size to 241 567
72156>>>    Set piMinSize to 228 525
72157>>>    
72157>>>    Global_Variable String sDiretorio           
72157>>>    Get psReadDir to sDiretorio                                         
72158>>>       
72158>>>    Object oPathFile is a Form
72160>>>        Set Location to 22 81
72161>>>        Set Size to 13 469
72162>>>        Set Label to "Caminho arquivo:"
72163>>>        Set Entry_State to False
72164>>>        Set Value to sDiretorio
72165>>>    End_Object
72166>>>    
72166>>>    Object oCustomerGrid is a cCJGrid
72168>>>        Set Size to 165 533
72169>>>        Set Location to 54 17
72170>>>        Set peAnchors to anAll
72171>>>        Set pbReadOnly to True
72172>>>        Set pbSelectionEnable to True      
72173>>>
72173>>>        Object oFileSearch is a cCJGridColumn
72175>>>            Set piWidth to 889
72176>>>            Set psCaption to "Arquivos encontrados:"
72177>>>        End_Object
72178>>>        
72178>>>        Procedure FileExplorer
72181>>>            Global_Variable String [] aListaFile                        
72181>>>                                                        
72181>>>            Get ListOfFiles sDiretorio to aListaFile
72182>>>            
72182>>>            Showln aListaFile
72184>>>        End_Procedure
72185>>>                 
72185>>>        Procedure LoadData 
72188>>>            Handle hoDataSource
72188>>>            tDataSourceRow[] TheData
72188>>>            tDataSourceRow[] TheData
72189>>>            Boolean bFound
72189>>>            Integer iIndex    
72189>>>            Integer iRows iFile
72189>>>//            Handle hoClient_ID
72189>>>//            String sDiretorio
72189>>>            
72189>>>//            Get Client_Id to hoClient_ID
72189>>>//            Get psTeste of hoClient_ID to sCaminho  
72189>>>//            Get phoDataSource to hoDataSource
72189>>>
72189>>>//            Get the datasource indexes of the various columns
72189>>>//            Get piColumnId of oCustomer_Customer_Number to iNum
72189>>>
72189>>>//            Load All data into the datasource array
72189>>>//            Clear Customer
72189>>>//            Find ge Customer by 1
72189>>>
72189>>>//            Move (Found) to bFound
72189>>>//            While (bFound)
72189>>>//                Move Customer.Customer_Number to TheData[iRows].sValue[iFile] 
72189>>>//                Move (Found) to bFound
72189>>>//                Increment iRows
72189>>>//            Loop
72189>>>//
72189>>>//            For iIndex from 0 to (SizeOfArray(aFiles) - 1)
72189>>>//                Move aFiles[iIndex] to TheData[iRows].sValue[iFile]
72189>>>//                Increment iRows
72189>>>//            Loop
72189>>>
72189>>>            // Initialize Grid with new data
72189>>>            Send InitializeData TheData
72190>>>            Send MovetoFirstRow
72191>>>        End_Procedure
72192>>>    
72192>>>        Procedure Activating
72195>>>            Forward Send Activating
72197>>>            Send FileExplorer
72198>>>            Send LoadData
72199>>>        End_Procedure
72200>>>    
72200>>>    End_Object
72201>>>End_Object
72202>
72202>        Procedure Activate_About
72205>            Send DoAbout "" "" "" "" ""
72206>        End_Procedure
72207>
72207>    End_Object
72208>
72208>End_Object
72209>
72209>Start_UI
72210>
Summary
Memory Available: 2147483646
Total Warnings : 0
Total Errors   : 0
Total Symbols  : 42290
Total Resources: 0
Total Commands : 72209
Total Windows  : 0
Total Pages    : 0
Static Data    : 445173
Message area   : 505029
Total Blocks   : 26268
