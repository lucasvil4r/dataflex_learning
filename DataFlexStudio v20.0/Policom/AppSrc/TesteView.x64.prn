Compiling Program: C:\Users\lucas.GPCABLING\Documents\repositorios\dataflex_learning\DataFlexStudio v20.0\Policom\AppSrc\TesteView.src
Memory Available: 8124010496
1>Use DFAllEnt.pkg
Using pre-compiled package DFALLENT.PKG
Including file: dfallent.x64.pkd    (C:\Program Files\DataFlex 20.0\Pkg\dfallent.x64.pkd)
68480>Use cCJStandardCommandBarSystem.pkg
Including file: cCJStandardCommandBarSystem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJStandardCommandBarSystem.pkg)
68480>>>// these are all the packages used in a standard MDI menubar/toolbar system
68480>>>
68480>>>Use cCJCommandBarSystem.pkg
68480>>>Use cCJStandardMenuItemClasses.pkg
Including file: cCJStandardMenuItemClasses.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJStandardMenuItemClasses.pkg)
68480>>>>>Use Dfpanel.pkg
68480>>>>>Use cCJCommandBarSystem.pkg
68480>>>>>Use LanguageText.pkg
68480>>>>>
68480>>>>>
68480>>>>>Class cCJUndoMenuItem is a cCJMenuItem
68481>>>>>    
68481>>>>>    Procedure Construct_Object
68483>>>>>        Forward Send Construct_Object
68485>>>>>        Set psCaption   to C_$CaptionUndo
68486>>>>>        Set psToolTip to C_$ToolTipUndo
68487>>>>>        Set psDescription to C_$DescUndo
68488>>>>>        Set psImage to "ActionUndo.ico"
68489>>>>>        Set pbActiveUpdate to True
68490>>>>>        Set psCategory to C_$CategoryEdit
68491>>>>>        Set psShortcut to C_$Key_Ctrl_Z
68492>>>>>    End_Procedure
68493>>>>>    
68493>>>>>    Procedure OnExecute Variant vCommandBarControl
68495>>>>>        Send Undo of (focus(Self))
68496>>>>>    End_Procedure
68497>>>>>    
68497>>>>>    Function IsEnabled Returns Boolean
68499>>>>>        Boolean bEnabled
68499>>>>>        Get CanUndo of (Focus(Self)) to bEnabled
68500>>>>>        Function_Return bEnabled
68501>>>>>    End_Function
68502>>>>>    
68502>>>>>End_Class
68503>>>>>
68503>>>>>
68503>>>>>Class cCJDeleteEditMenuItem is a cCJMenuItem
68504>>>>>    
68504>>>>>    Procedure Construct_Object
68506>>>>>        Forward Send Construct_Object
68508>>>>>        Set psCaption   to C_$CaptionDelete
68509>>>>>        Set psToolTip to C_$ToolTipDelete
68510>>>>>        Set psDescription to C_$DescDelete
68511>>>>>        Set psImage to "actionDelete.ico"
68512>>>>>        Set psShortcut to C_$Key_Delete
68513>>>>>        Set pbActiveUpdate to True
68514>>>>>        Set psCategory to C_$CategoryEdit
68515>>>>>    End_Procedure
68516>>>>>    
68516>>>>>    
68516>>>>>    Procedure OnExecute Variant vCommandBarControl
68518>>>>>        Send Delete of (focus(Self))
68519>>>>>    End_Procedure
68520>>>>>    
68520>>>>>    Function IsEnabled Returns Boolean
68522>>>>>        Boolean bEnabled
68522>>>>>        Get CanDelete of (Focus(Self)) to bEnabled
68523>>>>>        Function_Return bEnabled
68524>>>>>    End_Function
68525>>>>>    
68525>>>>>End_Class
68526>>>>>
68526>>>>>
68526>>>>>Class cCJCutMenuItem is a cCJMenuItem
68527>>>>>    
68527>>>>>    Procedure Construct_Object
68529>>>>>        Forward Send Construct_Object
68531>>>>>        Set psCaption   to C_$CaptionCut
68532>>>>>        Set psToolTip to C_$TooltipCut
68533>>>>>        Set psDescription to C_$DescCut
68534>>>>>        Set psImage to "actionCut.ico"
68535>>>>>        Set psShortcut to C_$Key_Ctrl_X
68536>>>>>        Set pbActiveUpdate to True
68537>>>>>        Set psCategory to C_$CategoryEdit
68538>>>>>    End_Procedure
68539>>>>>    
68539>>>>>    
68539>>>>>    Procedure OnExecute Variant vCommandBarControl
68541>>>>>        Send Cut of (focus(Self))
68542>>>>>    End_Procedure
68543>>>>>    
68543>>>>>    Function IsEnabled Returns Boolean
68545>>>>>        Boolean bEnabled
68545>>>>>        Get CanCut of (Focus(Self)) to bEnabled
68546>>>>>        Function_Return bEnabled
68547>>>>>    End_Function
68548>>>>>    
68548>>>>>End_Class
68549>>>>>
68549>>>>>
68549>>>>>Class cCJCopyMenuItem is a cCJMenuItem
68550>>>>>    
68550>>>>>    Procedure Construct_Object
68552>>>>>        Forward Send Construct_Object
68554>>>>>        Set psCaption   to C_$CaptionCopy
68555>>>>>        Set psToolTip to C_$ToolTipCopy
68556>>>>>        Set psDescription to C_$DescCopy
68557>>>>>        Set psImage to "actionCopy.ico"
68558>>>>>        Set psShortcut to C_$Key_Ctrl_C
68559>>>>>        Set pbActiveUpdate to True
68560>>>>>        Set psCategory to C_$CategoryEdit
68561>>>>>    End_Procedure
68562>>>>>    
68562>>>>>    
68562>>>>>    Procedure OnExecute Variant vCommandBarControl
68564>>>>>        Send Copy of (focus(Self))
68565>>>>>    End_Procedure
68566>>>>>    
68566>>>>>    Function IsEnabled Returns Boolean
68568>>>>>        Boolean bEnabled
68568>>>>>        Get CanCopy of (Focus(Self)) to bEnabled
68569>>>>>        Function_Return bEnabled
68570>>>>>    End_Function
68571>>>>>    
68571>>>>>End_Class
68572>>>>>
68572>>>>>
68572>>>>>Class cCJPasteMenuItem is a cCJMenuItem
68573>>>>>    
68573>>>>>    Procedure Construct_Object
68575>>>>>        Forward Send Construct_Object
68577>>>>>        Set psCaption   to C_$CaptionPaste
68578>>>>>        Set psToolTip to C_$ToolTipPaste
68579>>>>>        Set psDescription to C_$DescPaste
68580>>>>>        Set psImage to "actionPaste.ico"
68581>>>>>        Set pbActiveUpdate to True
68582>>>>>        Set psShortcut to C_$Key_Ctrl_V
68583>>>>>        Set psCategory to C_$CategoryEdit
68584>>>>>    End_Procedure
68585>>>>>    
68585>>>>>    
68585>>>>>    Procedure OnExecute Variant vCommandBarControl
68587>>>>>        Send Paste of (focus(Self))
68588>>>>>    End_Procedure
68589>>>>>    
68589>>>>>    Function IsEnabled Returns Boolean
68591>>>>>        Boolean bEnabled
68591>>>>>        Get CanPaste of (Focus(Self)) to bEnabled
68592>>>>>        Function_Return bEnabled
68593>>>>>    End_Function
68594>>>>>    
68594>>>>>End_Class
68595>>>>>
68595>>>>>Class cCJSelectAllMenuItem is a cCJMenuItem
68596>>>>>    
68596>>>>>    Procedure Construct_Object
68598>>>>>        Forward Send Construct_Object
68600>>>>>        Set psCaption   to C_$CaptionSelectAll
68601>>>>>        Set psToolTip to C_$ToolTipSelectAll
68602>>>>>        Set psDescription to C_$DescSelectAll
68603>>>>>        Set pbActiveUpdate to True
68604>>>>>        Set psShortcut to C_$Key_Ctrl_A
68605>>>>>        Set psCategory to C_$CategoryEdit
68606>>>>>    End_Procedure
68607>>>>>    
68607>>>>>    
68607>>>>>    Procedure OnExecute Variant vCommandBarControl
68609>>>>>        Send Select_All of (focus(Self))
68610>>>>>    End_Procedure
68611>>>>>    
68611>>>>>    Function IsEnabled Returns Boolean
68613>>>>>        Boolean bEnabled
68613>>>>>        Get CanSelect of (Focus(Self)) to bEnabled
68614>>>>>        Function_Return bEnabled
68615>>>>>    End_Function
68616>>>>>    
68616>>>>>End_Class
68617>>>>>
68617>>>>>
68617>>>>>Class cCJExitMenuItem is a cCJMenuItem
68618>>>>>    
68618>>>>>    Procedure Construct_Object
68620>>>>>        Forward Send Construct_Object
68622>>>>>        Set psCaption to C_$CaptionExit
68623>>>>>        Set psToolTip to C_$ToolTipExit
68624>>>>>        Set psDescription to C_$ToolTipExit
68625>>>>>        Set psShortcut to C_$Key_Alt_F4
68626>>>>>        Set psCategory to C_$CategoryFile
68627>>>>>    End_Procedure
68628>>>>>    
68628>>>>>    Procedure OnExecute Variant vCommandBarControl
68630>>>>>        Send Exit_Application of Desktop
68631>>>>>    End_Procedure
68632>>>>>    
68632>>>>>End_Class
68633>>>>>
68633>>>>>Class cCJHelpMenuItem is a cCJMenuItem
68634>>>>>    
68634>>>>>    Procedure Construct_Object
68636>>>>>        Forward Send Construct_Object
68638>>>>>        Set psCaption to C_$CaptionHelp
68639>>>>>        Set psDescription to C_$ToolTipHelp
68640>>>>>        Set psToolTip to C_$DescHelp
68641>>>>>        Set psImage to "ActionHelp.ico"
68642>>>>>        Set psShortcut to "F1"
68643>>>>>        Set psCategory to C_$CategoryHelp
68644>>>>>    End_Procedure
68645>>>>>    
68645>>>>>    Procedure OnExecute Variant vCommandBarControl
68647>>>>>        Send Help of (Focus(Self))
68648>>>>>    End_Procedure
68649>>>>>    
68649>>>>>End_Class
68650>>>>>
68650>>>>>Class cCJStatusbarMenuItem is a cCJMenuItem
68651>>>>>    
68651>>>>>    Procedure Construct_Object
68653>>>>>        Forward Send Construct_Object
68655>>>>>        Set psCaption to C_$CaptionAddStatusbar
68656>>>>>        Set psToolTip to C_$ToolTipAddStatusbar
68657>>>>>        Set psDescription to  C_$DescAddStatusbar
68658>>>>>        Set psCategory to C_$CategoryWindow
68659>>>>>    End_Procedure
68660>>>>>    
68660>>>>>    Procedure OnExecute Variant vCommandBarControl
68662>>>>>        Handle hoCommandBars hoClientArea
68662>>>>>        Get CommandBarSystemObject to hoCommandBars
68663>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68664>>>>>        If hoClientArea Begin
68666>>>>>            // the clientarea's parent panel has message
68666>>>>>            Send Toggle_StatusBar of (Parent(hoClientArea))
68667>>>>>        End
68667>>>>>>
68667>>>>>    End_Procedure
68668>>>>>    
68668>>>>>    Function IsChecked Returns Boolean
68670>>>>>        Boolean bOn
68670>>>>>        Handle hoCommandBars hoClientArea
68670>>>>>        Get CommandBarSystemObject to hoCommandBars
68671>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68672>>>>>        If hoClientArea Begin
68674>>>>>            // the clientarea's parent panel has message
68674>>>>>            Get StatusBar_State of (Parent(hoClientArea)) to bOn
68675>>>>>        End
68675>>>>>>
68675>>>>>        Function_Return bOn
68676>>>>>    End_Function
68677>>>>>End_Class
68678>>>>>
68678>>>>>Class cCJAutoArrangeIconsMenuItem is a cCJMenuItem
68679>>>>>    
68679>>>>>    Procedure Construct_Object
68681>>>>>        Forward Send Construct_Object
68683>>>>>        Set psCaption to C_$CaptionAutoArrangeIcons
68684>>>>>        Set psToolTip to C_$ToolTipAutoArrangeIcons
68685>>>>>        Set psDescription to C_$DescAutoArrangeIcons
68686>>>>>        Set psCategory to C_$CategoryWindow
68687>>>>>    End_Procedure
68688>>>>>    
68688>>>>>    Procedure OnExecute Variant vCommandBarControl
68690>>>>>        Handle hoCommandBars hoClientArea
68690>>>>>        Get CommandBarSystemObject to hoCommandBars
68691>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68692>>>>>        If hoClientArea Begin
68694>>>>>            // the clientarea's parent panel has message
68694>>>>>            Send Toggle_Auto_Arrange_Icons of (Parent(hoClientArea))
68695>>>>>        End
68695>>>>>>
68695>>>>>    End_Procedure
68696>>>>>    
68696>>>>>    Function IsChecked Returns Boolean
68698>>>>>        Boolean bOn
68698>>>>>        Handle hoCommandBars hoClientArea
68698>>>>>        Get CommandBarSystemObject to hoCommandBars
68699>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68700>>>>>        If hoClientArea Begin
68702>>>>>            // the clientarea's parent panel has message
68702>>>>>            Get Auto_Arrange_Icons_State of (Parent(hoClientArea)) to bOn
68703>>>>>        End
68703>>>>>>
68703>>>>>        Function_Return bOn
68704>>>>>    End_Function
68705>>>>>End_Class
68706>>>>>
68706>>>>>Class cCJRestoreMenusMenuItem is a cCJMenuItem
68707>>>>>    
68707>>>>>    Procedure Construct_Object
68709>>>>>        Forward Send Construct_Object
68711>>>>>        Set psCaption to C_$CaptionRestoreMenus
68712>>>>>        Set psToolTip to C_$ToolTipRestoreMenus
68713>>>>>        Set psDescription to C_$DescRestoreMenus
68714>>>>>        Set psCategory to C_$CategoryWindow
68715>>>>>    End_Procedure
68716>>>>>    
68716>>>>>    Procedure OnExecute Variant vCommandBarControl
68718>>>>>        Handle hoCommandBars
68718>>>>>        Get CommandBarSystemObject to hoCommandBars
68719>>>>>        Send RestoreLayout of hoCommandBars
68720>>>>>    End_Procedure
68721>>>>>    
68721>>>>>End_Class
68722>>>>>
68722>>>>>Class cCJCascadeMenuItem is a cCJMenuItem
68723>>>>>    
68723>>>>>    Procedure Construct_Object
68725>>>>>        Forward Send Construct_Object
68727>>>>>        Set psCaption to C_$CaptionCascade
68728>>>>>        Set psToolTip to C_$ToolTipCascade
68729>>>>>        Set psDescription to  C_$DescCascade
68730>>>>>        Set psImage to "ActionCascade.ico"
68731>>>>>        Set psCategory to C_$CategoryWindow
68732>>>>>    End_Procedure
68733>>>>>    
68733>>>>>    Procedure OnExecute Variant vCommandBarControl
68735>>>>>        Handle hoCommandBars hoClientArea
68735>>>>>        Get CommandBarSystemObject to hoCommandBars
68736>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68737>>>>>        If hoClientArea Begin
68739>>>>>            Send Cascade_Windows of hoClientArea
68740>>>>>        End
68740>>>>>>
68740>>>>>    End_Procedure
68741>>>>>End_Class
68742>>>>>
68742>>>>>Class cCJTileHorizontally is a cCJMenuItem
68743>>>>>    
68743>>>>>    Procedure Construct_Object
68745>>>>>        Forward Send Construct_Object
68747>>>>>        Set psCaption to C_$CaptionTileHorizontally
68748>>>>>        Set psToolTip to C_$ToolTipTileHorizontally
68749>>>>>        Set psDescription to  C_$DescTileHorizontally
68750>>>>>        Set psImage to "ActionTileHorizontally.ico"
68751>>>>>        Set psCategory to C_$CategoryWindow
68752>>>>>    End_Procedure
68753>>>>>    
68753>>>>>    Procedure OnExecute Variant vCommandBarControl
68755>>>>>        Handle hoCommandBars hoClientArea
68755>>>>>        Get CommandBarSystemObject to hoCommandBars
68756>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68757>>>>>        If hoClientArea Begin
68759>>>>>            Send Tile_Windows_Horizontal of hoClientArea
68760>>>>>        End
68760>>>>>>
68760>>>>>    End_Procedure
68761>>>>>End_Class
68762>>>>>
68762>>>>>Class cCJTileVertically is a cCJMenuItem
68763>>>>>    
68763>>>>>    Procedure Construct_Object
68765>>>>>        Forward Send Construct_Object
68767>>>>>        Set psCaption to C_$CaptionTileVertically
68768>>>>>        Set psToolTip to C_$ToolTipTileVertically
68769>>>>>        Set psDescription to  C_$DescTileVertically
68770>>>>>        Set psImage to "ActionTileVertically.ico"
68771>>>>>        Set psCategory to C_$CategoryWindow
68772>>>>>    End_Procedure
68773>>>>>    
68773>>>>>    Procedure OnExecute Variant vCommandBarControl
68775>>>>>        Handle hoCommandBars hoClientArea
68775>>>>>        Get CommandBarSystemObject to hoCommandBars
68776>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68777>>>>>        If hoClientArea Begin
68779>>>>>            Send Tile_Windows_Vertical of hoClientArea
68780>>>>>        End
68780>>>>>>
68780>>>>>    End_Procedure
68781>>>>>End_Class
68782>>>>>
68782>>>>>Class cCJMinimizeWindowsMenuItem is a cCJMenuItem
68783>>>>>    
68783>>>>>    Procedure Construct_Object
68785>>>>>        Forward Send Construct_Object
68787>>>>>        Set psCaption to C_$CaptionMinimizeWindows
68788>>>>>        Set psToolTip to C_$ToolTipMinimizeWindows
68789>>>>>        Set psDescription to  C_$DescMinimizeWindows
68790>>>>>        Set psCategory to C_$CategoryWindow
68791>>>>>    End_Procedure
68792>>>>>    
68792>>>>>    Procedure OnExecute Variant vCommandBarControl
68794>>>>>        Handle hoCommandBars hoClientArea
68794>>>>>        Get CommandBarSystemObject to hoCommandBars
68795>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68796>>>>>        If hoClientArea Begin
68798>>>>>            // the clientarea's parent panel has message
68798>>>>>            Send Minimize_all_Windows of (Parent(hoClientArea))
68799>>>>>        End
68799>>>>>>
68799>>>>>    End_Procedure
68800>>>>>End_Class
68801>>>>>
68801>>>>>
68801>>>>>Class cCJRestoreWindowsMenuItem is a cCJMenuItem
68802>>>>>    
68802>>>>>    Procedure Construct_Object
68804>>>>>        Forward Send Construct_Object
68806>>>>>        Set psCaption to C_$CaptionRestoreWindows
68807>>>>>        Set psToolTip to C_$ToolTipRestoreWindows
68808>>>>>        Set psDescription to  C_$DescRestoreWindows
68809>>>>>        Set psCategory to C_$CategoryWindow
68810>>>>>    End_Procedure
68811>>>>>    
68811>>>>>    Procedure OnExecute Variant vCommandBarControl
68813>>>>>        Handle hoCommandBars hoClientArea
68813>>>>>        Get CommandBarSystemObject to hoCommandBars
68814>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68815>>>>>        If hoClientArea Begin
68817>>>>>            // the clientarea's parent panel has message
68817>>>>>            Send Restore_all_Windows of (Parent(hoClientArea))
68818>>>>>        End
68818>>>>>>
68818>>>>>    End_Procedure
68819>>>>>End_Class
68820>>>>>
68820>>>>>Class cCJArrangeIconsMenuItem is a cCJMenuItem
68821>>>>>    
68821>>>>>    Procedure Construct_Object
68823>>>>>        Forward Send Construct_Object
68825>>>>>        Set psCaption to C_$CaptionArrangeIcons
68826>>>>>        Set psToolTip to C_$ToolTipArrangeIcons
68827>>>>>        Set psDescription to  C_$DescArrangeIcons
68828>>>>>        Set psCategory to C_$CategoryWindow
68829>>>>>    End_Procedure
68830>>>>>    
68830>>>>>    Procedure OnExecute Variant vCommandBarControl
68832>>>>>        Handle hoCommandBars hoClientArea
68832>>>>>        Get CommandBarSystemObject to hoCommandBars
68833>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68834>>>>>        If hoClientArea Begin
68836>>>>>            Send Arrange_Icons of hoClientArea
68837>>>>>        End
68837>>>>>>
68837>>>>>    End_Procedure
68838>>>>>    
68838>>>>>End_Class
68839>>>Use cCJAboutMenuItem.pkg
Including file: cCJAboutMenuItem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJAboutMenuItem.pkg)
68839>>>>>Use cCJCommandBarSystem.pkg
68839>>>>>Use LanguageText.pkg
68839>>>>>
68839>>>>>// It is expected that if you use this class that you provide an about object that is
68839>>>>>// activated via activate_about such as DfAbout.pkg. We don't use this for you automatically
68839>>>>>// because you may wish to create your own custom about package.
68839>>>>>
68839>>>>>Class cCJAboutMenuItem is a cCJMenuItem    
68840>>>>>
68840>>>>>    Procedure Construct_Object
68842>>>>>        Forward Send Construct_Object
68844>>>>>        Set psCaption to C_$CaptionAbout
68845>>>>>        Set psDescription to C_$ToolTipAbout
68846>>>>>        Set psToolTip to C_$DescAbout
68847>>>>>        Set psImage to "ActionAbout.ico"
68848>>>>>        Set psCategory to C_$CategoryHelp
68849>>>>>    End_Procedure
68850>>>>>    
68850>>>>>    Procedure OnExecute Variant vCommandBarControl
68852>>>>>        Handle hoCommandBars hoClientArea
68852>>>>>        Get CommandBarSystemObject to hoCommandBars
68853>>>>>        Get ClientAreaObject of hoCommandBars to hoClientArea
68854>>>>>        If hoClientArea Begin
68856>>>>>            Send Activate_About of hoClientArea
68857>>>>>        End
68857>>>>>>
68857>>>>>    End_Procedure
68858>>>>>
68858>>>>>End_Class
68859>>>>>
68859>>>>>
68859>>>Use cCJDeoMenuItemClasses.pkg
68859>>>Use cCJMDIWindowsMenuItem.pkg
Including file: cCJMDIWindowsMenuItem.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCJMDIWindowsMenuItem.pkg)
68859>>>>>Use cCJCommandBarSystem.pkg
68859>>>>>
68859>>>>>Register_Function Client_ID Returns Integer
68859>>>>>
68859>>>>>// only used by cCJMDIWIndowsMenuItem
68859>>>>>Class cCJMDIWindowItem is a cCJMenuItem
68860>>>>>    
68860>>>>>    Procedure Construct_Object
68862>>>>>        Forward Send Construct_Object
68864>>>>>        Property Handle phWindow 0 // object id of view
68865>>>>>        Set pbControlFlagNoMovable to True
68866>>>>>        Set pbActiveUpdate to True
68867>>>>>    End_Procedure
68868>>>>>    
68868>>>>>    Procedure OnExecute Variant vCommandBarControl
68870>>>>>        Handle hWindow
68870>>>>>        Get phWindow to hWindow
68871>>>>>        Send Activate_View of hWindow
68872>>>>>    End_Procedure
68873>>>>>    
68873>>>>>End_Class
68874>>>>>
68874>>>>>
68874>>>>>Class cCJMDIWindowsMenuItem is a cCJMenuItem
68875>>>>>    
68875>>>>>    Procedure Construct_Object
68877>>>>>        Forward Send Construct_Object
68879>>>>>        Property Handle[] phArrayOfWindows
68880>>>>>        Set peControlType to xtpControlPopup
68881>>>>>        Set psCategory to C_$CategoryWindow
68882>>>>>    End_Procedure
68883>>>>>    
68883>>>>>    // This adds MDI windows to the existing menu items.
68883>>>>>    // This removes any existing windows menus and always adds a new set to the end
68883>>>>>    
68883>>>>>    Procedure OnPopupInit Variant vCommandBarControl Handle hCommandBarControls
68885>>>>>        Handle  hClientArea hView
68885>>>>>        String  sLabel
68885>>>>>        Integer i iWindows
68885>>>>>        Handle[] hArrayOfWindows
68886>>>>>        Variant vItem
68886>>>>>        
68886>>>>>        // delete all windows actions and menu items. Assume we have an array of DF action objects for the windows
68886>>>>>        // also assume that destroying an action removes all menu instances of that action
68886>>>>>        Get phArrayOfWindows to hArrayOfWindows
68887>>>>>        Move (SizeOfArray(hArrayOfWindows)) to iWindows
68888>>>>>        For i from 0 to (iWindows-1)
68894>>>>>>
68894>>>>>            Send Destroy of hArrayOfWindows[i] // assume this removes all menu items of this action
68895>>>>>        Loop
68896>>>>>>
68896>>>>>        Move (ResizeArray(hArrayOfWindows,0)) to hArrayOfWindows
68897>>>>>        
68897>>>>>        // Add all views to this menu. Create the action and add the item
68897>>>>>        Move 0 to i
68898>>>>>        Get Client_Id to hClientArea // object id of client area
68899>>>>>        If (hClientArea > 0) Begin
68901>>>>>            Get Next_Mdi_Dialog of hClientArea True to hView // find first view
68902>>>>>            While (hView <> 0)
68906>>>>>                If (Active_State(hView)) Begin
68908>>>>>                    // create the action
68908>>>>>                    Get Create U_cCJMDIWindowItem to hArrayOfWindows[i]
68909>>>>>                    Get Label of hView to sLabel // caption bar (name) of view
68910>>>>>                    Set psCaption of hArrayOfWindows[i] to sLabel
68911>>>>>                    Set psDescription of hArrayOfWindows[i] to ("Make this view (" - trim(sLabel) - ") the active window.")
68912>>>>>                    If (current_scope(desktop)=hView and View_mode(hView)<>VIEWMODE_ICONIZE) Begin
68914>>>>>                        Set pbChecked of hArrayOfWindows[i] to True
68915>>>>>                    End
68915>>>>>>
68915>>>>>                    Set phWindow of hArrayOfWindows[i] to hView // used by custom OnExecute
68916>>>>>                    If (i=0) Begin
68918>>>>>                        Set pbControlBeginGroup of hArrayOfWindows[i] to True
68919>>>>>                    End
68919>>>>>>
68919>>>>>                    // Create a menu item for this action
68919>>>>>                    Get AddDynamicControl of hArrayOfWindows[i] hCommandBarControls to vItem
68920>>>>>                    Increment i
68921>>>>>                End
68921>>>>>>
68921>>>>>                Get Next_Mdi_Dialog of hClientArea False to hView // find next
68922>>>>>            Loop
68923>>>>>>
68923>>>>>        End
68923>>>>>>
68923>>>>>        
68923>>>>>        Set phArrayOfWindows to hArrayOfWindows
68924>>>>>        
68924>>>>>    End_Procedure
68925>>>>>    
68925>>>>>End_Class
68926>
68926>Object oHtmlHelp is a cHtmlHelp
68928>End_Object
68929>
68929>Object oApplication is a cApplication
68931>    Set peHelpType to htHtmlHelp
68932>
68932>    Object oConnection is a cConnection
68934>        Use LoginEncryption.pkg
Including file: LoginEncryption.pkg    (C:\Program Files\DataFlex 20.0\Pkg\LoginEncryption.pkg)
68934>>>Use cLoginEncryption.pkg
Including file: cLoginEncryption.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cLoginEncryption.pkg)
68934>>>>>Use cCryptographerEx.pkg
Including file: cCryptographerEx.pkg    (C:\Program Files\DataFlex 20.0\Pkg\cCryptographerEx.pkg)
68934>>>>>>>Use VdfBase.pkg
68934>>>>>>>
68934>>>>>>>Use CryptographerConstants.pkg
Including file: CryptographerConstants.pkg    (C:\Program Files\DataFlex 20.0\Pkg\CryptographerConstants.pkg)
68934>>>>>>>>>//   Author  : Ulbe Stellema
68934>>>>>>>>>// Algorithm classes
68934>>>>>>>>>Define ALG_CLASS_ANY                    for |CI$00000000 // (0)
68934>>>>>>>>>Define ALG_CLASS_SIGNATURE              for |CI$00002000 // (1 << 13)
68934>>>>>>>>>Define ALG_CLASS_MSG_ENCRYPT            for |CI$00004000 // (2 << 13)
68934>>>>>>>>>Define ALG_CLASS_DATA_ENCRYPT           for |CI$00006000 // (3 << 13)
68934>>>>>>>>>Define ALG_CLASS_HASH                   for |CI$00008000 // (4 << 13)
68934>>>>>>>>>Define ALG_CLASS_KEY_EXCHANGE           for |CI$0000A000 // (5 << 13)
68934>>>>>>>>>Define ALG_CLASS_ALL                    for |CI$0000E000 // (7 << 13)
68934>>>>>>>>>
68934>>>>>>>>>// Algorithm types
68934>>>>>>>>>Define ALG_TYPE_ANY                     for |CI$00000000 // (0)
68934>>>>>>>>>Define ALG_TYPE_DSS                     for |CI$00000200 // (1 << 9)
68934>>>>>>>>>Define ALG_TYPE_RSA                     for |CI$00000400 // (2 << 9)
68934>>>>>>>>>Define ALG_TYPE_BLOCK                   for |CI$00000600 // (3 << 9)
68934>>>>>>>>>Define ALG_TYPE_STREAM                  for |CI$00000800 // (4 << 9)
68934>>>>>>>>>Define ALG_TYPE_DH                      for |CI$00000A00 // (5 << 9)
68934>>>>>>>>>Define ALG_TYPE_SECURECHANNEL           for |CI$00000C00 // (6 << 9)
68934>>>>>>>>>
68934>>>>>>>>>// Generic sub-ids
68934>>>>>>>>>Define ALG_SID_ANY                      for |CI$00000000 // (0)
68934>>>>>>>>>
68934>>>>>>>>>// RSA sub-ids
68934>>>>>>>>>Define ALG_SID_RSA_ANY                  for 0
68934>>>>>>>>>Define ALG_SID_RSA_PKCS                 for 1
68934>>>>>>>>>Define ALG_SID_RSA_MSATWORK             for 2
68934>>>>>>>>>Define ALG_SID_RSA_ENTRUST              for 3
68934>>>>>>>>>Define ALG_SID_RSA_PGP                  for 4
68934>>>>>>>>>
68934>>>>>>>>>// DSS sub-ids
68934>>>>>>>>>Define ALG_SID_DSS_ANY                  for 0
68934>>>>>>>>>Define ALG_SID_DSS_PKCS                 for 1
68934>>>>>>>>>Define ALG_SID_DSS_DMS                  for 2
68934>>>>>>>>>
68934>>>>>>>>>// DES sub_ids
68934>>>>>>>>>Define ALG_SID_DES                      for 1
68934>>>>>>>>>Define ALG_SID_3DES                     for 3
68934>>>>>>>>>Define ALG_SID_DESX                     for 4
68934>>>>>>>>>Define ALG_SID_IDEA                     for 5
68934>>>>>>>>>Define ALG_SID_CAST                     for 6
68934>>>>>>>>>Define ALG_SID_SAFERSK64                for 7
68934>>>>>>>>>Define ALG_SID_SAFERSK128               for 8
68934>>>>>>>>>Define ALG_SID_3DES_112                 for 9
68934>>>>>>>>>Define ALG_SID_CYLINK_MEK               for 12
68934>>>>>>>>>Define ALG_SID_RC5                      for 13
68934>>>>>>>>>Define ALG_SID_AES_128                  for 14
68934>>>>>>>>>Define ALG_SID_AES_192                  for 15
68934>>>>>>>>>Define ALG_SID_AES_256                  for 16
68934>>>>>>>>>Define ALG_SID_AES                      for 17
68934>>>>>>>>>
68934>>>>>>>>>// Fortezza sub-ids
68934>>>>>>>>>Define ALG_SID_SKIPJACK                 for 10
68934>>>>>>>>>Define ALG_SID_TEK                      for 11
68934>>>>>>>>>
68934>>>>>>>>>// RC2 sub-ids
68934>>>>>>>>>Define ALG_SID_RC2                      for 2
68934>>>>>>>>>
68934>>>>>>>>>// Stream cipher sub-ids
68934>>>>>>>>>Define ALG_SID_RC4                      for 1
68934>>>>>>>>>Define ALG_SID_SEAL                     for 2
68934>>>>>>>>>
68934>>>>>>>>>// Diffie-Hellman sub-ids
68934>>>>>>>>>Define ALG_SID_DH_SANDF                 for 1
68934>>>>>>>>>Define ALG_SID_DH_EPHEM                 for 2
68934>>>>>>>>>Define ALG_SID_AGREED_KEY_ANY           for 3
68934>>>>>>>>>Define ALG_SID_KEA                      for 4
68934>>>>>>>>>
68934>>>>>>>>>// Hash sub ids
68934>>>>>>>>>Define ALG_SID_MD2                      for 1
68934>>>>>>>>>Define ALG_SID_MD4                      for 2
68934>>>>>>>>>Define ALG_SID_MD5                      for 3
68934>>>>>>>>>Define ALG_SID_SHA                      for 4
68934>>>>>>>>>Define ALG_SID_SHA1                     for 4
68934>>>>>>>>>Define ALG_SID_MAC                      for 5
68934>>>>>>>>>Define ALG_SID_RIPEMD                   for 6
68934>>>>>>>>>Define ALG_SID_RIPEMD160                for 7
68934>>>>>>>>>Define ALG_SID_SSL3SHAMD5               for 8
68934>>>>>>>>>Define ALG_SID_HMAC                     for 9
68934>>>>>>>>>Define ALG_SID_TLS1PRF                  for 10
68934>>>>>>>>>Define ALG_SID_HASH_REPLACE_OWF         for 11
68934>>>>>>>>>Define ALG_SID_SHA_256                  for 12
68934>>>>>>>>>Define ALG_SID_SHA_384                  for 13
68934>>>>>>>>>Define ALG_SID_SHA_512                  for 14
68934>>>>>>>>>
68934>>>>>>>>>// secure channel sub ids
68934>>>>>>>>>Define ALG_SID_SSL3_MASTER              for 1
68934>>>>>>>>>Define ALG_SID_SCHANNEL_MASTER_HASH     for 2
68934>>>>>>>>>Define ALG_SID_SCHANNEL_MAC_KEY         for 3
68934>>>>>>>>>Define ALG_SID_PCT1_MASTER              for 4
68934>>>>>>>>>Define ALG_SID_SSL2_MASTER              for 5
68934>>>>>>>>>Define ALG_SID_TLS1_MASTER              for 6
68934>>>>>>>>>Define ALG_SID_SCHANNEL_ENC_KEY         for 7
68934>>>>>>>>>
68934>>>>>>>>>// algorithm identifier definitions
68934>>>>>>>>>Define CALG_MD2                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD2)
68934>>>>>>>>>Define CALG_MD4                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD4)
68934>>>>>>>>>Define CALG_MD5                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MD5)
68934>>>>>>>>>Define CALG_SHA                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA)
68934>>>>>>>>>Define CALG_SHA1                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA1)
68934>>>>>>>>>Define CALG_MAC                         for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_MAC)
68934>>>>>>>>>Define CALG_RSA_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
68934>>>>>>>>>Define CALG_DSS_SIGN                    for (ALG_CLASS_SIGNATURE ior ALG_TYPE_DSS ior ALG_SID_DSS_ANY)
68934>>>>>>>>>Define CALG_NO_SIGN                     for (ALG_CLASS_SIGNATURE ior ALG_TYPE_ANY ior ALG_SID_ANY)
68934>>>>>>>>>Define CALG_RSA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_RSA ior ALG_SID_RSA_ANY)
68934>>>>>>>>>Define CALG_DES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DES)
68934>>>>>>>>>Define CALG_3DES_112                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES_112)
68934>>>>>>>>>Define CALG_3DES                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_3DES)
68934>>>>>>>>>Define CALG_DESX                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_DESX)
68934>>>>>>>>>Define CALG_RC2                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC2)
68934>>>>>>>>>Define CALG_RC4                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_RC4)
68934>>>>>>>>>Define CALG_SEAL                        for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_STREAM ior ALG_SID_SEAL)
68934>>>>>>>>>Define CALG_DH_SF                       for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_SANDF)
68934>>>>>>>>>Define CALG_DH_EPHEM                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_DH_EPHEM)
68934>>>>>>>>>Define CALG_AGREEDKEY_ANY               for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_AGREED_KEY_ANY)
68934>>>>>>>>>Define CALG_KEA_KEYX                    for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_DH ior ALG_SID_KEA)
68934>>>>>>>>>Define CALG_HUGHES_MD5                  for (ALG_CLASS_KEY_EXCHANGE ior ALG_TYPE_ANY ior ALG_SID_MD5)
68934>>>>>>>>>Define CALG_SKIPJACK                    for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_SKIPJACK)
68934>>>>>>>>>Define CALG_TEK                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_TEK)
68934>>>>>>>>>Define CALG_CYLINK_MEK                  for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_CYLINK_MEK)
68934>>>>>>>>>Define CALG_SSL3_SHAMD5                 for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SSL3SHAMD5)
68934>>>>>>>>>Define CALG_SSL3_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL3_MASTER)
68934>>>>>>>>>Define CALG_SCHANNEL_MASTER_HASH        for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MASTER_HASH)
68934>>>>>>>>>Define CALG_SCHANNEL_MAC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_MAC_KEY)
68934>>>>>>>>>Define CALG_SCHANNEL_ENC_KEY            for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SCHANNEL_ENC_KEY)
68934>>>>>>>>>Define CALG_PCT1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_PCT1_MASTER)
68934>>>>>>>>>Define CALG_SSL2_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_SSL2_MASTER)
68934>>>>>>>>>Define CALG_TLS1_MASTER                 for (ALG_CLASS_MSG_ENCRYPT ior ALG_TYPE_SECURECHANNEL ior ALG_SID_TLS1_MASTER)
68934>>>>>>>>>Define CALG_RC5                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_RC5)
68934>>>>>>>>>Define CALG_HMAC                        for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HMAC)
68934>>>>>>>>>Define CALG_TLS1PRF                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_TLS1PRF)
68934>>>>>>>>>Define CALG_HASH_REPLACE_OWF            for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_HASH_REPLACE_OWF)
68934>>>>>>>>>Define CALG_AES_128                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_128)
68934>>>>>>>>>Define CALG_AES_192                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_192)
68934>>>>>>>>>Define CALG_AES_256                     for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES_256)
68934>>>>>>>>>Define CALG_AES                         for (ALG_CLASS_DATA_ENCRYPT ior ALG_TYPE_BLOCK ior ALG_SID_AES)
68934>>>>>>>>>Define CALG_SHA_256                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_256)
68934>>>>>>>>>Define CALG_SHA_384                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_384)
68934>>>>>>>>>Define CALG_SHA_512                     for (ALG_CLASS_HASH ior ALG_TYPE_ANY ior ALG_SID_SHA_512)
68934>>>>>>>>>
68934>>>>>>>>>// Providers
68934>>>>>>>>>Define MS_DEF_PROV                      for "Microsoft Base Cryptographic Provider v1.0"
68934>>>>>>>>>Define MS_ENHANCED_PROV                 for "Microsoft Enhanced Cryptographic Provider v1.0"
68934>>>>>>>>>Define MS_STRONG_PROV                   for "Microsoft Strong Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_RSA_SIG_PROV              for "Microsoft RSA Signature Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_RSA_SCHANNEL_PROV         for "Microsoft RSA SChannel Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DSS_PROV                  for "Microsoft Base DSS Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DSS_DH_PROV               for "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
68934>>>>>>>>>Define MS_ENH_DSS_DH_PROV               for "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
68934>>>>>>>>>Define MS_DEF_DH_SCHANNEL_PROV          for "Microsoft DH SChannel Cryptographic Provider"
68934>>>>>>>>>Define MS_SCARD_PROV                    for "Microsoft Base Smart Card Crypto Provider"
68934>>>>>>>>>Define MS_ENH_RSA_AES_PROV              for "Microsoft Enhanced RSA and AES Cryptographic Provider"
68934>>>>>>>>>
68934>>>>>>>>>// dwFlags definitions for CryptAcquireContext
68934>>>>>>>>>Define CRYPT_VERIFYCONTEXT              for |CI$F0000000
68934>>>>>>>>>Define CRYPT_NEWKEYSET                  for |CI$00000008
68934>>>>>>>>>Define CRYPT_DELETEKEYSET               for |CI$00000010
68934>>>>>>>>>Define CRYPT_MACHINE_KEYSET             for |CI$00000020
68934>>>>>>>>>Define CRYPT_SILENT                     for |CI$00000040
68934>>>>>>>>>
68934>>>>>>>>>// dwFlag definitions for CryptGenKey
68934>>>>>>>>>Define CRYPT_EXPORTABLE                 for |CI$00000001
68934>>>>>>>>>Define CRYPT_USER_PROTECTED             for |CI$00000002
68934>>>>>>>>>Define CRYPT_CREATE_SALT                for |CI$00000004
68934>>>>>>>>>Define CRYPT_UPDATE_KEY                 for |CI$00000008
68934>>>>>>>>>Define CRYPT_NO_SALT                    for |CI$00000010
68934>>>>>>>>>Define CRYPT_PREGEN                     for |CI$00000040
68934>>>>>>>>>Define CRYPT_RECIPIENT                  for |CI$00000010
68934>>>>>>>>>Define CRYPT_INITIATOR                  for |CI$00000040
68934>>>>>>>>>Define CRYPT_ONLINE                     for |CI$00000080
68934>>>>>>>>>Define CRYPT_SF                         for |CI$00000100
68934>>>>>>>>>Define CRYPT_CREATE_IV                  for |CI$00000200
68934>>>>>>>>>Define CRYPT_KEK                        for |CI$00000400
68934>>>>>>>>>Define CRYPT_DATA_KEY                   for |CI$00000800
68934>>>>>>>>>Define CRYPT_VOLATILE                   for |CI$00001000
68934>>>>>>>>>Define CRYPT_SGCKEY                     for |CI$00002000
68934>>>>>>>>>Define CRYPT_ARCHIVABLE                 for |CI$00004000
68934>>>>>>>>>
68934>>>>>>>>>// Provider types
68934>>>>>>>>>Define PROV_RSA_FULL                    for 1
68934>>>>>>>>>Define PROV_RSA_SIG                     for 2
68934>>>>>>>>>Define PROV_DSS                         for 3
68934>>>>>>>>>Define PROV_FORTEZZA                    for 4
68934>>>>>>>>>Define PROV_MS_EXCHANGE                 for 5
68934>>>>>>>>>Define PROV_SSL                         for 6
68934>>>>>>>>>Define PROV_RSA_SCHANNEL                for 12
68934>>>>>>>>>Define PROV_DSS_DH                      for 13
68934>>>>>>>>>Define PROV_EC_ECDSA_SIG                for 14
68934>>>>>>>>>Define PROV_EC_ECNRA_SIG                for 15
68934>>>>>>>>>Define PROV_EC_ECDSA_FULL               for 16
68934>>>>>>>>>Define PROV_EC_ECNRA_FULL               for 17
68934>>>>>>>>>Define PROV_DH_SCHANNEL                 for 18
68934>>>>>>>>>Define PROV_SPYRUS_LYNKS                for 20
68934>>>>>>>>>Define PROV_RNG                         for 21
68934>>>>>>>>>Define PROV_INTEL_SEC                   for 22
68934>>>>>>>>>Define PROV_REPLACE_OWF                 for 23
68934>>>>>>>>>Define PROV_RSA_AES                     for 24
68934>>>>>>>>>
68934>>>>>>>>>// KP_MODE
68934>>>>>>>>>// KP_MODE
68934>>>>>>>>>Define CRYPT_MODE_CBC                   for 1       // Cipher block chaining
68934>>>>>>>>>Define CRYPT_MODE_ECB                   for 2       // Electronic code book
68934>>>>>>>>>Define CRYPT_MODE_OFB                   for 3       // Output feedback mode
68934>>>>>>>>>Define CRYPT_MODE_CFB                   for 4       // Cipher feedback mode
68934>>>>>>>>>Define CRYPT_MODE_CTS                   for 5       // Ciphertext stealing mode
68934>>>>>>>>>Define CRYPT_MODE_CBCI                  for 6       // ANSI CBC Interleaved
68934>>>>>>>>>Define CRYPT_MODE_CFBP                  for 7       // ANSI CFB Pipelined
68934>>>>>>>>>Define CRYPT_MODE_OFBP                  for 8       // ANSI OFB Pipelined
68934>>>>>>>>>Define CRYPT_MODE_CBCOFM                for 9       // ANSI CBC + OF Masking
68934>>>>>>>>>Define CRYPT_MODE_CBCOFMI               for 10      // ANSI CBC + OFM Interleaved
68934>>>>>>>>>
68934>>>>>>>>>// dwParam definitions for CryptGetKeyParam
68934>>>>>>>>>Define KP_IV                            for 1       // Initialization vector
68934>>>>>>>>>Define KP_SALT                          for 2       // Salt value
68934>>>>>>>>>Define KP_PADDING                       for 3       // Padding values
68934>>>>>>>>>Define KP_MODE                          for 4       // Mode of the cipher
68934>>>>>>>>>Define KP_MODE_BITS                     for 5       // Number of bits to feedback
68934>>>>>>>>>Define KP_PERMISSIONS                   for 6       // Key permissions DWORD
68934>>>>>>>>>Define KP_ALGID                         for 7       // Key algorithm
68934>>>>>>>>>Define KP_BLOCKLEN                      for 8       // Block size of the cipher
68934>>>>>>>>>Define KP_KEYLEN                        for 9       // Length of key in bits
68934>>>>>>>>>Define KP_SALT_EX                       for 10      // Length of salt in bytes
68934>>>>>>>>>Define KP_P                             for 11      // DSS/Diffie-Hellman P value
68934>>>>>>>>>Define KP_G                             for 12      // DSS/Diffie-Hellman G value
68934>>>>>>>>>Define KP_Q                             for 13      // DSS Q value
68934>>>>>>>>>Define KP_X                             for 14      // Diffie-Hellman X value
68934>>>>>>>>>Define KP_Y                             for 15      // Y value
68934>>>>>>>>>Define KP_RA                            for 16      // Fortezza RA value
68934>>>>>>>>>Define KP_RB                            for 17      // Fortezza RB value
68934>>>>>>>>>Define KP_INFO                          for 18      // for putting information into an RSA envelope
68934>>>>>>>>>Define KP_EFFECTIVE_KEYLEN              for 19      // setting and getting RC2 effective key length
68934>>>>>>>>>Define KP_SCHANNEL_ALG                  for 20      // for setting the Secure Channel algorithms
68934>>>>>>>>>Define KP_CLIENT_RANDOM                 for 21      // for setting the Secure Channel client random data
68934>>>>>>>>>Define KP_SERVER_RANDOM                 for 22      // for setting the Secure Channel server random data
68934>>>>>>>>>Define KP_RP                            for 23
68934>>>>>>>>>Define KP_PRECOMP_MD5                   for 24
68934>>>>>>>>>Define KP_PRECOMP_SHA                   for 25
68934>>>>>>>>>Define KP_CERTIFICATE                   for 26      // for setting Secure Channel certificate data (PCT1)
68934>>>>>>>>>Define KP_CLEAR_KEY                     for 27      // for setting Secure Channel clear key data (PCT1)
68934>>>>>>>>>Define KP_PUB_EX_LEN                    for 28
68934>>>>>>>>>Define KP_PUB_EX_VAL                    for 29
68934>>>>>>>>>Define KP_KEYVAL                        for 30
68934>>>>>>>>>Define KP_ADMIN_PIN                     for 31
68934>>>>>>>>>Define KP_KEYEXCHANGE_PIN               for 32
68934>>>>>>>>>Define KP_SIGNATURE_PIN                 for 33
68934>>>>>>>>>Define KP_PREHASH                       for 34
68934>>>>>>>>>Define KP_ROUNDS                        for 35
68934>>>>>>>>>Define KP_OAEP_PARAMS                   for 36      // for setting OAEP params on RSA keys
68934>>>>>>>>>Define KP_CMS_KEY_INFO                  for 37
68934>>>>>>>>>Define KP_CMS_DH_KEY_INFO               for 38
68934>>>>>>>>>Define KP_PUB_PARAMS                    for 39      // for setting public parameters
68934>>>>>>>>>Define KP_VERIFY_PARAMS                 for 40      // for verifying DSA and DH parameters
68934>>>>>>>>>Define KP_HIGHEST_VERSION               for 41      // for TLS protocol version setting
68934>>>>>>>>>Define KP_GET_USE_COUNT                 for 42      // for use with PP_CRYPT_COUNT_KEY_USE contexts
68934>>>>>>>>>
68934>>>>>>>>>// dwParam definitions for CryptGetHashParam
68934>>>>>>>>>Define HP_ALGID                         for |CI$0001  // Hash algorithm
68934>>>>>>>>>Define HP_HASHVAL                       for |CI$0002  // Hash value
68934>>>>>>>>>Define HP_HASHSIZE                      for |CI$0004  // Hash value size
68934>>>>>>>>>Define HP_HMAC_INFO                     for |CI$0005  // information for creating an HMA
68934>>>>>>>>>
68934>>>>>>>>>// key BLOB types
68934>>>>>>>>>Define KEYSTATEBLOB                     for |CI$0C
68934>>>>>>>>>Define OPAQUEKEYBLOB                    for |CI$09
68934>>>>>>>>>Define PLAINTEXTKEYBLOB                 for |CI$08
68934>>>>>>>>>Define PRIVATEKEYBLOB                   for |CI$07
68934>>>>>>>>>Define PUBLICKEYBLOB                    for |CI$06
68934>>>>>>>>>Define PUBLICKEYBLOBEX                  for |CI$0A
68934>>>>>>>>>Define SIMPLEBLOB                       for |CI$01
68934>>>>>>>>>Define SYMMETRICWRAPKEYBLOB             for |CI$0B
68934>>>>>>>>>
68934>>>>>>>>>Define CUR_BLOB_VERSION                 for 2
68934>>>>>>>>>
68934>>>>>>>>>// KP_PADDING
68934>>>>>>>>>Define PKCS5_PADDING                    for 1       // PKCS 5 (sec 6.2) padding method
68934>>>>>>>>>Define RANDOM_PADDING                   for 2
68934>>>>>>>>>Define ZERO_PADDING                     for 3
68934>>>>>>>>>
68934>>>>>>>>>//  Structure cryptimportkey
68934>>>>>>>>>Struct PUBLICKEYSTRUC
68934>>>>>>>>>    UChar    bType
68934>>>>>>>>>    UChar    bVersion
68934>>>>>>>>>    UShort   reserved
68934>>>>>>>>>    UInteger aiKeyAlg
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct tPLAINTEXTKEYBLOB
68934>>>>>>>>>    PUBLICKEYSTRUC hdr
68934>>>>>>>>>    PUBLICKEYSTRUC hdr
68934>>>>>>>>>    UInteger       dwKeySize
68934>>>>>>>>>//    UChar[]        rgbKeyData
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>//  Structure for specifying the inner and outer strings when calculating HMAC hash (use with CryptSetHashParam)
68934>>>>>>>>>Struct HMAC_INFO
68934>>>>>>>>>    UInteger HashAlgid
68934>>>>>>>>>    Pointer pbInnerString
68934>>>>>>>>>    DWord cbInnerString
68934>>>>>>>>>    Pointer pbOuterString
68934>>>>>>>>>    DWord cbOuterString
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct BLOBHEADER
68934>>>>>>>>>    UChar   bType
68934>>>>>>>>>    UChar   bVersion
68934>>>>>>>>>    Short   reserved
68934>>>>>>>>>    Integer aiKeyAlg
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>Struct CryptoBlob
68934>>>>>>>>>    BLOBHEADER  header
68934>>>>>>>>>    BLOBHEADER  header
68934>>>>>>>>>    Integer     cbKeySize
68934>>>>>>>>>    UChar[32]   rgbKeyData
68934>>>>>>>>>End_Struct
68934>>>>>>>>>
68934>>>>>>>>>
68934>>>>>>>>>// Note: lpContainer and lpProvider refer to WString types.
68934>>>>>>>>>External_Function CryptAcquireContextW "CryptAcquireContextW" advapi32.dll ;    Pointer phProv ;    Pointer lpContainer ;    Pointer lpProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
68935>>>>>>>>>
68935>>>>>>>>>// Compatibilty wrapper Function CryptAcquireContext
68935>>>>>>>>>Function CryptAcquireContext Global ;    Pointer phProv ;    Pointer szContainer ;    Pointer szProvider ;    Integer dwProvType ;    Integer dwFlags ;    Returns Boolean
68937>>>>>>>>>    
68937>>>>>>>>>    Boolean bResult
68937>>>>>>>>>    UWide   uwContainer uwProvider
68937>>>>>>>>>    UWide   uwContainer uwProvider
68937>>>>>>>>>
68937>>>>>>>>>    Send StringToWide szContainer (&uwContainer)
68938>>>>>>>>>    Send StringToWide szProvider (&uwProvider)
68939>>>>>>>>>    
68939>>>>>>>>>    Move (CryptAcquireContextW (phProv, uwContainer.lpUText, uwProvider.lpUText, dwProvType, dwFlags)) to bResult                   
68940>>>>>>>>>
68940>>>>>>>>>    Function_Return bResult
68941>>>>>>>>>End_Function
68942>>>>>>>>>
68942>>>>>>>>>External_Function CryptReleaseContext "CryptReleaseContext" advapi32.dll ;    Handle hProv ;    Integer dwFlags ;    Returns Boolean
68943>>>>>>>>>
68943>>>>>>>>>External_Function CryptCreateHash "CryptCreateHash" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hKey ;    Integer dwFlags ;    Pointer phHash ;    Returns Boolean
68944>>>>>>>>>
68944>>>>>>>>>External_Function CryptDestroyHash "CryptDestroyHash" advapi32.dll ;    Handle hHash ;    Returns Boolean
68945>>>>>>>>>
68945>>>>>>>>>External_Function CryptHashData "CryptHashData" advapi32.dll ;    Handle hHash ;    Pointer pbData ;    Integer dwDataLen ;    Integer dwFlags ;    Returns Boolean
68946>>>>>>>>>
68946>>>>>>>>>External_Function CryptDeriveKey "CryptDeriveKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Handle hBaseData ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68947>>>>>>>>>
68947>>>>>>>>>External_Function CryptGetHashParam "CryptGetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    DWord dwFlags ;    Returns Integer
68948>>>>>>>>>
68948>>>>>>>>>External_Function CryptDestroyKey "CryptDestroyKey" advapi32.dll ;    Handle hKey ;    Returns Boolean
68949>>>>>>>>>
68949>>>>>>>>>External_Function CryptImportKey "CryptImportKey" advapi32.dll ;    Handle hProv ;    Pointer pbData ;    Integer dwDataLen ;    Handle hPubKey ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68950>>>>>>>>>
68950>>>>>>>>>External_Function CryptGetKeyParam "CryptGetKeyParam" advapi32.dll ;    Handle hKey ;    Integer dwParam ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwFlags ;    Returns Boolean
68951>>>>>>>>>    
68951>>>>>>>>>External_Function CryptSetKeyParam "CryptSetKeyParam" advapi32.dll ;    Handle   hKey ;    UInteger dwParam ;    Pointer  pbdata ;    UInteger dwFlags ;    Returns  Boolean
68952>>>>>>>>>
68952>>>>>>>>>External_Function CryptEncrypt "CryptEncrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Integer dwBufLen ;    Returns Boolean
68953>>>>>>>>>
68953>>>>>>>>>External_Function CryptDecrypt "CryptDecrypt" advapi32.dll ;    Handle hKey ;    Handle hHash ;    Boolean bFinal ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
68954>>>>>>>>>
68954>>>>>>>>>External_Function CryptGenRandom "CryptGenRandom" advapi32.dll ;    Handle hProv ;    DWord dwLen ;    Pointer pbBuffer ;    Returns Boolean
68955>>>>>>>>>    
68955>>>>>>>>>External_Function CryptSetHashParam "CryptSetHashParam" advapi32.dll ;    Handle hHash ;    DWord dwParam ;    Pointer pbData ;    Integer dwFlags ;    Returns Boolean
68956>>>>>>>>>    
68956>>>>>>>>>External_Function CryptGenKey "CryptGenKey" advapi32.dll ;    Handle hProv ;    Integer Algid ;    Integer dwFlags ;    Pointer phKey ;    Returns Boolean
68957>>>>>>>>>    
68957>>>>>>>>>External_Function CryptExportKey "CryptExportKey" advapi32.dll ;    Handle hKey ;    Handle hExpKey ;    Integer dwBlobType ;    Integer dwFlags ;    Pointer pbData ;    Pointer pdwDataLen ;    Returns Boolean
68958>>>>>>>
68958>>>>>>>Class cCryptographerEx is a cObject
68959>>>>>>>    
68959>>>>>>>    Procedure Construct_Object
68961>>>>>>>        Forward Send Construct_Object
68963>>>>>>>        
68963>>>>>>>        Property String     psProvider  MS_ENHANCED_PROV
68964>>>>>>>        Property Integer    piProvider  PROV_RSA_FULL
68965>>>>>>>        Property Integer    piCipher    CALG_RC4
68966>>>>>>>        Property Integer    piHash      CALG_MD5
68967>>>>>>>        
68967>>>>>>>        // Private properties
68967>>>>>>>        Property Handle     Private_phProv
68968>>>>>>>        
68968>>>>>>>        // Block cipher properties
68968>>>>>>>        Property UChar[]    paKey
68969>>>>>>>        Property UChar[]    paIV
68970>>>>>>>        Property Integer    piKeyAlg        PLAINTEXTKEYBLOB
68971>>>>>>>        Property Integer    piKeyType       CALG_AES_256
68972>>>>>>>        Property Integer    piKeyPadding    PKCS5_PADDING
68973>>>>>>>        Property Integer    piKeyMode       CRYPT_MODE_CBC
68974>>>>>>>        Property Integer    piBlockSize     16
68975>>>>>>>    End_Procedure
68976>>>>>>>    
68976>>>>>>>    
68976>>>>>>>    // Acquire key container handle
68976>>>>>>>    Function AcquireContext Returns Handle
68978>>>>>>>        Integer iProvider
68978>>>>>>>        WString wProvider
68978>>>>>>>        Handle hProv
68978>>>>>>>        Boolean bOk
68978>>>>>>>        Pointer pProv
68978>>>>>>>        
68978>>>>>>>        Move 0 to hProv
68979>>>>>>>        Get piProvider to iProvider
68980>>>>>>>        Get psProvider to wProvider
68981>>>>>>>        
68981>>>>>>>        //  Determine address to be passed as provider
68981>>>>>>>        If (Trim(wProvider) <> "") Begin
68983>>>>>>>            Move (AddressOf(wProvider)) to pProv
68984>>>>>>>        End
68984>>>>>>>>
68984>>>>>>>        Else Begin
68985>>>>>>>            Move 0 to pProv
68986>>>>>>>        End
68986>>>>>>>>
68986>>>>>>>        
68986>>>>>>>        //  Acquire Crypto Context. Note: pProv is pointer to UTF16 string.
68986>>>>>>>        Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_VERIFYCONTEXT)) to bOk
68987>>>>>>>        If (not(bOk) or hProv = 0) Begin
68989>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET ior CRYPT_VERIFYCONTEXT)) to bOk
68990>>>>>>>        End
68990>>>>>>>>
68990>>>>>>>        
68990>>>>>>>        If (not(bOk) or hProv = 0) Begin
68992>>>>>>>            // Fallback to original
68992>>>>>>>            Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,0)) to bOk
68993>>>>>>>            
68993>>>>>>>            If (not(bOk) or hProv = 0) Begin
68995>>>>>>>                Move (CryptAcquireContextW(AddressOf(hProv),0,pProv,iProvider,CRYPT_NEWKEYSET)) to bOk
68996>>>>>>>            End
68996>>>>>>>>
68996>>>>>>>        End
68996>>>>>>>>
68996>>>>>>>        Set Private_phProv to hProv
68997>>>>>>>        
68997>>>>>>>        Function_Return hProv
68998>>>>>>>    End_Function
68999>>>>>>>    
68999>>>>>>>    // Releases key container handle
68999>>>>>>>    Function ReleaseContext Handle hProv Returns Boolean
69001>>>>>>>        Function_Return (CryptReleaseContext(hProv,0))
69002>>>>>>>    End_Function
69003>>>>>>>    
69003>>>>>>>    // Creates hash object
69003>>>>>>>    Function CreateHash Handle hProv Returns Handle
69005>>>>>>>        Integer iAlgorithm
69005>>>>>>>        Handle hHash
69005>>>>>>>        Boolean bOk
69005>>>>>>>        
69005>>>>>>>        Move 0 to hHash
69006>>>>>>>        Get piHash to iAlgorithm
69007>>>>>>>        Move (CryptCreateHash(hProv,iAlgorithm,0,0,AddressOf(hHash))) to bOk
69008>>>>>>>        
69008>>>>>>>        Function_Return hHash
69009>>>>>>>    End_Function
69010>>>>>>>    
69010>>>>>>>    // Destroys the hash object
69010>>>>>>>    Function DestroyHash Handle hHash Returns Boolean
69012>>>>>>>        Function_Return (CryptDestroyHash(hHash))
69013>>>>>>>    End_Function
69014>>>>>>>    
69014>>>>>>>    // Adds data to hash object
69014>>>>>>>    Function HashData Handle hHash UChar[] ucData Returns Boolean
69016>>>>>>>        Function_Return (CryptHashData(hHash,AddressOf(ucData), SizeOfArray(ucData),0))
69017>>>>>>>    End_Function
69018>>>>>>>    
69018>>>>>>>    // Generates session key
69018>>>>>>>    Function DeriveKey Handle hProv Handle hHash Returns Handle
69020>>>>>>>        Integer iAlgorithm
69020>>>>>>>        Handle hKey
69020>>>>>>>        Boolean bOk
69020>>>>>>>        
69020>>>>>>>        Move 0 to hKey
69021>>>>>>>        Get piCipher to iAlgorithm
69022>>>>>>>        Move (CryptDeriveKey(hProv,iAlgorithm,hHash,CRYPT_EXPORTABLE,AddressOf(hKey))) to bOk
69023>>>>>>>        
69023>>>>>>>        Function_Return hKey
69024>>>>>>>    End_Function
69025>>>>>>>    
69025>>>>>>>    // Imports a plain text key
69025>>>>>>>    Function ImportPlainTextKey Handle hProv UChar[] ucaKey Returns Handle
69027>>>>>>>        tPLAINTEXTKEYBLOB blobhead
69027>>>>>>>        tPLAINTEXTKEYBLOB blobhead
69027>>>>>>>        Boolean   bSuccess
69027>>>>>>>        Handle    hKey
69027>>>>>>>        Integer   iHeadSize iKeySize
69027>>>>>>>        UChar[]   ucaKeyblob
69028>>>>>>>        Integer iVoid
69028>>>>>>>        
69028>>>>>>>        Move (SizeOfType(tPLAINTEXTKEYBLOB)) to iHeadSize
69029>>>>>>>        Move (SizeOfArray(ucaKey)) to iKeySize
69030>>>>>>>        
69030>>>>>>>        Move PLAINTEXTKEYBLOB to blobhead.hdr.bType
69031>>>>>>>        Move CUR_BLOB_VERSION   to blobhead.hdr.bVersion
69032>>>>>>>        Get piCipher            to blobhead.hdr.aiKeyAlg
69033>>>>>>>        Move iKeySize           to blobhead.dwKeySize
69034>>>>>>>        
69034>>>>>>>        Move (ResizeArray(ucaKeyblob, iHeadSize)) to ucaKeyblob
69035>>>>>>>        Move (CopyMemory(AddressOf(ucaKeyblob), AddressOf(blobhead), iHeadSize)) to iVoid
69036>>>>>>>        Move (AppendArray(ucaKeyblob, ucaKey)) to ucaKeyblob
69037>>>>>>>        
69037>>>>>>>        Move 0 to hKey
69038>>>>>>>        Move (CryptImportKey(hProv, AddressOf(ucaKeyblob), SizeOfArray(ucaKeyblob), 0, 0, AddressOf(hKey))) to bSuccess
69039>>>>>>>        If (not(bSuccess)) Begin
69041>>>>>>>            Move (ShowLastError()) to iVoid
69042>>>>>>>        End
69042>>>>>>>>
69042>>>>>>>        
69042>>>>>>>        Function_Return hKey
69043>>>>>>>    End_Function
69044>>>>>>>    
69044>>>>>>>    // Destroys the key
69044>>>>>>>    Function DestroyKey Handle hKey Returns Boolean
69046>>>>>>>        Function_Return (CryptDestroyKey(hKey))
69047>>>>>>>    End_Function
69048>>>>>>>    
69048>>>>>>>    // Retrieves key data
69048>>>>>>>    Function KeyParameter Handle hKey Integer iQuery Returns Integer
69050>>>>>>>        Integer iBuffer iLen
69050>>>>>>>        Boolean bOk
69050>>>>>>>        
69050>>>>>>>        Move (SizeOfType(Integer)) to iLen
69051>>>>>>>        Move (CryptGetKeyParam(hKey,iQuery,AddressOf(iBuffer),AddressOf(iLen),0)) to bOk
69052>>>>>>>        Function_Return iBuffer
69053>>>>>>>    End_Function
69054>>>>>>>    
69054>>>>>>>    // Retrieves a hash value
69054>>>>>>>    Function HashValue Handle lhHash Returns UChar[]
69056>>>>>>>        UChar[] ucHash
69057>>>>>>>        Integer liResult
69057>>>>>>>        DWord   dwDataLen
69057>>>>>>>        
69057>>>>>>>        Move 0 to dwDataLen
69058>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,0,AddressOf(dwDataLen),0)) to liResult
69059>>>>>>>        If (liResult = 0) ;            Function_Return ""
69062>>>>>>>        
69062>>>>>>>        Move (ResizeArray(ucHash, dwDataLen, 0)) to ucHash
69063>>>>>>>        Move (CryptGetHashParam(lhHash,HP_HASHVAL,AddressOf(ucHash),AddressOf(dwDataLen),0)) to liResult
69064>>>>>>>        If (liResult = 0) ;            Function_Return ""
69067>>>>>>>        
69067>>>>>>>        Function_Return ucHash
69068>>>>>>>    End_Function
69069>>>>>>>
69069>>>>>>>    // Encrypts data
69069>>>>>>>    Function Encrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
69071>>>>>>>        Handle hProv hHash hKey
69071>>>>>>>        Integer iAlgorithm iDataLen iCipherLen iErr
69071>>>>>>>        Boolean bOk
69071>>>>>>>        
69071>>>>>>>        Get AcquireContext to hProv
69072>>>>>>>        If (hProv) Begin
69074>>>>>>>            Get CreateHash hProv to hHash
69075>>>>>>>            If (hHash) Begin
69077>>>>>>>                Get HashData hHash ucPassword to bOk
69078>>>>>>>                If (bOk) Begin
69080>>>>>>>                    Get piCipher to iAlgorithm
69081>>>>>>>                    Get DeriveKey hProv hHash to hKey
69082>>>>>>>                End
69082>>>>>>>>
69082>>>>>>>                Get DestroyHash hHash to bOk
69083>>>>>>>            End
69083>>>>>>>>
69083>>>>>>>            
69083>>>>>>>            If (hKey) Begin
69085>>>>>>>                //  First call to determine resulting data size
69085>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
69086>>>>>>>                Move (SizeOfArray(ucData)) to iCipherLen
69087>>>>>>>                Move (CryptEncrypt(hKey, 0, True, 0, 0, AddressOf(iCipherLen), iDataLen)) to bOk
69088>>>>>>>                
69088>>>>>>>                //  Reserve space in string
69088>>>>>>>                If (iDataLen < iCipherLen) Begin
69090>>>>>>>                    Move (ResizeArray(ucData, iCipherLen, 0)) to ucData
69091>>>>>>>                End
69091>>>>>>>>
69091>>>>>>>                
69091>>>>>>>                //  Call to really decrypt
69091>>>>>>>                Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen),SizeOfArray(ucData))) to bOk
69092>>>>>>>                //If (not(bOk)) Begin
69092>>>>>>>                //Move "" to sData
69092>>>>>>>                //Move (GetLastError()) to iErr
69092>>>>>>>                //End
69092>>>>>>>                
69092>>>>>>>                Get DestroyKey hKey to bOk
69093>>>>>>>            End 
69093>>>>>>>>
69093>>>>>>>            Get ReleaseContext hProv to bOk
69094>>>>>>>        End 
69094>>>>>>>>
69094>>>>>>>        Function_Return ucData
69095>>>>>>>    End_Function
69096>>>>>>>    
69096>>>>>>>    // Decrypts data
69096>>>>>>>    Function Decrypt UChar[] ucPassword UChar[] ucData Returns UChar[]
69098>>>>>>>        Handle hProv hHash hKey
69098>>>>>>>        Integer iAlgorithm iDataLen
69098>>>>>>>        Boolean bOk
69098>>>>>>>        
69098>>>>>>>        Get AcquireContext to hProv
69099>>>>>>>        If (hProv) Begin
69101>>>>>>>            Get CreateHash hProv to hHash
69102>>>>>>>            If (hHash) Begin
69104>>>>>>>                Get HashData hHash ucPassword to bOk
69105>>>>>>>                If (bOk) Begin
69107>>>>>>>                    Get piCipher to iAlgorithm
69108>>>>>>>                    Get DeriveKey hProv hHash to hKey
69109>>>>>>>                End
69109>>>>>>>>
69109>>>>>>>                Get DestroyHash hHash to bOk
69110>>>>>>>            End
69110>>>>>>>>
69110>>>>>>>            
69110>>>>>>>            If (hKey) Begin
69112>>>>>>>                Move (SizeOfArray(ucData)) to iDataLen
69113>>>>>>>                Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iDataLen))) to bOk
69114>>>>>>>                //  Resulting data can be shorter as the input string, in that case we shorten the result string
69114>>>>>>>                If (SizeOfArray (ucData) > iDataLen) Begin
69116>>>>>>>                    Move (ResizeArray(ucData, iDataLen)) to ucData
69117>>>>>>>                End
69117>>>>>>>>
69117>>>>>>>                
69117>>>>>>>                Get DestroyKey hKey to bOk
69118>>>>>>>            End
69118>>>>>>>>
69118>>>>>>>            Get ReleaseContext hProv to bOk
69119>>>>>>>        End
69119>>>>>>>>
69119>>>>>>>        Function_Return ucData
69120>>>>>>>    End_Function
69121>>>>>>>    
69121>>>>>>>    // Creates a key
69121>>>>>>>    Function CreateKey Handle hProv Returns Handle
69123>>>>>>>        Integer iAlg iType iByte iLength iSize
69123>>>>>>>        CryptoBlob keyBlob
69123>>>>>>>        CryptoBlob keyBlob
69123>>>>>>>        Boolean bOk
69123>>>>>>>        Handle hKey
69123>>>>>>>        UChar[] aKey
69124>>>>>>>
69124>>>>>>>        Get paKey to aKey
69125>>>>>>>        Get piKeyAlg to iAlg
69126>>>>>>>        Get piKeyType to iType
69127>>>>>>>        Move iAlg                   to keyBlob.header.bType
69128>>>>>>>        Move CUR_BLOB_VERSION       to keyBlob.header.bVersion
69129>>>>>>>        Move iType                  to keyBlob.header.aiKeyAlg
69130>>>>>>>        Move (SizeOfArray(aKey))    to keyBlob.cbKeySize
69131>>>>>>>        
69131>>>>>>>        Move (SizeOfArray(aKey)-1) to iLength
69132>>>>>>>        For iByte from 0 to iLength
69138>>>>>>>>
69138>>>>>>>            Move aKey[iByte] to keyBlob.rgbKeyData[iByte]
69139>>>>>>>        Loop
69140>>>>>>>>
69140>>>>>>>        
69140>>>>>>>        Move 0 to hKey
69141>>>>>>>        Move (CryptImportKey(hProv,AddressOf(keyBlob),SizeOfType(CryptoBlob),0,0,AddressOf(hKey))) to bOk
69142>>>>>>>        Function_Return hKey
69143>>>>>>>    End_Function
69144>>>>>>>    
69144>>>>>>>    // Sets the key parameters
69144>>>>>>>    Function SetKeyParameters Handle hKey Returns Boolean
69146>>>>>>>        Integer iPadding iMode
69146>>>>>>>        Boolean bOk
69146>>>>>>>        UChar[] aIV
69147>>>>>>>        
69147>>>>>>>        //Move (SizeOfArray(aIV)-1) to iLength
69147>>>>>>>        //For iByte from 0 to iLength
69147>>>>>>>        //    Move iByte to aIV[iByte]
69147>>>>>>>        //Loop
69147>>>>>>>
69147>>>>>>>        // Set initialization vector
69147>>>>>>>        Get paIV to aIV
69148>>>>>>>        Move (CryptSetKeyParam(hKey,KP_IV,AddressOf(aIV),0)) to bOk
69149>>>>>>>        If (bOk) Begin
69151>>>>>>>            // Set padding
69151>>>>>>>            Get piKeyPadding to iPadding
69152>>>>>>>            Move (CryptSetKeyParam(hKey,KP_PADDING,AddressOf(iPadding),0)) to bOk
69153>>>>>>>            If (bOk) Begin
69155>>>>>>>                // Set move
69155>>>>>>>                Get piKeyMode to iMode
69156>>>>>>>                Move (CryptSetKeyParam(hKey,KP_MODE,AddressOf(iMode),0)) to bOk
69157>>>>>>>            End
69157>>>>>>>>
69157>>>>>>>        End
69157>>>>>>>>
69157>>>>>>>        Function_Return bOk        
69158>>>>>>>    End_Function
69159>>>>>>>    
69159>>>>>>>    // Encrypts using block cipher
69159>>>>>>>    Function BlockEncrypt UChar[] ucData Returns UChar[]
69161>>>>>>>        Handle hProv hKey
69161>>>>>>>        Integer iLen iSize iBlocks
69161>>>>>>>        Boolean bOk
69161>>>>>>>        
69161>>>>>>>        Get AcquireContext to hProv
69162>>>>>>>        If (hProv) Begin
69164>>>>>>>            // Create key
69164>>>>>>>            Get CreateKey hProv to hKey
69165>>>>>>>            If (hKey) Begin
69167>>>>>>>                Get SetKeyParameters hKey to bOk
69168>>>>>>>                If (bOk) Begin
69170>>>>>>>                    // Buffer for block ciphers can be up to block length larger
69170>>>>>>>                    Get piBlockSize to iSize
69171>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
69172>>>>>>>                    
69172>>>>>>>                    Move ((iLen/iSize)+1) to iBlocks
69173>>>>>>>                    Move (ResizeArray(ucData,iBlocks*iSize)) to ucData
69174>>>>>>>                    Move (CryptEncrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen),SizeOfArray(ucData))) to bOk
69175>>>>>>>                End
69175>>>>>>>>
69175>>>>>>>                Get DestroyKey hKey to bOk
69176>>>>>>>            End
69176>>>>>>>>
69176>>>>>>>            Get ReleaseContext hProv to bOk
69177>>>>>>>        End
69177>>>>>>>>
69177>>>>>>>        Function_Return ucData
69178>>>>>>>    End_Function
69179>>>>>>>    
69179>>>>>>>    // Decrypts using block cipher
69179>>>>>>>    Function BlockDecrypt UChar[] ucData Returns UChar[]
69181>>>>>>>        Handle hProv hKey
69181>>>>>>>        Integer iLen
69181>>>>>>>        Boolean bOk
69181>>>>>>>        
69181>>>>>>>        Get AcquireContext to hProv
69182>>>>>>>        If (hProv) Begin
69184>>>>>>>            // Create key
69184>>>>>>>            Get CreateKey hProv to hKey
69185>>>>>>>            If (hKey) Begin
69187>>>>>>>                Get SetKeyParameters hKey to bOk
69188>>>>>>>                If (bOk) Begin
69190>>>>>>>                    Move (SizeOfArray(ucData)) to iLen
69191>>>>>>>                    Move (CryptDecrypt(hKey,0,True,0,AddressOf(ucData),AddressOf(iLen))) to bOk
69192>>>>>>>                    Move (ResizeArray(ucData,iLen)) to ucData
69193>>>>>>>                End
69193>>>>>>>>
69193>>>>>>>                Get DestroyKey hKey to bOk
69194>>>>>>>            End
69194>>>>>>>>
69194>>>>>>>            Get ReleaseContext hProv to bOk
69195>>>>>>>        End
69195>>>>>>>>
69195>>>>>>>        Function_Return ucData
69196>>>>>>>    End_Function
69197>>>>>>>    
69197>>>>>>>    
69197>>>>>>>    //  Generates random data.
69197>>>>>>>    Function GenerateRandom Integer iBytes Returns UChar[]
69199>>>>>>>        Handle hProv
69199>>>>>>>        UChar[] uaResult
69200>>>>>>>        Boolean bRes
69200>>>>>>>        
69200>>>>>>>        Get AcquireContext to hProv
69201>>>>>>>        
69201>>>>>>>        Move (ResizeArray(uaResult, iBytes)) to uaResult
69202>>>>>>>        Move (CryptGenRandom(hProv, iBytes, AddressOf(uaResult))) to bRes
69203>>>>>>>        
69203>>>>>>>        Get ReleaseContext hProv to bRes
69204>>>>>>>        
69204>>>>>>>        Function_Return uaResult
69205>>>>>>>    End_Function
69206>>>>>>>    
69206>>>>>>>    //  Generates random data and does a base64 encoding to properly present it as a string.
69206>>>>>>>    Function GenerateRandomString Integer iLength Returns String
69208>>>>>>>        String sResult
69208>>>>>>>        UChar[] ucData
69209>>>>>>>        Pointer pBase64
69209>>>>>>>        Integer iVoid
69209>>>>>>>        
69209>>>>>>>        Get GenerateRandom iLength to ucData
69210>>>>>>>        
69210>>>>>>>        Move (Base64Encode(AddressOf(ucData), iLength)) to pBase64
69211>>>>>>>        Move (PointerToString(pBase64)) to sResult
69212>>>>>>>        Move (Free(pBase64)) to iVoid
69213>>>>>>>        
69213>>>>>>>        Function_Return (Left(sResult, iLength))
69214>>>>>>>    End_Function
69215>>>>>>>    
69215>>>>>>>End_Class
69216>>>>>
69216>>>>>Class cLoginEncryption is a cObject
69217>>>>>    
69217>>>>>    Procedure Construct_Object
69219>>>>>        Forward Send Construct_Object
69221>>>>>        // this must be set to a multi (40ish) character random key
69221>>>>>        Property String psEncryptPassword ""
69222>>>>>        
69222>>>>>        Object oDataCrypter is a cCryptographerEx
69224>>>>>            Set piHash to CALG_SHA_256
69225>>>>>            Set piCipher to CALG_AES_256
69226>>>>>            Set psProvider to "" //  Not providing a specific provider gives the default provider for the provider type
69227>>>>>            Set piProvider to PROV_RSA_AES
69228>>>>>        End_Object
69229>>>>>    End_Procedure
69230>>>>>    
69230>>>>>    // This can be augmented to return a password encryption key using any
69230>>>>>    // hidden mechanism desired.
69230>>>>>    Function GetEncryptionPassword Returns String
69232>>>>>        String sPassword
69232>>>>>        Get psEncryptPassword to sPassword
69233>>>>>        Function_Return sPassword
69234>>>>>    End_Function
69235>>>>>    
69235>>>>>    // Encrypts a string into an unreadable hash that can later be decrypted using DecryptKey.
69235>>>>>    //
69235>>>>>    // Params:
69235>>>>>    //   sPlainText     String to encrypt.
69235>>>>>    // Returns:
69235>>>>>    //   Base64 encoded hash.
69235>>>>>    Function EncryptPassword String sPlainText Returns String
69237>>>>>        String sEncryptPassword sBase64
69237>>>>>        UChar[] ucBinary
69238>>>>>        Pointer pBase64
69238>>>>>        Integer iVoid
69238>>>>>        
69238>>>>>        //  Encrypt Key
69238>>>>>        Get GetEncryptionPassword to sEncryptPassword
69239>>>>>        If (sEncryptPassword = "") Begin
69241>>>>>            Error DFERR_PROGRAM "No encryption password set"
69242>>>>>>
69242>>>>>        End
69242>>>>>>
69242>>>>>        
69242>>>>>        Get Encrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) (StringToUCharArray(sPlainText)) to ucBinary
69243>>>>>        
69243>>>>>        If (SizeOfArray(ucBinary) = 0) Begin
69245>>>>>            Error DFERR_PROGRAM "Unable to encrypt database login password"
69246>>>>>>
69246>>>>>            Function_Return ""
69247>>>>>        End
69247>>>>>>
69247>>>>>        
69247>>>>>        //  Encode binary hash to Base64
69247>>>>>        Move (Base64Encode(AddressOf(ucBinary), SizeOfArray(ucBinary))) to pBase64
69248>>>>>        Move (PointerToString(pBase64)) to sBase64
69249>>>>>        Move (Free(pBase64)) to iVoid
69250>>>>>        
69250>>>>>        Function_Return sBase64
69251>>>>>    End_Function
69252>>>>>    
69252>>>>>    
69252>>>>>    // Decrypts the unreadable hash generated by EncryptKey into a readable string.
69252>>>>>    //
69252>>>>>    // Params:
69252>>>>>    //   sBase64EncryptedPassword       Base64 Encrypted password
69252>>>>>    // Returns:
69252>>>>>    //   Readable plain text password
69252>>>>>    Function DecryptPassword String sBase64EncryptedPassword Returns String
69254>>>>>        String sEncryptPassword
69254>>>>>        UChar[] ucBinary ucPlain
69256>>>>>        Boolean bIsHex
69256>>>>>        Integer iLen iVoid
69256>>>>>        Pointer pBinary
69256>>>>>        
69256>>>>>        If (sBase64EncryptedPassword <> "") Begin
69258>>>>>            //  Decode from Base64
69258>>>>>            Move (Base64Decode(AddressOf(sBase64EncryptedPassword), &iLen)) to pBinary
69259>>>>>            
69259>>>>>            Move (ResizeArray(ucBinary, iLen, 0)) to ucBinary
69260>>>>>            Move (MemCopy(AddressOf(ucBinary), pBinary, iLen)) to iVoid
69261>>>>>                        
69261>>>>>            Move (Free(pBinary)) to iVoid
69262>>>>>            
69262>>>>>            //  Encrypted binary hash to string
69262>>>>>            Get GetEncryptionPassword to sEncryptPassword
69263>>>>>            Get Decrypt of oDataCrypter (StringToUCharArray(sEncryptPassword)) ucBinary to ucPlain
69264>>>>>        End
69264>>>>>>
69264>>>>>        
69264>>>>>        Function_Return (UCharArrayToString(ucPlain))
69265>>>>>    End_Function
69266>>>>>End_Class
69267>>>
69267>>>Object oLoginEncryption is a cLoginEncryption
69269>>>
69269>>>    // this must be created in your appsrc directory and must contain an encryption
69269>>>    // key that is set to psEncryptPassword. It will look something like this
69269>>>    //
69269>>>    // Set psEncryptPassword to "JchUAo7W@r.b{<Yk~OONi0nq=sMi[*Rn[A-`Vo)q"
69269>>>    //  
    #Include LoginEncryptionKey.inc
ERROR: 4313 Include file not found LOGINENCRYPTIONKEY.INC ON LINE: 10 (69269) OF FILE: C:\Program Files\DataFlex 20.0\Pkg\LoginEncryption.pkg
69269>>>    
69269>>>    // use this to register this object to your cConnection Object. This object
69269>>>    // must be created after the cConnection object
69269>>>    Move Self to ghoLoginEncryption
69270>>>End_Object
69271>        Use DatabaseLoginDialog.dg
Including file: DatabaseLoginDialog.dg    (C:\Program Files\DataFlex 20.0\Pkg\DatabaseLoginDialog.dg)
69271>>>
69271>>>Use Windows.pkg
69271>>>Use cConnection.pkg
69271>>>Use dfLine.pkg
69271>>>
69271>>>Object oDatabaseLoginDialog is a ModalPanel
69273>>>    Set Label to "Database Login"
69274>>>    Set Location to 2 2
69275>>>    Set Size to 110 211
69276>>>    
69276>>>    Property String psId
69278>>>    Property Boolean pbOk False
69280>>>    Property Boolean pbChanged False
69282>>>    Property Boolean pbAllowRemember True
69284>>>    
69284>>>    // this registers this object with the cConnection object.
69284>>>    Move Self to ghoLoginConnectDialog
69285>>>    
69285>>>    Object oUserIDForm is a Form
69287>>>        Set Label to "User Name"
69288>>>        Set Size to 12 85
69289>>>        Set Location to 34 79
69290>>>        Set Label_Col_Offset to 64
69291>>>        Set peAnchors to anTopLeftRight
69292>>>    End_Object
69293>>>    
69293>>>    Object oPwdForm is a Form
69295>>>        Set Size to 12 85
69296>>>        Set Location to 49 79
69297>>>        Set Label_Col_Offset to 64
69298>>>        Set Password_State to True
69299>>>        Set peAnchors to anTopLeftRight
69300>>>        Set Label to "Password"
69301>>>    End_Object
69302>>>    
69302>>>    Object oTrustedConnection is a CheckBox
69304>>>        Set Size to 10 50
69305>>>        Set Location to 65 79
69306>>>        Set Label to "Trusted Connection"
69307>>>    End_Object
69308>>>    
69308>>>    Object oRemember is a CheckBox
69310>>>        Set Size to 10 50
69311>>>        Set Location to 79 14
69312>>>        Set Label to "Remember and don't ask again"
69313>>>        Set Checked_State to True
69314>>>    End_Object
69315>>>    
69315>>>    Object oLogin_btn is a Button
69317>>>        Set Label to "&Login"
69318>>>        Set Location to 92 102
69319>>>        Set peAnchors to anBottomRight
69320>>>        Set Default_State to True
69321>>>        
69321>>>        Procedure OnClick
69324>>>            Boolean bTrust
69324>>>            String sUser sPwd sConn sErr sId
69324>>>            Integer iError
69324>>>            Get psId to sId
69325>>>            Get Value of oUserIDForm to sUser
69326>>>            Get Value of oPwdForm to sPwd
69327>>>            Get Checked_State of oTrustedConnection to bTrust
69328>>>            
69328>>>            Get LoginConnectIdNewCredentials of ghoConnection sId sUser sPwd bTrust to iError
69329>>>            If (iError=0) Begin
69331>>>                Set pbOk to True
69332>>>                Set pbChanged to True
69333>>>                Send Close_Panel
69334>>>            End
69334>>>>
69334>>>            Else Begin
69335>>>                Get psErrorText of ghoConnection to sErr
69336>>>                Send UserError sErr "Login Error"
69337>>>            End
69337>>>>
69337>>>        End_Procedure
69338>>>    End_Object
69339>>>    
69339>>>    Object oCancel_btn is a Button
69341>>>        Set Label to "&Cancel"
69342>>>        Set Location to 92 157
69343>>>        Set peAnchors to anBottomRight
69344>>>        
69344>>>        Procedure OnClick
69347>>>            Send Close_Panel
69348>>>        End_Procedure
69349>>>    End_Object
69350>>>    
69350>>>    Object oConnectionIdInfo is a TextBox
69352>>>        Set Size to 10 50
69353>>>        Set Location to 4 14
69354>>>        Set Label to 'Connection Id='
69355>>>    End_Object
69356>>>    
69356>>>    Object oConnectionServerInfo is a TextBox
69358>>>        Set Size to 10 50
69359>>>        Set Location to 16 14
69360>>>        Set Label to 'Server'
69361>>>    End_Object
69362>>>    
69362>>>    Object oLineControl1 is a LineControl
69364>>>        Set Size to 2 202
69365>>>        Set Location to 29 5
69366>>>    End_Object
69367>>>    
69367>>>    Function LoginConnectIdDialog String sId Returns Boolean
69370>>>        Boolean bOk bChanged bTrusted bAllowRemember bRemember
69370>>>        String sUser sPwd sDescription
69370>>>        tConnection Connect
69370>>>        tConnection Connect
69370>>>        
69370>>>        Get pbAllowRemember to bAllowRemember
69371>>>        
69371>>>        
69371>>>        If not bAllowRemember Begin
69373>>>            Set Enabled_State of oRemember to bRemember
69374>>>            Set Visible_State of oRemember to bRemember
69375>>>        End
69375>>>>
69375>>>        
69375>>>        Get ConnectionIdInfo of ghoConnection sId to Connect
69376>>>        Set Value of oConnectionIdInfo to ("Connection ID="+Connect.sId)
69377>>>        Set Value of oConnectionServerInfo to Connect.sString
69378>>>        
69378>>>        Set psId to sId
69379>>>        Set pbOk to False
69380>>>        Set pbChanged to False
69381>>>        Set Value of oUserIDForm to Connect.sUID
69382>>>        Set Value of oPwdForm to ""
69383>>>        
69383>>>        Send Popup
69384>>>        
69384>>>        Get pbOk to bOk
69385>>>        Get pbChanged to bChanged
69386>>>        If (bChanged and bOk) Begin
69388>>>            If bAllowRemember Begin
69390>>>                Get Checked_State of oRemember to bRemember
69391>>>                If bRemember Begin
69393>>>                    Get Checked_State of oTrustedConnection to bTrusted
69394>>>                    If not (bTrusted) Begin
69396>>>                        Get Value of oUserIDForm to sUser
69397>>>                        Get Value of oPwdForm to sPwd
69398>>>                    End
69398>>>>
69398>>>                    Get StoreConnectionIdCredentials of ghoConnection sId sUser sPwd bTrusted to bOk
69399>>>                End
69399>>>>
69399>>>            End
69399>>>>
69399>>>        End
69399>>>>
69399>>>        Function_Return bOk
69400>>>    End_Function
69401>>>    
69401>>>    
69401>>>    On_Key Key_Alt+Key_O Send KeyAction of oLogin_btn
69402>>>    On_Key Key_Alt+Key_L Send KeyAction of oCancel_btn
69403>>>End_Object
69404>>>
69404>    End_Object
69405>
69405>End_Object
69406>
69406>Object oToolTipController is a cToolTipController
69408>    Move Self to ghoToolTipController
69409>End_Object
69410>
69410>Use oEditContextMenu.pkg
Including file: oEditContextMenu.pkg    (C:\Program Files\DataFlex 20.0\Pkg\oEditContextMenu.pkg)
69410>>>Use cCJStandardMenuItemClasses.pkg
69410>>>
69410>>>Object oEditContextMenu is a cCJContextMenu
69412>>>    
69412>>>    Move Self to Default_Form_Floating_Menu_ID
69413>>>    
69413>>>    Object oUndoMenuItem is a cCJUndoMenuItem
69415>>>    End_Object
69416>>>    
69416>>>    Object oCutMenuItem is a cCJCutMenuItem
69418>>>        Set pbControlBeginGroup to True
69419>>>    End_Object
69420>>>    
69420>>>    Object oCopyMenuItem is a cCJCopyMenuItem
69422>>>    End_Object
69423>>>
69423>>>    Object oPasteMenuItem is a cCJPasteMenuItem
69425>>>    End_Object
69426>>>
69426>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
69428>>>    End_Object
69429>>>
69429>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
69431>>>        Set pbControlBeginGroup to True
69432>>>    End_Object
69433>>>
69433>>>End_Object
69434>>>
69434>Use oDEOEditContextMenu17.pkg
Including file: oDEOEditContextMenu17.pkg    (C:\Program Files\DataFlex 20.0\Pkg\oDEOEditContextMenu17.pkg)
69434>>>Use Windows.pkg
69434>>>Use cCJStandardMenuItemClasses.pkg
69434>>>Use cCJDeoMenuItemClasses.pkg
69434>>>
69434>>>
69434>>>Object oDEOEditContextMenu17 is a cCJContextMenu
69436>>>    
69436>>>    Move Self to Default_dbFloating_Menu_ID
69437>>>    
69437>>>    Object oUndoMenuItem is a cCJUndoMenuItem
69439>>>    End_Object
69440>>>    
69440>>>    Object oCutMenuItem is a cCJCutMenuItem
69442>>>        Set pbControlBeginGroup to True
69443>>>    End_Object
69444>>>    
69444>>>    Object oCopyMenuItem is a cCJCopyMenuItem
69446>>>    End_Object
69447>>>
69447>>>    Object oPasteMenuItem is a cCJPasteMenuItem
69449>>>    End_Object
69450>>>
69450>>>    Object oDeleteItem is a cCJDeleteEditMenuItem
69452>>>    End_Object
69453>>>
69453>>>    Object oSelectAllMenuItem is a cCJSelectAllMenuItem
69455>>>        Set pbControlBeginGroup to True
69456>>>    End_Object
69457>>>
69457>>>    Object oPromptMenuItem is a cCJPromptMenuItem
69459>>>        Set pbControlBeginGroup to True
69460>>>    End_Object
69461>>>
69461>>>    Object oFindNextMenu is a cCJFindNextMenuItem
69463>>>        Set pbControlBeginGroup to True
69464>>>    End_Object
69465>>>
69465>>>    Object oFindPreviousMenu is a cCJFindPreviousMenuItem
69467>>>    End_Object
69468>>>
69468>>>    Object oClearMenuItem is a cCJClearMenuItem
69470>>>        Set pbControlBeginGroup to True
69471>>>    End_Object
69472>>>
69472>>>    Object oClearAllMenu is a cCJClearAllMenuItem
69474>>>    End_Object
69475>>>
69475>>>    Object oSaveMenu is a cCJSaveMenuItem
69477>>>    End_Object
69478>>>    
69478>>>    Object oDeleteMenu is a cCJDeleteMenuItem
69480>>>    End_Object
69481>>>
69481>>>    Object oRememberitem is a cCJRememberFieldMenuItem
69483>>>        Set pbControlBeginGroup to True
69484>>>    End_Object
69485>>>
69485>>>    Object oRetainItem is a cCJRememberLastFieldMenuItem
69487>>>    End_Object
69488>>>
69488>>>    Object oUnRememberitem is a cCJUnRememberFieldMenuItem
69490>>>    End_Object
69491>>>
69491>>>    Object oCJClearAllDynamicDefaults is a cCJUnRememberFieldAllMenuItem
69493>>>    End_Object
69494>>>
69494>>>End_Object
69495>
69495>Object oMain is a Panel
69497>    Set Label To "My Project"
69498>    Set Location to 4 3
69499>    Set Size to 300 450
69500>
69500>    Object oCommandBarSystem is a cCJCommandBarSystem
69502>        Set pbTimerUpdate to True
69503>        Set peVisualTheme to xtpThemeOffice2013Outlook
69504>        Set pbAutoResizeIcons to True
69505>
69505>        Procedure OnCreateCommandBars
69508>            Handle hoOptions
69508>            Get OptionsObject to hoOptions
69509>            Forward Send OnCreateCommandBars
69511>        End_Procedure
69512>
69512>        Object oMenuBar is a cCJMenuBar
69514>
69514>            Object oFileMenu is a cCJMenuItem
69516>                Set peControlType to xtpControlPopup          
69517>                Set psCaption   to "&File"
69518>                Set psDescription to "Find, Save, Delete, Clear information or quit this application."
69519>                Set psCategory to "Menus"
69520>
69520>                Object oClearMenuItem is a cCJClearMenuItem
69522>                    Set pbAddToDesignerMenu to True
69523>                End_Object
69524>
69524>                Object oClearAllMenu is a cCJClearAllMenuItem
69526>                    Set pbAddToDesignerMenu to True
69527>                End_Object
69528>
69528>                Object oPromptMenuItem is a cCJPromptMenuItem
69530>                    Set pbAddToDesignerMenu to True
69531>                    Set pbControlBeginGroup to True
69532>                End_Object
69533>
69533>                Object oFindMenuItem is a cCJFindMenuItem
69535>                    Set pbAddToDesignerMenu to True
69536>                    Set pbControlBeginGroup to True
69537>                End_Object
69538>
69538>                Object oFindNextMenu is a cCJFindNextMenuItem
69540>                    Set pbAddToDesignerMenu to True
69541>                End_Object
69542>
69542>                Object oFindPreviousMenu is a cCJFindPreviousMenuItem
69544>                    Set pbAddToDesignerMenu to True
69545>                End_Object
69546>
69546>                Object oFindFirstMenu is a cCJFindFirstMenuItem
69548>                    Set pbAddToDesignerMenu to True
69549>                End_Object
69550>
69550>                Object oFindLastMenu is a cCJFindLastMenuItem
69552>                    Set pbAddToDesignerMenu to True
69553>                End_Object
69554>
69554>                Object oSaveMenuItem is a cCJSaveMenuItem
69556>                    Set pbAddToDesignerMenu to True
69557>                    Set pbControlBeginGroup to True
69558>                End_Object
69559>
69559>                Object oDeleteMenuItem is a cCJDeleteMenuItem
69561>                    Set pbAddToDesignerMenu to True
69562>                End_Object
69563>
69563>                Object oExitMenu is a cCJExitMenuItem
69565>                    Set pbControlBeginGroup to True
69566>                End_Object
69567>
69567>            End_Object
69568>
69568>            Object oViewMenu is a cCJMenuItem
69570>                Set peControlType to xtpControlPopup          
69571>                Set psCaption to "&View"
69572>                Set psToolTip to "View"
69573>                Set psDescription to "Available Views"
69574>            End_Object
69575>            
69575>            Object oReportMenu is a cCJMenuItem
69577>                Set peControlType to xtpControlPopup          
69578>                Set psCaption to "&Report"
69579>                Set psToolTip to "Report"
69580>                Set psDescription to "Available Reports"
69581>            End_Object
69582>
69582>            Object oNavigateMenu is a cCJMenuItem
69584>                Set peControlType to xtpControlPopup      
69585>                Set psCaption to "&Navigate"    
69586>                Set psTooltip to "Navigate"    
69587>                Set psDescription to "Move to different areas of the application"
69588>
69588>                Object oNextAreaMenu is a cCJNextAreaMenu
69590>                End_Object
69591>
69591>                Object oPriorAreaMenu is a cCJPriorAreaMenu
69593>                End_Object
69594>
69594>                Object oNextViewMenu is a cCJNextViewMenu
69596>                End_Object
69597>
69597>                Object oPriorViewMenu is a cCJPriorViewMenu
69599>                End_Object
69600>
69600>                Object oPromptMenu is a cCJPromptMenuItem
69602>                    Set pbControlBeginGroup to True
69603>                End_Object
69604>
69604>                Object oZoomMenu is a cCJZoomMenuItem
69606>                End_Object
69607>
69607>            End_Object
69608>
69608>            Object oWindowMenu is a cCJMDIWindowsMenuItem
69610>                Set peControlType to xtpControlPopup
69611>                Set psCaption to "&Window"
69612>                Set psToolTip to "Window"
69613>                Set psDescription to "Display Current Views and set other display options."    
69614>
69614>                // These are the static windows items. More will be created in onInitPopup 
69614>                Object oDisplayOptionsMenu is a cCJMenuItem
69616>                    Set peControlType to xtpControlPopup          
69617>                    Set psCaption to "&Display Options"
69618>                    Set psToolTip to "Display Options"
69619>                    Set psDescription to "Set display options"
69620>
69620>                    Object oStatusbarMenu is a cCJStatusbarMenuItem
69622>                    End_Object
69623>
69623>                    Object oAutoArrangeIconsMenu is a cCJAutoArrangeIconsMenuItem
69625>                    End_Object
69626>
69626>                    Object oRestoreMenusMenu is a cCJRestoreMenusMenuItem
69628>                        Set pbControlBeginGroup to True
69629>                    End_Object
69630>
69630>                End_Object
69631>
69631>                Object oCascadeMenu is a cCJCascadeMenuItem
69633>                    Set pbControlBeginGroup to True
69634>                End_Object
69635>
69635>                Object oHorizTile is a cCJTileHorizontally
69637>                End_Object
69638>
69638>                Object oVertTile is a cCJTileVertically
69640>                End_Object
69641>
69641>                Object oMinimizeMenuItem is a cCJMinimizeWindowsMenuItem
69643>                    Set pbControlBeginGroup to True
69644>                End_Object
69645>
69645>                Object oRestoreMenuItem is a cCJRestoreWindowsMenuItem
69647>                End_Object
69648>
69648>                Object oArrangeIconsMenuItem is a cCJAutoArrangeIconsMenuItem
69650>                    Set pbControlBeginGroup to True
69651>                End_Object
69652>
69652>            End_Object
69653>
69653>            Object oHelpMenu is a cCJMenuItem
69655>                Set peControlType to xtpControlPopup    
69656>                Set psCaption to "&Help"
69657>                Set psDescription to "Access Information for learning and using this DataFlex application."
69658>                Set psToolTip to "Help"
69659>
69659>                Object oHelpMenuItem is a cCJHelpMenuItem 
69661>                End_Object
69662>
69662>                Object oAboutMenuItem is a cCJAboutMenuItem
69664>                End_Object
69665>
69665>            End_Object
69666>
69666>        End_Object
69667>
69667>        Object oFindToolBar is a cCJToolbar
69669>            Set psTitle to "Finding Toolbar"
69670>
69670>            Object oFindFirstTool is a cCJFindFirstMenuItem
69672>            End_Object
69673>
69673>            Object oFindPreviousTool is a cCJFindPreviousMenuItem
69675>            End_Object
69676>
69676>            Object oFindMenuTool is a cCJFindMenuItem
69678>            End_Object
69679>
69679>            Object oFindNextTool is a cCJFindNextMenuItem
69681>            End_Object
69682>
69682>            Object oFindLastTool is a cCJFindLastMenuItem
69684>            End_Object
69685>
69685>            Object oPromptToolItem is a cCJPromptMenuItem
69687>                Set pbControlBeginGroup to True
69688>            End_Object
69689>
69689>        End_Object
69690>
69690>        Object oFileToolBar is a cCJToolbar
69692>            Set psTitle to "Data Entry Toolbar"
69693>
69693>            Object oClearToolItem is a cCJClearMenuItem
69695>                Set peControlStyle to xtpButtonIconAndCaption
69696>            End_Object
69697>
69697>            Object oClearAllToolItem2 is a cCJClearAllMenuItem
69699>                Set peControlStyle to xtpButtonIconAndCaption
69700>            End_Object
69701>
69701>            Object oSaveToolItem is a cCJSaveMenuItem
69703>                Set peControlStyle to xtpButtonIconAndCaption
69704>                Set pbControlBeginGroup to True
69705>            End_Object
69706>
69706>            Object oDeleteToolItem is a cCJDeleteMenuItem
69708>                Set peControlStyle to xtpButtonIconAndCaption
69709>            End_Object
69710>
69710>        End_Object
69711>
69711>        Object oEditToolBar is a cCJToolbar
69713>            Set psTitle to "Edit Toolbar"
69714>
69714>            Object oCutToolbarItem is a cCJCutMenuItem
69716>            End_Object
69717>
69717>            Object oCopyToolbarItem is a cCJCopyMenuItem
69719>            End_Object
69720>
69720>            Object oPasteToolbarItem is a cCJPasteMenuItem
69722>            End_Object
69723>
69723>            Object oDeleteEditToolbarItem is a cCJDeleteEditMenuItem
69725>                Set pbControlBeginGroup to True
69726>            End_Object
69727>
69727>        End_Object
69728>
69728>        Object oRememberToolbar is a cCJToolbar
69730>            Set psTitle to C_$Remember
69731>
69731>            Object oRememberItems is a cCJMenuItem
69733>
69733>                Set peControlType to xtpControlPopup
69734>                Set peControlStyle to xtpButtonCaption
69735>                Set psCaption to C_$Remember
69736>                
69736>                Object oMenuItem is a cCJRememberFieldMenuItem
69738>                    Set peControlStyle to xtpButtonIconAndCaption
69739>                End_Object
69740>                
69740>                Object oMenuItem is a cCJRememberLastFieldMenuItem
69742>                    Set peControlStyle to xtpButtonIconAndCaption
69743>                End_Object
69744>                
69744>                Object oMenuItem is a cCJUnRememberFieldMenuItem
69746>                    Set peControlStyle to xtpButtonIconAndCaption
69747>                End_Object
69748>                
69748>                Object oMenuItem is a cCJUnRememberFieldAllMenuItem
69750>                    Set peControlStyle to xtpButtonIconAndCaption
69751>                End_Object
69752>
69752>            End_Object
69753>            
69753>        End_Object
69754>        
69754>        Object oStatusBar is a cCJStatusBar
69756>
69756>            Object oStatusPane1 is a cCJStatusBarPane
69758>                Set piID to sbpIDIdlePane
69759>                Set pbStyleStretch to True
69760>            End_Object
69761>
69761>            Object oStatusPane2 is a cCJStatusBarPane
69763>                Set phoViewPane to Self
69764>                Set pbStyleStretch to True
69765>            End_Object
69766>
69766>        End_Object
69767>
69767>    End_Object
69768>
69768>    Object oClientArea is a ClientArea
69770>        Use StdAbout.pkg
Including file: StdAbout.pkg    (C:\Program Files\DataFlex 20.0\Pkg\StdAbout.pkg)
69770>>>// This provides a quick and simple way to create an about package for a program.
69770>>>// You need to create a message inside you client area called Activate_About.
69770>>>// Within this message you should send the message DoAbout passing needed
69770>>>// string information.
69770>>>//
69770>>>//       Procedure Activate_About
69770>>>//           Send DoAbout sTitle sVersion sCopyright sAuthor sBitmap
69770>>>//       End_Procedure
69770>>>//    where: sTitle =     Name of application. If none provided, uses caption
69770>>>//                        bar title
69770>>>//           sVersion   = Version Line. If none provided, will be blank
69770>>>//           sCopyRight = Copyright Line. If none provided, will be blank
69770>>>//           sAuthor    = Author name, blank if none provided
69770>>>//           sBitMap    = Bitmap logo. If none provided, standard VDF bitmap
69770>>>//                        is used.
69770>>>// It is expected that you will place this in your own object package. For
69770>>>// example an order about package may look like this:
69770>>>//
69770>>>//   // OrderAbout.pkg
69770>>>//   Use StdAbout.pkg
69770>>>//   Procedure Activate_About
69770>>>//      String sTitle sCopyright sVersion sAuthor
69770>>>//      Move "My Order Entry System" to sTitle
69770>>>//      Move "Version 2.1" to sVersion
69770>>>//      Move "Copyright xxxx, Super Software Inc." to sCopyright
69770>>>//      Move "John Smith"  to sAuthor
69770>>>//      Send DoAbout sTitle sVersion sCopyright sAuthor ""
69770>>>//   end_procedure
69770>>>//   // end of file.
69770>>>
69770>>>Use DfAbout.pkg
Including file: Dfabout.pkg    (C:\Program Files\DataFlex 20.0\Pkg\Dfabout.pkg)
69770>>>>>Use LanguageText.pkg
69770>>>>>Use Windows.pkg
69770>>>>>Use DFbitmap.pkg
69770>>>>>Use GlobalFunctionsProcedures.pkg
69770>>>>>Use cTextEdit.pkg
69770>>>>>Use tWinStructs.pkg
69770>>>>>
69770>>>>>Use cli.pkg
69770>>>>>Use DFBTRDRV.PKG
Including file: DFBTRDRV.PKG    (C:\Program Files\DataFlex 20.0\Pkg\DFBTRDRV.PKG)
69770>>>>>>>// $File title : Package for the DataFlex Connectivity Kit for Pervasive.SQL
69770>>>>>>>// Notice      : This package contains constants and commands, used to call
69770>>>>>>>//               specific functions in the DFBTRDRV.
69770>>>>>>>Use Ui
69770>>>>>>>//
69770>>>>>>>// Driver Indentification
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>// Driver attributes
69770>>>>>>>//
69770>>>>>>>// Call_Driver functions ID's
69770>>>>>>>//
69770>>>>>>>//
69770>>>>>>>// DFBTRFN_CONVERT_FILE options
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// DFBTRFN_SET_OWNER options
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// DFBTRFN_SET_TRANSACTION_TYPE options
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to create all vars which may be needed
69770>>>>>>>// in other commands.
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to set the owner of a Btrieve file.
69770>>>>>>>// File must have been opened.
69770>>>>>>>// Filenumber needs to be passed.
69770>>>>>>>// To clear set the owner to "".
69770>>>>>>>// Examples:
69770>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret"
69770>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY CALLBACK MyCallBack
69770>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" ENCRYPT
69770>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to "Secret" READONLY ENCRYPT CALLBACK MyCallBack
69770>>>>>>>// To clear:
69770>>>>>>>//      DFBTR_SET_OWNER MyFileNumber to ""
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to parse DFBTR_SET_OWNVER
69770>>>>>>>// options.
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to parse for Callback
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to clear the owner of a Btrieve file.
69770>>>>>>>// File must have been opened.
69770>>>>>>>// Filenumber needs to be passed.
69770>>>>>>>// Examples:
69770>>>>>>>//      DFBTR_CLEAR_OWNER MyFileNumber
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to add a owner name to the internal list of ownernames
69770>>>>>>>// which will be tries when opening files.
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to remove all owners from the internal list of ownernames
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to set the owner name to be used when opening the DDF files.
69770>>>>>>>// The DDF owner is required when Pervasive.SQL security is turned on.
69770>>>>>>>// The DDF owner is equal to the password of the Master user in Pervasive.SQL
69770>>>>>>>// This command overwrites the DDF_OWNER setting in DFBTRDRV.INT
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to change the transaction type.
69770>>>>>>>// Valid types are:
69770>>>>>>>//     DFBTRTT_NONE
69770>>>>>>>//     DFBTRTT_EXCLUSIVE
69770>>>>>>>//     DFBTRTT_CONCURRENT
69770>>>>>>>//
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to get the current transaction type.
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to set explicit_locking
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to get explicit locking
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to set detection for incompatible positive signs in numeric fields
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>//
69770>>>>>>>// Command to get detection for incompatible positive signs in numeric fields
69770>>>>>>>//
69770>>>>>>>
69770>>>>>>>// Purpose: An instance of this class can be used as a broker object to
69770>>>>>>>//          call several Dfbtrdrv releated methods.
69770>>>>>>>
69770>>>>>>>Class cDFBtrDrvHandler is an Array
69771>>>>>>>    
69771>>>>>>>    Procedure Construct_Object Integer iImage
69773>>>>>>>        Forward Send Construct_object iImage
69775>>>>>>>        
69775>>>>>>>        Property String  psDriverID "DFBTRDRV"
69776>>>>>>>    End_Procedure
69777>>>>>>>    
69777>>>>>>>    //  The revsion of a Dfbtrdrv Connectivity Kit
69777>>>>>>>    //
69777>>>>>>>    
69777>>>>>>>    Function CKRevision Returns String
69779>>>>>>>        String  sDriverID
69779>>>>>>>        String  sRevision
69779>>>>>>>        String  sVoid
69779>>>>>>>        Integer iRetval
69779>>>>>>>        
69779>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69779>>>>>>>        // This error would otherwise be raised when we have an older
69779>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69779>>>>>>>        Send Ignore_error to Error_object_Id 20491
69780>>>>>>>        Get psDriverID to sDriverID
69781>>>>>>>        Move (Repeat(" ", 255)) to sRevision
69782>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKREVISION Callback 0 Passing sRevision sVoid 0 Result iRetval
69787>>>>>>>        Send Trap_Error to Error_object_Id 20491
69788>>>>>>>        If (Trim(sRevision) = "") Begin
69790>>>>>>>            // Unable to get the revision. return all zeroes.
69790>>>>>>>            Move "0.0.0.0" to sRevision
69791>>>>>>>        End
69791>>>>>>>>
69791>>>>>>>        Function_Return sRevision
69792>>>>>>>    End_Function
69793>>>>>>>    
69793>>>>>>>    Function CkUsesUri Returns Integer
69795>>>>>>>        String  sDriverID
69795>>>>>>>        String  sVoid1
69795>>>>>>>        String  sVoid2
69795>>>>>>>        Integer iRetval
69795>>>>>>>        
69795>>>>>>>        Get psDriverID to sDriverID
69796>>>>>>>        
69796>>>>>>>        Move 0 to iRetval
69797>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69797>>>>>>>        // This error would otherwise be raised when we have an older
69797>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKUSESURI function
69797>>>>>>>        Send Ignore_error to Error_object_Id 20491
69798>>>>>>>        Call_Driver 0 sDRiverID Function DFBTRFN_CKUSESURI Callback 0 Passing sVoid1 sVoid2 0 Result iRetval
69803>>>>>>>        Send Trap_Error to Error_object_Id 20491
69804>>>>>>>        
69804>>>>>>>        Function_Return iRetval
69805>>>>>>>    End_Function
69806>>>>>>>    
69806>>>>>>>    
69806>>>>>>>    
69806>>>>>>>    // Extract the Nth part of a a.b.c.d revsion string.
69806>>>>>>>    //
69806>>>>>>>    // Returns : The part version number or -1 if there is no such part number.
69806>>>>>>>    //
69806>>>>>>>    
69806>>>>>>>    Function ExtractPartFromRevision Integer iPartNum String sRevision Returns Integer
69808>>>>>>>        Integer iPartRev
69808>>>>>>>        Integer iCurrentPart
69808>>>>>>>        Integer iSeparatorPos
69808>>>>>>>        
69808>>>>>>>        If (iPartNum > 4) ;            Function_Return -1
69811>>>>>>>        
69811>>>>>>>        Move 0 to iCurrentPart
69812>>>>>>>        Repeat
69812>>>>>>>>
69812>>>>>>>            Move (Pos(".", sRevision)) to iSeparatorPos
69813>>>>>>>            If (iSeparatorPos > 0) Begin
69815>>>>>>>                Move (Left(sRevision, iSeparatorPos - 1)) to iPartRev
69816>>>>>>>                Move (Right(sRevision, Length(sRevision) - iSeparatorPos)) to sRevision
69817>>>>>>>                Increment iCurrentPart
69818>>>>>>>            End
69818>>>>>>>>
69818>>>>>>>            Else If (sRevision <> "") Begin
69821>>>>>>>                Move sRevision to iPartRev
69822>>>>>>>                Move "" to sRevision
69823>>>>>>>                Increment iCurrentPart
69824>>>>>>>            End
69824>>>>>>>>
69824>>>>>>>            Else ;                Move -1 to iPartRev
69826>>>>>>>        Until (iCurrentPart >= iPartNum or iPartRev = -1)
69828>>>>>>>        
69828>>>>>>>        Function_Return iPartRev
69829>>>>>>>    End_Function
69830>>>>>>>    
69830>>>>>>>    
69830>>>>>>>    
69830>>>>>>>    //
69830>>>>>>>    //  Returns the major revision of the CK
69830>>>>>>>    //
69830>>>>>>>    
69830>>>>>>>    Function CKMajorRevision Returns Integer
69832>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 1, CKRevision(Current_Object)))
69833>>>>>>>    End_Function
69834>>>>>>>    
69834>>>>>>>    
69834>>>>>>>    
69834>>>>>>>    //  Returns the minor revision of the CK
69834>>>>>>>    //
69834>>>>>>>    
69834>>>>>>>    Function CKMinorRevision Returns Integer
69836>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 2, CKRevision(Current_Object)))
69837>>>>>>>    End_Function
69838>>>>>>>    
69838>>>>>>>    
69838>>>>>>>    //  Returns the release revision of the CK
69838>>>>>>>    //
69838>>>>>>>    
69838>>>>>>>    Function CKReleaseRevision Returns Integer
69840>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 3, CKRevision(Current_Object)))
69841>>>>>>>    End_Function
69842>>>>>>>    
69842>>>>>>>    
69842>>>>>>>    //  Returns the major revision of the CK
69842>>>>>>>    //
69842>>>>>>>    
69842>>>>>>>    Function CKBuildRevision Returns Integer
69844>>>>>>>        Function_Return (ExtractPartFromRevision (Current_Object, 4, CKRevision(Current_Object)))
69845>>>>>>>    End_Function
69846>>>>>>>    
69846>>>>>>>    
69846>>>>>>>    //  Determines if the CK conforms to a passed minimal revsion.
69846>>>>>>>    //
69846>>>>>>>    
69846>>>>>>>    Function IsMinimalRevision Integer iMajor Integer iMinor Integer iRelease Integer iBuild Returns Integer
69848>>>>>>>        If (iMajor < CKMajorRevision(Current_object)) ;            Function_Return (True)
69851>>>>>>>        Else If (iMajor = CKMajorRevision(Current_object)) Begin
69854>>>>>>>            If (iMinor < CKMinorRevision(Current_object)) ;                Function_Return (True)
69857>>>>>>>            Else If (iMinor = CKMinorRevision(Current_object)) Begin
69860>>>>>>>                If (iRelease < CKReleaseRevision(Current_object)) ;                    Function_Return (True)
69863>>>>>>>                Else If (iRelease = CKReleaseRevision(Current_object) and iBuild <= CKBuildRevision(Current_object)) ;                    Function_Return (True)
69867>>>>>>>            End
69867>>>>>>>>
69867>>>>>>>        End
69867>>>>>>>>
69867>>>>>>>        
69867>>>>>>>        Function_Return (False)
69868>>>>>>>    End_Function
69869>>>>>>>    
69869>>>>>>>    //   Functions to query the Pervasive.SQL version:
69869>>>>>>>    //       PSQLRequesterVersionInfo    Integer iFileNum Returns String
69869>>>>>>>    //       PSQLLocalEngineVersionInfo  Integer iFileNum Returns String
69869>>>>>>>    //       PSQLServerEngineVersionInfo Integer iFileNum Returns String
69869>>>>>>>    //
69869>>>>>>>    //   All 3 functions return the version of a Pervasive.SQL component
69869>>>>>>>    //   in the following format:
69869>>>>>>>    //       <version>.<revision>.<type>
69869>>>>>>>    //   possible values for <type>:
69869>>>>>>>    //       9 for 32-bit Windows workstation/workgroup engine or Linux
69869>>>>>>>    //         server using Workgroup authentication mode
69869>>>>>>>    //       C for client cache engine
69869>>>>>>>    //       D for DOS workstation
69869>>>>>>>    //       N for client Requester
69869>>>>>>>    //       S for NetWare server
69869>>>>>>>    //       T for 32-bit Windows server engine
69869>>>>>>>    //       U for Linux server using PAM or BTPASSWD authentication
69869>>>>>>>    //
69869>>>>>>>    //   example:
69869>>>>>>>    //       8.50.T
69869>>>>>>>    //   will be returned for a Pervasive.SQL 8.5 Server Engine running on
69869>>>>>>>    //   32-bits Windows server.
69869>>>>>>>    //
69869>>>>>>>    //   The FileNumber parameter must specify an opened table or 0.
69869>>>>>>>    //   For PSQLServerEngineVersionInfo the FileNumber can not be 0.
69869>>>>>>>    //
69869>>>>>>>    //   If the version information is not available or can not be obtained
69869>>>>>>>    //   the functions will return "0.0.0"
69869>>>>>>>    
69869>>>>>>>    //  Returns the version information of the
69869>>>>>>>    //           Pervasive.SQL Client requester.
69869>>>>>>>    
69869>>>>>>>    Function PSQLRequesterVersionInfo Integer iFileNum Returns String
69871>>>>>>>        
69871>>>>>>>        String  sDriverID
69871>>>>>>>        String  sVersion
69871>>>>>>>        String  sVoid
69871>>>>>>>        Integer iRetval
69871>>>>>>>        
69871>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69871>>>>>>>        // This error would otherwise be raised when we have an older
69871>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69871>>>>>>>        Send Ignore_error to Error_object_Id 20491
69872>>>>>>>        Get psDriverID to sDriverID
69873>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69874>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLREQUESTERVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69879>>>>>>>        Send Trap_Error to Error_object_Id 20491
69880>>>>>>>        If (Trim(sVersion) = "") Begin
69882>>>>>>>            // Unable to get the revision. return all zeroes.
69882>>>>>>>            Move "0.0.0" to sVersion
69883>>>>>>>        End
69883>>>>>>>>
69883>>>>>>>        Function_Return sVersion
69884>>>>>>>    End_Function
69885>>>>>>>    
69885>>>>>>>    //           Pervasive.SQL Engine
69885>>>>>>>    
69885>>>>>>>    Function PSQLLocalEngineVersionInfo Integer iFileNum Returns String
69887>>>>>>>        
69887>>>>>>>        String  sDriverID
69887>>>>>>>        String  sVersion
69887>>>>>>>        String  sVoid
69887>>>>>>>        Integer iRetval
69887>>>>>>>        
69887>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69887>>>>>>>        // This error would otherwise be raised when we have an older
69887>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69887>>>>>>>        Send Ignore_error to Error_object_Id 20491
69888>>>>>>>        Get psDriverID to sDriverID
69889>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69890>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLLOCALENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69895>>>>>>>        Send Trap_Error to Error_object_Id 20491
69896>>>>>>>        If (Trim(sVersion) = "") Begin
69898>>>>>>>            // Unable to get the revision. return all zeroes.
69898>>>>>>>            Move "0.0.0" to sVersion
69899>>>>>>>        End
69899>>>>>>>>
69899>>>>>>>        Function_Return sVersion
69900>>>>>>>    End_Function
69901>>>>>>>    
69901>>>>>>>    //  Returns the version information of the
69901>>>>>>>    //           Pervasive.SQL Server Engine
69901>>>>>>>    
69901>>>>>>>    Function PSQLServerEngineVersionInfo Integer iFileNum Returns String
69903>>>>>>>        
69903>>>>>>>        String  sDriverID
69903>>>>>>>        String  sVersion
69903>>>>>>>        String  sVoid
69903>>>>>>>        Integer iRetval
69903>>>>>>>        
69903>>>>>>>        // Ignore error 20491 DFBTRERR_INVALID_DRIVER_FUNCTION_CALL.
69903>>>>>>>        // This error would otherwise be raised when we have an older
69903>>>>>>>        // DFBTRDRV version that has no DFBTRFN_CKREVISION function
69903>>>>>>>        Send Ignore_error to Error_object_Id 20491
69904>>>>>>>        Get psDriverID to sDriverID
69905>>>>>>>        Move (Repeat(" ", 255)) to sVersion
69906>>>>>>>        Call_Driver iFileNum sDRiverID Function DFBTRFN_PSQLSERVERENGINEVERSIONINFO Callback 0 Passing sVersion sVoid 0 Result iRetval
69911>>>>>>>        Send Trap_Error to Error_object_Id 20491
69912>>>>>>>        If (Trim(sVersion) = "") Begin
69914>>>>>>>            // Unable to get the revision. return all zeroes.
69914>>>>>>>            Move "0.0.0" to sVersion
69915>>>>>>>        End
69915>>>>>>>>
69915>>>>>>>        Function_Return sVersion
69916>>>>>>>    End_Function
69917>>>>>>>    
69917>>>>>>>End_Class
69918>>>>>>>
69918>>>>>>>
69918>>>>>Use MSSqldrv.pkg
Including file: MSSqldrv.pkg    (C:\Program Files\DataFlex 20.0\Pkg\MSSqldrv.pkg)
69918>>>>>>>//     Package that declares MS SQL driver constants and functions.
69918>>>>>>>//     This package can be used by developers who want to add Data Access
69918>>>>>>>//     MS SQL Client specific code to a DataFlex application.
69918>>>>>>>
69918>>>>>>>Use Cli.pkg
69918>>>>>>>Use SQL.pkg
69918>>>>>>>
69918>>>>>>>//   Driver Indentification
69918>>>>>>>
69918>>>>>>>//   Error number constants
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>//   Possible DF_DRIVER_SQLSERVER_CLIENT_VERSION values
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>// SQL Server spcific types.
69918>>>>>>>Define SQL_SS_TIMESTAMPOFFSET   for   (-155) //SQL server datetimeoffset type */
69918>>>>>>>Define SQL_SS_TIME2             for   (-154) //SQL server time type */
69918>>>>>>>Define SQL_SS_XML               for   (-152) //SQL server xml type */
69918>>>>>>>Define SQL_SS_VARIANT           for   (-150) //SQL server variant type */
69918>>>>>>>
69918>>>>>>>// SQL Server spcific types.
69918>>>>>>>Define SQL_TYPE_TIMESTAMP2      for   (-200) //SQL server datetime2 type */
69918>>>>>>>Define SQL_VARCHARMAX           for   (-201) //SQL server varchar(max) type */
69918>>>>>>>Define SQL_WVARCHARMAX          for   (-202) //SQL server wvarchar(max) type */
69918>>>>>>>Define SQL_VARBINARYMAX         for   (-203) //SQL server varbinary(max) type */
69918>>>>>>>Define SQL_TYPE_MONEY           for   (-204) //SQL server money type */
69918>>>>>>>Define SQL_TYPE_SMALLMONEY      for   (-205) //SQL server smallmoney type */
69918>>>>>>>Define SQL_TYPE_SMALLDATETIME   for   (-206) //SQL server smalldatetype type */
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>//   MSSQL_SetConstraint <FileNum> <ConstraintText>
69918>>>>>>>//
69918>>>>>>>//     Setup a constraint for a file.
69918>>>>>>>
69918>>>>>>>
69918>>>>>>>Class cMSSQLHandler is a cCLIHandler
69919>>>>>>>    
69919>>>>>>>    Procedure Construct_Object
69921>>>>>>>        Forward Send Construct_Object
69923>>>>>>>        
69923>>>>>>>        Set psDriverID to MSSQLDRV_ID
69924>>>>>>>    End_Procedure
69925>>>>>>>    
69925>>>>>>>    
69925>>>>>>>    
69925>>>>>>>    //   Extract the list from the out connect string.
69925>>>>>>>    Function ExtractList String sOutConnStr Integer hoStore Returns Integer
69927>>>>>>>        String  sItem
69927>>>>>>>        Integer iStart
69927>>>>>>>        Integer iEnd
69927>>>>>>>        
69927>>>>>>>        If (hoStore = 0) ;            Move Current_object to hoStore
69930>>>>>>>        
69930>>>>>>>        Send Delete_Data to hoStore
69931>>>>>>>        Move (Pos("{", sOutConnStr)) to iStart
69932>>>>>>>        While (iStart > 0)
69936>>>>>>>            Move (Right(sOutConnStr, Length(sOutConnStr) - iStart)) to sOutConnStr
69937>>>>>>>            If (Left(sOutConnStr, 1) = "}") ;                Move 0 to iStart
69940>>>>>>>            Else Begin
69941>>>>>>>                Move (Pos(",", sOutConnStr)) to iStart
69942>>>>>>>                Move (Pos("}", sOutConnStr)) to iEnd
69943>>>>>>>                If ((iStart = 0) or (iEnd < iStart)) ;                    Move iEnd to iStart
69946>>>>>>>                
69946>>>>>>>                If (iStart > 0) ;                    Set Value of hoStore  (Item_Count(Current_Object)) to (Left(sOutConnStr, iStart - 1))
69949>>>>>>>                
69949>>>>>>>                If (iStart = iEnd) ;                    Move 0 to iStart
69952>>>>>>>            End
69952>>>>>>>>
69952>>>>>>>        Loop
69953>>>>>>>>
69953>>>>>>>        
69953>>>>>>>        Function_Return (Item_Count(hoStore))
69954>>>>>>>    End_Procedure
69955>>>>>>>    
69955>>>>>>>    
69955>>>>>>>    
69955>>>>>>>    //   Call the driver's browse connect function
69955>>>>>>>    Function BrowseConnect String sInConnStr Returns String
69957>>>>>>>        String  sDriver
69957>>>>>>>        String  sOutConnStr
69957>>>>>>>        Integer iArg
69957>>>>>>>        Integer iRetval
69957>>>>>>>        
69957>>>>>>>        Get psDriverID to sDriver
69958>>>>>>>        If (sDriver <> "") Begin
69960>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
69961>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
69966>>>>>>>        End
69966>>>>>>>>
69966>>>>>>>        
69966>>>>>>>        Function_Return sOutConnStr
69967>>>>>>>    End_Function// BrowseConnect
69968>>>>>>>    
69968>>>>>>>    
69968>>>>>>>    Function BrowseConnectLocal String sInConnStr Returns String
69970>>>>>>>        String  sDriver
69970>>>>>>>        String  sOutConnStr
69970>>>>>>>        Integer iArg
69970>>>>>>>        Integer iRetval
69970>>>>>>>        
69970>>>>>>>        Move 1 to iArg // Browses only local
69971>>>>>>>        
69971>>>>>>>        Get psDriverID to sDriver
69972>>>>>>>        If (sDriver <> "") Begin
69974>>>>>>>            Move (Repeat(" ", 8192)) to sOutConnStr
69975>>>>>>>            Call_Driver 0 sDRiver Function CLI_BROWSECONNECT Callback 0 Passing sInConnStr sOutConnStr iArg Result iRetval
69980>>>>>>>        End
69980>>>>>>>>
69980>>>>>>>        
69980>>>>>>>        Function_Return sOutConnStr
69981>>>>>>>    End_Function// BrowseConnect
69982>>>>>>>    
69982>>>>>>>    
69982>>>>>>>    Function EnumerateServersNetworkOrLocal Integer iNetworkLocal  Returns Integer
69984>>>>>>>        
69984>>>>>>>        String  sServerList
69984>>>>>>>        Integer iNumServers
69984>>>>>>>        Integer iDriver
69984>>>>>>>        Integer iClientVersion
69984>>>>>>>        String  sDriver
69984>>>>>>>        
69984>>>>>>>        Get DriverIndex MSSQLDRV_ID to iDriver
69985>>>>>>>        
69985>>>>>>>        If (iDriver) Begin
69987>>>>>>>            
69987>>>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iDriver to iClientVersion
69990>>>>>>>            
69990>>>>>>>            Get SqlServerClientDriverName iClientVersion to sDriver
69991>>>>>>>            
69991>>>>>>>            Move ("DRIVER={" + sDriver + "};") to sDriver
69992>>>>>>>            If (iNetworkLocal = 0) Begin
69994>>>>>>>                Get BrowseConnect sDriver to sServerList
69995>>>>>>>            End
69995>>>>>>>>
69995>>>>>>>            Else Begin
69996>>>>>>>                Get BrowseConnectLocal sDriver to sServerList
69997>>>>>>>            End
69997>>>>>>>>
69997>>>>>>>            Get ExtractList sServerList Current_object to iNumServers
69998>>>>>>>        End
69998>>>>>>>>
69998>>>>>>>        
69998>>>>>>>        Function_Return iNumServers
69999>>>>>>>        
69999>>>>>>>    End_Function
70000>>>>>>>    
70000>>>>>>>    //   Enumerate the available SQL Server database servers
70000>>>>>>>    //   This function will return all SQL Server instances on the network.
70000>>>>>>>    //   This may take a long time.
70000>>>>>>>    //   To enumerate only local SQL Server instances use EnumerateServersLocal
70000>>>>>>>    Function EnumerateServers Returns Integer
70002>>>>>>>        
70002>>>>>>>        Integer iNumServers
70002>>>>>>>        Integer iNetworkLocal
70002>>>>>>>        
70002>>>>>>>        Move 0 to iNetworkLocal // 0 = enumerate network servers
70003>>>>>>>        
70003>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
70004>>>>>>>        
70004>>>>>>>        Function_Return iNumServers
70005>>>>>>>        
70005>>>>>>>    End_Function
70006>>>>>>>    
70006>>>>>>>    
70006>>>>>>>    //   Enumerate the available SQL Server database servers
70006>>>>>>>    //   This function will return only return SQL Server instance on the local machine
70006>>>>>>>    //   To enumerate all SQL Server instances in a network use EnumerateServers
70006>>>>>>>    Function EnumerateServersLocal Returns Integer
70008>>>>>>>        
70008>>>>>>>        Integer iNumServers
70008>>>>>>>        Integer iNetworkLocal
70008>>>>>>>        
70008>>>>>>>        Move 1 to iNetworkLocal // 1 = enumerate local servers
70009>>>>>>>        
70009>>>>>>>        Get EnumerateServersNetworkOrLocal iNetworkLocal to iNumServers
70010>>>>>>>        
70010>>>>>>>        Function_Return iNumServers
70011>>>>>>>        
70011>>>>>>>    End_Function
70012>>>>>>>    
70012>>>>>>>    
70012>>>>>>>    
70012>>>>>>>    //   Enumerate database in a given server.
70012>>>>>>>    Function EnumerateDatabases String sServer String sUser String sPassWord Returns Integer
70014>>>>>>>        Integer hoSQL
70014>>>>>>>        String  sConnect
70014>>>>>>>        String  sDatabase
70014>>>>>>>        Integer hdbc
70014>>>>>>>        Integer hstmt
70014>>>>>>>        Integer iFetchResult
70014>>>>>>>        
70014>>>>>>>        If (Num_Arguments < 3) ;            Move "" to sPassWord
70017>>>>>>>        If (Num_Arguments < 2) ;            Move "" to sUser
70020>>>>>>>        
70020>>>>>>>        If (sUser <> "") ;            Move ("SERVER=" + Trim(sServer) + ";UID=" + Trim(sUser) + ";PWD=" + Trim(sPassword) + ";") to sConnect
70023>>>>>>>        Else ;            Move ("SERVER=" + Trim(sServer) + ";Trusted_Connection=yes") to sConnect
70025>>>>>>>        
70025>>>>>>>        Object oEnumDBSQLmanager is a cSQLHandleManager
70027>>>>>>>            Move Current_Object to hoSQL
70028>>>>>>>        End_Object
70029>>>>>>>        
70029>>>>>>>        If (hoSQL <> 0) Begin
70031>>>>>>>            Get SQLConnect of hoSQL "MSSQLDRV" sConnect to hdbc
70032>>>>>>>            If (hdbc <> 0) Begin
70034>>>>>>>                Get SQLOpen of hdbc to hstmt
70035>>>>>>>                If (hstmt <> 0) Begin
70037>>>>>>>                    //   We could do a direct select on the sysdatabases table but we use
70037>>>>>>>                    //   the stored procedure sp_database instead. SQL Server recommends this
70037>>>>>>>                    //   approach in case meta data might change, the stored procedure will
70037>>>>>>>                    //   stay the same.
70037>>>>>>>                    Send SQLSetProcedureName to hstmt "sp_databases"
70038>>>>>>>                    Send SQLCall to hstmt
70039>>>>>>>                    Repeat
70039>>>>>>>>
70039>>>>>>>                        Get SQLFetch of hstmt to iFetchResult
70040>>>>>>>                        If (iFetchResult <> 0) Begin
70042>>>>>>>                            Get SQLColumnValue of hstmt 1 to sDatabase
70043>>>>>>>                            Set Value  (Item_Count(Current_Object)) to sDatabase
70044>>>>>>>                        End
70044>>>>>>>>
70044>>>>>>>                    Until (iFetchResult = 0)
70046>>>>>>>                    
70046>>>>>>>                    Send SQLClose to hstmt
70047>>>>>>>                End
70047>>>>>>>>
70047>>>>>>>                Send SQLDisconnect to hdbc
70048>>>>>>>            End
70048>>>>>>>>
70048>>>>>>>        End
70048>>>>>>>>
70048>>>>>>>        Send Destroy_Object to hoSQL
70049>>>>>>>        
70049>>>>>>>        Function_Return (Item_Count(Current_Object))
70050>>>>>>>    End_Function
70051>>>>>>>    
70051>>>>>>>    
70051>>>>>>>    Function SqlServerClientVersionName Integer iClientVersion  Returns String
70053>>>>>>>        
70053>>>>>>>        String  sSqlServerClientVersionName
70053>>>>>>>        
70053>>>>>>>        
70053>>>>>>>        Case Begin
70053>>>>>>>            
70053>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
70055>>>>>>>                Move SQLSERVER2017CLIENTNAME to sSqlServerClientVersionName
70056>>>>>>>                Case Break
70057>>>>>>>                
70057>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
70060>>>>>>>                Move SQLSERVER2016CLIENTNAME to sSqlServerClientVersionName
70061>>>>>>>                Case Break
70062>>>>>>>            
70062>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
70065>>>>>>>                Move SQLSERVER2014CLIENTNAME to sSqlServerClientVersionName
70066>>>>>>>                Case Break
70067>>>>>>>            
70067>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
70070>>>>>>>                Move SQLSERVER2012CLIENTNAME to sSqlServerClientVersionName
70071>>>>>>>                Case Break
70072>>>>>>>            
70072>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
70075>>>>>>>                Move SQLSERVER2008CLIENTNAME to sSqlServerClientVersionName
70076>>>>>>>                Case Break
70077>>>>>>>            
70077>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
70080>>>>>>>                Move SQLSERVER2005CLIENTNAME to sSqlServerClientVersionName
70081>>>>>>>                Case Break
70082>>>>>>>            
70082>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
70085>>>>>>>                Move SQLSERVER2000CLIENTNAME to sSqlServerClientVersionName
70086>>>>>>>                Case Break
70087>>>>>>>            
70087>>>>>>>            Case Else
70087>>>>>>>                Move SQLSERVERUNKNOWNCLIENTNAME to sSqlServerClientVersionName
70088>>>>>>>                
70088>>>>>>>        Case End
70088>>>>>>>        
70088>>>>>>>        
70088>>>>>>>        Function_Return sSqlServerClientVersionName
70089>>>>>>>        
70089>>>>>>>    End_Function
70090>>>>>>>
70090>>>>>>>
70090>>>>>>>    Function SqlServerClientDriverName Integer iClientVersion  Returns String
70092>>>>>>>        
70092>>>>>>>        String  sSqlServerClientDriverName
70092>>>>>>>        
70092>>>>>>>        Case Begin
70092>>>>>>>            
70092>>>>>>>            Case (iClientVersion = SQLSERVER2017CLIENT)
70094>>>>>>>                Move SQLSERVER2017DRVRSTR to sSqlServerClientDriverName
70095>>>>>>>                Case Break
70096>>>>>>>                
70096>>>>>>>            Case (iClientVersion = SQLSERVER2016CLIENT)
70099>>>>>>>                Move SQLSERVER2016DRVRSTR to sSqlServerClientDriverName
70100>>>>>>>                Case Break
70101>>>>>>>            
70101>>>>>>>            Case (iClientVersion = SQLSERVER2014CLIENT)
70104>>>>>>>                Move SQLSERVER2014DRVRSTR to sSqlServerClientDriverName
70105>>>>>>>                Case Break
70106>>>>>>>            
70106>>>>>>>            Case (iClientVersion = SQLSERVER2012CLIENT)
70109>>>>>>>                Move SQLSERVER2012DRVRSTR to sSqlServerClientDriverName
70110>>>>>>>                Case Break
70111>>>>>>>            
70111>>>>>>>            Case (iClientVersion = SQLSERVER2008CLIENT)
70114>>>>>>>                Move SQLSERVER2008DRVRSTR to sSqlServerClientDriverName
70115>>>>>>>                Case Break
70116>>>>>>>            
70116>>>>>>>            Case (iClientVersion = SQLSERVER2005CLIENT)
70119>>>>>>>                Move SQLSERVER2005DRVRSTR to sSqlServerClientDriverName
70120>>>>>>>                Case Break
70121>>>>>>>            
70121>>>>>>>            Case (iClientVersion = SQLSERVER2000CLIENT)
70124>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
70125>>>>>>>                Case Break
70126>>>>>>>            
70126>>>>>>>            Case Else
70126>>>>>>>                Move SQLSERVER2000DRVRSTR to sSqlServerClientDriverName
70127>>>>>>>                
70127>>>>>>>        Case End
70127>>>>>>>        
70127>>>>>>>        
70127>>>>>>>        Function_Return sSqlServerClientDriverName
70128>>>>>>>        
70128>>>>>>>    End_Function
70129>>>>>>>    
70129>>>>>>>    
70129>>>>>>>End_Class
70130>>>>>>>
70130>>>>>>>
70130>>>>>
70130>>>>>Register_Function phoWorkspace Returns Handle
70130>>>>>Register_Function Help_filename Returns String
70130>>>>>Register_Function GetHelpFile Returns String
70130>>>>>Register_Function pbEnterKeyAsTabKey Returns Boolean
70130>>>>>
70130>>>>>// Do not call directly, use the wrapper function instead
70130>>>>>External_Function WNetGetUserW "WNetGetUserW" MPR.DLL ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
70131>>>>>
70131>>>>>// Wrapper Function WNetGetUser
70131>>>>>Function WNetGetUser Global ;    Pointer lpName ;    Pointer lpUser_Name ;    Pointer lpLength ;    Returns DWord
70133>>>>>    
70133>>>>>    DWord   dwResult     
70133>>>>>    UWide   uwName uwUserName
70133>>>>>    UWide   uwName uwUserName
70133>>>>>        
70133>>>>>    Send StringToWide lpName (&uwName)
70134>>>>>    
70134>>>>>    Send WideSetBuffer lpUser_Name lpLength (&uwUserName)    
70135>>>>>    
70135>>>>>    Move (WNetGetUserW (uwName.lpUText, uwUserName.lpUText, lpLength)) to dwResult
70136>>>>>    
70136>>>>>    Send WideToString (&uwUserName) lpUser_Name
70137>>>>>    
70137>>>>>    Function_Return dwResult
70138>>>>>End_Function
70139>>>>>
70139>>>>>//    This function reads the current username Of windows and returns that
70139>>>>>//    name or an text unknown user
70139>>>>>Function Network_User_Name for cDesktop Returns String
70141>>>>>    WString wName
70141>>>>>    Integer iRetval iLength
70141>>>>>    
70141>>>>>    Move 0 to iLength
70142>>>>>    Move (WNetGetUserW (0, 0, AddressOf (iLength))) to iRetval
70143>>>>>    Move (ZeroString(iLength)) to wName
70144>>>>>    Move (WNetGetUserW (0, AddressOf (wName), AddressOf (iLength))) to iRetval
70145>>>>>    
70145>>>>>    If (iRetval = NO_ERROR) Begin
70147>>>>>        Function_Return (CString (wName))
70148>>>>>    End
70148>>>>>>
70148>>>>>    
70148>>>>>    Function_Return "User Unknown"
70149>>>>>End_Function
70150>>>>>
70150>>>>>External_Function GlobalMemoryStatus "GlobalMemoryStatus" Kernel32.Dll Pointer lpsMemoryStatus Returns Integer
70151>>>>>
70151>>>>>External_Function GlobalMemoryStatusEx "GlobalMemoryStatusEx" Kernel32.Dll Pointer lpMemoryStatus Returns Integer
70152>>>>>
70152>>>>>Class SysinfoDisplay is a cTextEdit
70153>>>>>    Procedure Construct_Object
70155>>>>>        Forward Send Construct_Object
70157>>>>>        
70157>>>>>        Set Location to 6 6
70158>>>>>        Set Size to 110 255
70159>>>>>        Set Read_Only_State to True
70160>>>>>        Set pbWrap to False
70161>>>>>    End_Procedure
70162>>>>>    
70162>>>>>    //    This method will show the name Of the current directory in the system
70162>>>>>    //    information box
70162>>>>>    Procedure Show_Current_Directory
70164>>>>>        String sDir
70164>>>>>        
70164>>>>>        Get_Current_Directory to sDir
70165>>>>>        
70165>>>>>        Send AppendTextLn (SFormat (C_$CurrentDirectory, sDir))
70166>>>>>    End_Procedure
70167>>>>>    
70167>>>>>    Procedure Show_Windows_Directory
70169>>>>>        String sWindir
70169>>>>>        
70169>>>>>        Get_Windows_Directory to sWindir
70170>>>>>        
70170>>>>>        Send AppendTextLn (SFormat (C_$WindowsDirectory, sWindir))
70171>>>>>    End_Procedure
70172>>>>>    
70172>>>>>    Procedure Show_Current_User
70174>>>>>        Send AppendTextLn (SFormat (C_$NetworkUserName, Network_User_Name (Self)))
70175>>>>>    End_Procedure
70176>>>>>    
70176>>>>>    Procedure Show_Number_Format
70178>>>>>        Integer iFormat
70178>>>>>        String sFormatText
70178>>>>>        
70178>>>>>        Get_Attribute DF_THOUSANDS_SEPARATOR to iFormat
70181>>>>>        Move (Character (iFormat)) to sFormatText
70182>>>>>        Send AppendTextLn (SFormat (C_$ThousandsSeparator, sFormatText, iFormat))
70183>>>>>        
70183>>>>>        Get_Attribute DF_DECIMAL_SEPARATOR to iFormat
70186>>>>>        Move (Character (iFormat)) to sFormatText
70187>>>>>        Send AppendTextLn (SFormat (C_$DecimalSeparator, sFormatText))
70188>>>>>    End_Procedure
70189>>>>>    
70189>>>>>    Procedure Show_Filelist_Name
70191>>>>>        String sFilename
70191>>>>>        
70191>>>>>        Get_Attribute DF_FILELIST_NAME to sFilename
70194>>>>>        
70194>>>>>        Send AppendTextLn (SFormat (C_$CurrentFilelist, sFilename))
70195>>>>>        Send AppendTextLn ""
70196>>>>>    End_Procedure
70197>>>>>    
70197>>>>>    Procedure Show_Lock_Delay
70199>>>>>        Integer iLockdelay
70199>>>>>        
70199>>>>>        Get_Attribute DF_LOCK_DELAY to iLockdelay
70202>>>>>        
70202>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingDelay, iLockDelay))
70203>>>>>    End_Procedure
70204>>>>>    
70204>>>>>    Procedure Show_Lock_Timeout
70206>>>>>        Integer iLockTimeout
70206>>>>>        
70206>>>>>        Get_Attribute DF_LOCK_TIMEOUT to iLockTimeout
70209>>>>>        
70209>>>>>        Send AppendTextLn (SFormat (C_$DatabaseLockingTimeout, iLockTimeOut))
70210>>>>>    End_Procedure
70211>>>>>    
70211>>>>>    Procedure Show_Screen_Size
70213>>>>>        Integer iYscreensize iXscreensize
70213>>>>>        
70213>>>>>        Move (GetSystemMetrics (SM_CXSCREEN)) to iXscreensize
70214>>>>>        Move (GetSystemMetrics (SM_CYSCREEN)) to iYscreensize
70215>>>>>        
70215>>>>>        Send AppendTextLn (SFormat (C_$VideoResolution, iXscreensize, iYscreensize))
70216>>>>>    End_Procedure
70217>>>>>    
70217>>>>>    Procedure Show_Page_Size
70219>>>>>        Send AppendTextLn (SFormat (C_$PageEndFormFeed, Pageend, Pagefeed))
70220>>>>>    End_Procedure
70221>>>>>    
70221>>>>>    Procedure Show_Date
70223>>>>>        Date dToday
70223>>>>>        
70223>>>>>        Move (CurrentDateTime()) to  dToday
70224>>>>>        
70224>>>>>        Send AppendTextLn (SFormat (C_$CurrentSystemDate, String (dToday)))
70225>>>>>    End_Procedure
70226>>>>>    
70226>>>>>    Procedure Show_Date_Format
70228>>>>>        Integer iDateFormat
70228>>>>>        String sDateFormat
70228>>>>>        
70228>>>>>        Get_Attribute DF_DATE_FORMAT to iDateFormat
70231>>>>>        Case Begin
70231>>>>>            Case (iDateFormat = DF_DATE_USA)
70233>>>>>                Move C_$USA to sDateFormat
70234>>>>>                Case Break
70235>>>>>            Case (iDateFormat = DF_DATE_EUROPEAN)
70238>>>>>                Move C_$European to sDateFormat
70239>>>>>                Case Break
70240>>>>>            Case (iDateFormat = DF_DATE_MILITARY)
70243>>>>>                Move C_$Military to sDateFormat
70244>>>>>                Case Break
70245>>>>>            Case Else
70245>>>>>                Move C_$UnknownDateType to sDateFormat
70246>>>>>                Case Break
70247>>>>>        Case End
70247>>>>>        
70247>>>>>        Send AppendTextLn (SFormat (C_$DateFormat, sDateformat))
70248>>>>>    End_Procedure
70249>>>>>    
70249>>>>>    Procedure Show_Systemresources
70251>>>>>        tWinMemoryStatusEx MemoryStatusInfo
70251>>>>>        tWinMemoryStatusEx MemoryStatusInfo
70251>>>>>        Integer iRetval
70251>>>>>        
70251>>>>>        Move (SizeOfType (tWinMemoryStatusEx)) to MemoryStatusInfo.dwLength
70252>>>>>        Move (GlobalMemoryStatusEx (AddressOf (MemoryStatusInfo))) to iRetval
70253>>>>>        If (iRetval = 0) Begin
70255>>>>>            Move (ShowLastError ()) to iRetval
70256>>>>>        End
70256>>>>>>
70256>>>>>        
70256>>>>>        Send AppendTextLn (SFormat (C_$AvailableMemory, MemoryStatusInfo.ullTotalPhys))
70257>>>>>        Send AppendTextLn (SFormat (C_$MemoryUtilization, MemoryStatusInfo.dwMemoryLoad))
70258>>>>>        Send AppendTextLn (SFormat (C_$AvailablePhysicalMemory, Integer ( Real (MemoryStatusInfo.ullAvailPhys) / Real (MemoryStatusInfo.ullTotalPhys) * 100.0)))
70259>>>>>        Send AppendTextLn (SFormat (C_$AvailablePagefileSpace, Integer ( Real (MemoryStatusInfo.ullAvailPageFile) / Real (MemoryStatusInfo.ullTotalPageFile) * 100.0)))
70260>>>>>        Send AppendTextLn (SFormat (C_$AvailableVirtualMemory, Integer ( Real (MemoryStatusInfo.ullAvailVirtual) / Real (MemoryStatusInfo.ullTotalVirtual) * 100.0)))
70261>>>>>    End_Procedure
70262>>>>>    
70262>>>>>    Procedure Show_Registration
70264>>>>>        String sRegName
70264>>>>>        Integer iSN iMaxUsers
70264>>>>>        
70264>>>>>        Registration sRegName iSN
70265>>>>>>
70265>>>>>        
70265>>>>>        Get_Licensed_Max_Users to iMaxUsers
70266>>>>>        
70266>>>>>        Send AppendTextLn ""
70267>>>>>        Send AppendTextLn (SFormat (C_$Serial, iSN))
70268>>>>>        Send AppendTextLn (SFormat (C_$RegName, sRegName))
70269>>>>>        Send AppendTextLn (SFormat (C_$MaxNumUsers, iMaxUsers))
70270>>>>>    End_Procedure
70271>>>>>    
70271>>>>>    // If workspaces are used, we will send the message EnumerateWorkspaceData
70271>>>>>    // To the workspace object passing the an object and message To send back
70271>>>>>    // To this object. It is expected that the workspace object will send this
70271>>>>>    // message for every line Of information it wants displayed (passing the
70271>>>>>    // information To be displayed
70271>>>>>    Register_Procedure EnumerateWorkspaceData Handle hObjId Handle hmMessId
70271>>>>>    
70271>>>>>    Procedure Show_ServicePack
70273>>>>>        String sKey sVersionDescription sVersion
70273>>>>>        Handle hoRegistry
70273>>>>>        Boolean bExists bOpened
70273>>>>>        
70273>>>>>        Get Create (RefClass (cRegistry)) to hoRegistry
70274>>>>>        Set phRootKey of hoRegistry to HKEY_LOCAL_MACHINE
70275>>>>>        Set pfAccessRights of hoRegistry to KEY_READ
70276>>>>>        
70276>>>>>        Move C_DFVersionRegistryRoot to sKey
70277>>>>>        Get KeyExists of hoRegistry sKey to bExists
70278>>>>>        If (bExists) Begin
70280>>>>>            Get OpenKey of hoRegistry sKey to bOpened
70281>>>>>            If (bOpened) Begin
70283>>>>>                Get ValueExists of hoRegistry "CurrentVersionDescription" to bExists
70284>>>>>                If (bExists) Begin
70286>>>>>                    Get ReadString of hoRegistry "CurrentVersionDescription" to sVersionDescription
70287>>>>>                End
70287>>>>>>
70287>>>>>                
70287>>>>>                Get ValueExists of hoRegistry "CurrentVersion" to bExists
70288>>>>>                If (bExists) Begin
70290>>>>>                    Get ReadString of hoRegistry "CurrentVersion" to sVersion
70291>>>>>                End
70291>>>>>>
70291>>>>>                Send CloseKey of hoRegistry
70292>>>>>            End
70292>>>>>>
70292>>>>>        End
70292>>>>>>
70292>>>>>        Send Destroy of hoRegistry
70293>>>>>        
70293>>>>>        If (sVersionDescription <> "") Begin
70295>>>>>            Send AppendTextLn (sVersionDescription * "-" * sVersion)
70296>>>>>            Send AppendTextLn ""
70297>>>>>        End
70297>>>>>>
70297>>>>>    End_Procedure
70298>>>>>    
70298>>>>>    
70298>>>>>    Procedure Show_WorkspaceInformation
70300>>>>>        Integer hoWorkspace
70300>>>>>        
70300>>>>>        If (ghoApplication <> 0) Begin
70302>>>>>            Get phoWorkspace of ghoApplication to hoWorkspace
70303>>>>>            If (hoWorkspace <> 0) Begin
70305>>>>>                Send EnumerateWorkspaceData of hoWorkspace Self (Refproc (AppendTextLn))
70306>>>>>                Send AppendTextLn ""
70307>>>>>            End
70307>>>>>>
70307>>>>>        End
70307>>>>>>
70307>>>>>    End_Procedure
70308>>>>>    
70308>>>>>    // If connection ids are used, we will send the message EnumerateConnections
70308>>>>>    // to the connection manager object passing the an object and message to send
70308>>>>>    // back to this object. It is expected that the connection manager object will
70308>>>>>    // send this message for every line Of information it wants displayed (passing
70308>>>>>    // the information To be displayed
70308>>>>>    Register_Procedure EnumerateConnections Integer hObjId Integer hmMessId
70308>>>>>    
70308>>>>>    Procedure Show_ConnectionIdInformation
70310>>>>>        If (ghoConnection > 0) Begin
70312>>>>>            Send AppendTextLn ""
70313>>>>>            Send EnumerateConnections of ghoConnection Self (RefProc(AppendTextLn))
70314>>>>>        End
70314>>>>>>
70314>>>>>    End_Procedure
70315>>>>>    
70315>>>>>    Function VersionStr Integer iVer Integer iRev Integer iBld Returns String
70317>>>>>        Function_Return (String (iVer) - "." - String (iRev) - "." - String (iBld))
70318>>>>>    End_Function
70319>>>>>    
70319>>>>>    Procedure Show_Versions
70321>>>>>        Integer iVersion iRevision iBuild
70321>>>>>        
70321>>>>>        Version_Information iVersion iRevision iBuild
70323>>>>>        
70323>>>>>        Send AppendTextLn (SFormat (C_$RuntimeVersion, VersionStr(Self,iVersion,iRevision,iBuild) ))
70324>>>>>        Send AppendTextLn (SFormat (C_$PackageVersion, VersionStr(Self,PKG_VERSION, PKG_REVISION, PKG_BUILD) ))
70325>>>>>        Send AppendTextLn (SFormat (C_$FMACVersion, VersionStr(Self,FMAC_VERSION, FMAC_REVISION, FMAC_BUILD) ))
70326>>>>>    End_Procedure
70327>>>>>    
70327>>>>>    Procedure Show_Platform
70329>>>>>        Send AppendTextLn (SFormat (C_$Platform,"64-bit"))
70330>>>>>    End_Procedure
70331>>>>>    
70331>>>>>    Function CKRevisionNumber String sDriverID Returns String
70333>>>>>        Handle hoCLIHandler
70333>>>>>        Handle hoDFBtrDrvHandler
70333>>>>>        String sCKRevision
70333>>>>>        
70333>>>>>        
70333>>>>>        If (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV") Begin
70335>>>>>            Get Create (RefClass(cCLIHandler)) to hoCLIHandler
70336>>>>>            Set psDriverID of hoCLIHandler to sDriverID
70337>>>>>            Move (CKRevision(hoCLIHandler)) to sCKRevision
70338>>>>>            Send Destroy of hoCLIHandler
70339>>>>>        End
70339>>>>>>
70339>>>>>        Else Begin
70340>>>>>            If (sDriverID = "DFBTRDRV") Begin
70342>>>>>                Get Create (RefClass(cDFBtrDrvHandler)) to hoDFBtrDrvHandler
70343>>>>>                Set psDriverID of hoDFBtrDrvHandler to sDriverID
70344>>>>>                Move (CKRevision(hoDFBtrDrvHandler)) to sCKRevision
70345>>>>>                Send Destroy of hoDFBtrDrvHandler
70346>>>>>            End
70346>>>>>>
70346>>>>>        End
70346>>>>>>
70346>>>>>        
70346>>>>>        Function_Return sCKRevision
70347>>>>>    End_Function
70348>>>>>    
70348>>>>>    
70348>>>>>    Function IsDataAccessCK String sDriverID Returns Boolean
70350>>>>>        
70350>>>>>        If (sDriverID = "DATAFLEX") Begin
70352>>>>>            Function_Return False
70353>>>>>        End
70353>>>>>>
70353>>>>>        
70353>>>>>        Function_Return (sDriverID = "MSSQLDRV" or sDriverID = "ODBC_DRV" or sDriverID = "DB2_DRV" or sDriverID = "DFBTRDRV")
70354>>>>>    End_Function
70355>>>>>    
70355>>>>>    
70355>>>>>    Procedure Show_Drivers
70357>>>>>        String sCurrentDriver sRevNumber
70357>>>>>        String sLoadedDrivers sClientDriver
70357>>>>>        Integer iNumberOfDrivers iCount iClientVersion iMSSQLIndex
70357>>>>>        Boolean bOK
70357>>>>>        Handle hoMsqlDrv
70357>>>>>        
70357>>>>>        Move "" to sLoadedDrivers
70358>>>>>        Get_Attribute DF_NUMBER_DRIVERS to iNumberOfDrivers
70361>>>>>        For iCount from 1 to iNumberOfDrivers
70367>>>>>>
70367>>>>>            Get_Attribute DF_DRIVER_NAME of iCount to sCurrentDriver
70370>>>>>            If (sLoadedDrivers <> "") Begin
70372>>>>>                Move (Append (sLoadedDrivers, ", ")) to sLoadedDrivers
70373>>>>>            End
70373>>>>>>
70373>>>>>            Get IsDataAccessCK sCurrentDriver to bOK
70374>>>>>            If (bOK) Begin
70376>>>>>                If (sCurrentDriver = "MSSQLDRV") Begin
70378>>>>>                    Move iCount to iMSSQLIndex
70379>>>>>                End
70379>>>>>>
70379>>>>>                Get CKRevisionNumber sCurrentDriver to sRevNumber
70380>>>>>                // if mssqldrv, show the client number
70380>>>>>                Move (sCurrentDriver * "(" + sRevNumber + ")") to sCurrentDriver
70381>>>>>            End
70381>>>>>>
70381>>>>>            Move (Append (sLoadedDrivers, sCurrentDriver)) to sLoadedDrivers
70382>>>>>        Loop
70383>>>>>>
70383>>>>>        Send AppendTextLn (SFormat (C_$DatabaseDriver, sLoadedDrivers))
70384>>>>>        If (iMSSQLIndex>0) Begin
70386>>>>>            Get_Attribute DF_DRIVER_SQLSERVER_CLIENT_VERSION of iMSSQLIndex to iClientVersion
70389>>>>>            Get Create (RefClass(cMSSQLHandler)) to hoMsqlDrv
70390>>>>>            Get SqlServerClientVersionName of hoMsqlDrv iClientVersion to sClientDriver
70391>>>>>            Send Destroy of hoMsqlDrv
70392>>>>>            Send AppendTextLn (SFormat("MSSQLDRV Client Version: %1", sClientDriver))
70393>>>>>        End
70393>>>>>>
70393>>>>>    End_Procedure
70394>>>>>    
70394>>>>>    Procedure Show_HelpFile
70396>>>>>        String sHelpFile
70396>>>>>        Integer eHelpType
70396>>>>>        
70396>>>>>        If (ghoApplication <> 0) Begin
70398>>>>>            Get peHelpType of ghoApplication to eHelpType
70399>>>>>            If (eHelpType = htHtmlHelp and ghoHtmlHelp) Begin
70401>>>>>                Get GetHelpFile of ghoHtmlHelp to sHelpFile
70402>>>>>            End
70402>>>>>>
70402>>>>>            Else If (eHelpType = htWinHelp and Help_object_id) Begin
70405>>>>>                Get Help_filename of Help_object_id to sHelpFile
70406>>>>>            End
70406>>>>>>
70406>>>>>            Else Begin
70407>>>>>                Move C_$ThereIsNoHelpfileDefined to sHelpFile
70408>>>>>            End
70408>>>>>>
70408>>>>>            
70408>>>>>            Send AppendTextLn ""
70409>>>>>            Send AppendTextLn (SFormat (C_$HelpFile, sHelpFile))
70410>>>>>        End
70410>>>>>>
70410>>>>>    End_Procedure
70411>>>>>    
70411>>>>>    Procedure Show_EnterAsTab
70413>>>>>        Boolean bEnterKeyAsTabKey
70413>>>>>        String sText
70413>>>>>        
70413>>>>>        If (ghoApplication <> 0) Begin
70415>>>>>            Get pbEnterKeyAsTabKey of ghoApplication to bEnterKeyAsTabKey
70416>>>>>            If (bEnterKeyAsTabKey) Begin
70418>>>>>                Move "True" to sText
70419>>>>>            End
70419>>>>>>
70419>>>>>            Else Begin
70420>>>>>                Move "False" to sText
70421>>>>>            End
70421>>>>>>
70421>>>>>            Send AppendTextLn (SFormat (C_$EnterKeyNavForward, sText))
70422>>>>>        End
70422>>>>>>
70422>>>>>    End_Procedure
70423>>>>>    
70423>>>>>    //    During activation we will remove the old information and add the newly
70423>>>>>    //    found systeminformation
70423>>>>>    Procedure Add_Focus Integer hoRoot
70425>>>>>        Forward Send Add_Focus hoRoot
70427>>>>>        
70427>>>>>        Send Delete_Data
70428>>>>>        
70428>>>>>        Set Changed_State to False
70429>>>>>        Set Read_Only_State to True
70430>>>>>        
70430>>>>>        Send Show_ServicePack
70431>>>>>        Send Show_Versions
70432>>>>>        Send Show_Platform
70433>>>>>        Send Show_Drivers
70434>>>>>        If (ghoConnection <> 0) Begin
70436>>>>>            Send Show_ConnectionIdInformation
70437>>>>>        End
70437>>>>>>
70437>>>>>        Send Show_HelpFile
70438>>>>>        Send Show_Current_Directory
70439>>>>>        Send Show_Filelist_Name
70440>>>>>        If (ghoApplication <> 0) Begin
70442>>>>>            Send Show_WorkSpaceInformation // added To show WS info
70443>>>>>        End
70443>>>>>>
70443>>>>>        Send Show_Current_User
70444>>>>>        Send Show_Windows_Directory
70445>>>>>        Send Show_Screen_Size
70446>>>>>        Send Show_Page_Size
70447>>>>>        Send Show_EnterAsTab
70448>>>>>        Send Show_Number_Format
70449>>>>>        Send Show_Date_Format
70450>>>>>        Send Show_Lock_Delay
70451>>>>>        Send Show_Lock_Timeout
70452>>>>>        Send Show_Date
70453>>>>>        Send Show_Systemresources
70454>>>>>        Send Show_Registration
70455>>>>>        Send Beginning_of_Data
70456>>>>>        
70456>>>>>        Set Icon to 'default.ico'
70457>>>>>    End_Procedure
70458>>>>>End_Class
70459>>>>>
70459>>>>>Class SysInfoDialog is a ModalPanel
70460>>>>>    Procedure Construct_Object
70462>>>>>        Forward Send Construct_Object
70464>>>>>        
70464>>>>>        Set Label to C_$SystemInformation
70465>>>>>        Set Size to 140 267
70466>>>>>        Set piMinSize to 140 267
70467>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
70468>>>>>        Set Border_Style to Border_Thick
70469>>>>>        
70469>>>>>        Object oSysinfoDisplay is a SysInfoDisplay
70471>>>>>            Set peAnchors to anAll
70472>>>>>        End_Object
70473>>>>>        
70473>>>>>        Object oCloseButton is a Button
70475>>>>>            Set Label to C_$Close
70476>>>>>            Set Location to 120 210
70477>>>>>            Set Message 0 to (Refproc (Close_Panel))
70478>>>>>            Set Default_State to True
70479>>>>>            Set peAnchors to anBottomRight
70480>>>>>        End_Object
70481>>>>>        
70481>>>>>        On_Key kCancel Send Close_Panel
70482>>>>>    End_Procedure
70483>>>>>End_Class
70484>>>>>
70484>>>>>Class AboutDialog is a ModalPanel
70485>>>>>    Procedure Construct_Object
70487>>>>>        String sVdfRootDir
70487>>>>>        
70487>>>>>        Forward Send Construct_Object
70489>>>>>        
70489>>>>>        Set Label to C_$About
70490>>>>>        Set Size to 89 212
70491>>>>>        Set Locate_Mode to CENTER_ON_SCREEN
70492>>>>>        
70492>>>>>        Object oSysInfoDialog is a SysInfoDialog
70494>>>>>        End_Object
70495>>>>>        
70495>>>>>        Object oBox is a Container3d
70497>>>>>            Set Border_Style to Border_StaticEdge
70498>>>>>            Set Size to 63 202
70499>>>>>            Set Location to 4 5
70500>>>>>            
70500>>>>>            Object oAboutGraphic is a BitmapContainer
70502>>>>>                Set Border_Style to Border_None
70503>>>>>                Set Bitmap_Style to Bitmap_Center
70504>>>>>                Set Size to 48 48
70505>>>>>                Set Location to 7 2
70506>>>>>            End_Object
70507>>>>>            
70507>>>>>            Object oProductName is a TextBox
70509>>>>>                Set Label to C_$ProductName
70510>>>>>                Set Size to 10 45
70511>>>>>                Set Location to 8 53
70512>>>>>            End_Object
70513>>>>>            
70513>>>>>            Object oVersion is a TextBox
70515>>>>>                Set Label to C_$Version
70516>>>>>                Set Size to 10 25
70517>>>>>                Set Location to 21 53
70518>>>>>            End_Object
70519>>>>>            
70519>>>>>            Object oCopyright is a TextBox
70521>>>>>                Set Label to C_$Copyright
70522>>>>>                Set Size to 10 31
70523>>>>>                Set Location to 34 53
70524>>>>>            End_Object
70525>>>>>            
70525>>>>>            Object oAuthor is a TextBox
70527>>>>>                Set Label to C_$Author
70528>>>>>                Set Size to 10 22
70529>>>>>                Set Location to 46 53
70530>>>>>            End_Object
70531>>>>>        End_Object
70532>>>>>        
70532>>>>>        Object oOKButton is a Button
70534>>>>>            On_Item C_$OK Send Close_Panel
70535>>>>>            Set Size to 14 50
70536>>>>>            Set Location to 71 157
70537>>>>>        End_Object
70538>>>>>        
70538>>>>>        Object oSysInfoButton is a Button
70540>>>>>            On_Item C_$SystemInfo Send Show_Sysinfo
70541>>>>>            Set Size to 14 50
70542>>>>>            Set Location to 71 101
70543>>>>>        End_Object
70544>>>>>        
70544>>>>>        On_Key Kcancel Send KeyAction of oOKButton
70545>>>>>        
70545>>>>>        Set Logo to "DacAbout.bmp"  // square bitmaps Of 42x42 work best
70546>>>>>    End_Procedure
70547>>>>>    
70547>>>>>    Procedure Set ProductName String sProductName
70549>>>>>        Set Label of oProductName to sProductName
70550>>>>>    End_Procedure
70551>>>>>    
70551>>>>>    Procedure Set Version String sVersion
70553>>>>>        Set Label of oVersion to sVersion
70554>>>>>    End_Procedure
70555>>>>>    
70555>>>>>    Procedure Set Copyright String sCopyright
70557>>>>>        Set Label of oCopyright to sCopyright
70558>>>>>    End_Procedure
70559>>>>>    
70559>>>>>    Procedure Set Author String sAuthor
70561>>>>>        Set Label of oAuthor to sAuthor
70562>>>>>    End_Procedure
70563>>>>>    
70563>>>>>    Procedure Set Logo String sLogo
70565>>>>>        // square bitmaps Of 42x42 work best
70565>>>>>        Set Bitmap of oAboutGraphic to sLogo
70566>>>>>    End_Procedure
70567>>>>>    
70567>>>>>    Procedure Show_Sysinfo
70569>>>>>        Send Popup_Modal of oSysinfoDialog
70570>>>>>    End_Procedure
70571>>>>>    
70571>>>>>    Procedure End_Construct_Object
70573>>>>>        Handle hoVersionInfo
70573>>>>>        Boolean bIncluded
70573>>>>>        Integer iMajor iMinor iRelease iBuild
70573>>>>>        String sLabel
70573>>>>>        
70573>>>>>        Get Label of oVersion to sLabel
70574>>>>>        If (sLabel = C_$VERSION) Begin
70576>>>>>            // set it To the version info Of the program, if available
70576>>>>>            If (ghoApplication <> 0) Begin
70578>>>>>                Get phoVersionInfo of ghoApplication to hoVersionInfo
70579>>>>>                If (hoVersionInfo <> 0) Begin
70581>>>>>                    Get pbIncluded of hoVersionInfo to bIncluded
70582>>>>>                    If (bIncluded) Begin
70584>>>>>                        Get piVersionMajor of hoVersionInfo to iMajor
70585>>>>>                        Get piVersionMinor of hoVersionInfo to iMinor
70586>>>>>                        Get piVersionRelease of hoVersionInfo to iRelease
70587>>>>>                        Get piVersionBuild of hoVersionInfo to iBuild
70588>>>>>                        Move (SFormat (C_$VERSION + ": %1.%2.%3.%4", iMajor, iMinor, iRelease, iBuild)) to sLabel
70589>>>>>                        Set Version to sLabel
70590>>>>>                    End
70590>>>>>>
70590>>>>>                End
70590>>>>>>
70590>>>>>            End
70590>>>>>>
70590>>>>>        End
70590>>>>>>
70590>>>>>        
70590>>>>>        Forward Send End_Construct_Object
70592>>>>>    End_Procedure
70593>>>>>End_Class
70594>>>
70594>>>//  This is the default message. It is expected that you will
70594>>>//  create your own message to override this
70594>>>Procedure Activate_About
70597>>>    Send DoAbout "" "" "" "" ""
70598>>>End_Procedure
70599>>>
70599>>>//  It is expected that you will send this message (most
70599>>>//  likely from Activate_About. This creates an about object, activates it
70599>>>//  and destroys it when done. It is not exepected that you will augment this.
70599>>>Procedure DoAbout String sTitle String sVersion String sCopyRight String sAuthor String sBitmap
70602>>>    Integer hoObj hoMain
70602>>>    
70602>>>    // create object
70602>>>    Object About is an AboutDialog
70604>>>        // if no title passed use the label of the main panel
70604>>>        // (if a main panel exists).
70604>>>        If (sTitle = "") Begin
70606>>>            Get Main_Window of desktop to hoMain
70607>>>            If hoMain ;                Get Label of hoMain to sTitle
70610>>>        End
70610>>>>
70610>>>        Set productname to sTitle
70611>>>        Set version     to sVersion
70612>>>        Set copyright   to sCopyRight
70613>>>        Set author      to sAuthor
70614>>>        If (sBitmap <> '') ;            Set logo to sBitMap // square bitmaps of 42x42 work best
70617>>>        Move Self to hoObj // object Id
70618>>>    End_Object
70619>>>    Send Popup   of hoObj    // popup the about object
70620>>>    Send Destroy of hoObj // when done, it will be destroyed
70621>>>End_Procedure
70622>>>
70622>
70622>        Procedure Activate_About
70625>            Send DoAbout "" "" "" "" ""
70626>        End_Procedure
70627>
70627>    End_Object
70628>
70628>End_Object
70629>
70629>Start_UI
70630>
Summary
Memory Available: 8084512768
Total Warnings : 0
Total Errors   : 1
Total Symbols  : 41370
Total Resources: 0
Total Commands : 70629
Total Windows  : 0
Total Pages    : 0
Static Data    : 477365
Message area   : 497448
Total Blocks   : 26591
1 ERROR HAS BEEN FOUND.
